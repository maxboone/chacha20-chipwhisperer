   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"shiffthq.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.rodata.str1.1,"aMS",%progbits,1
  16              	.LC1:
  17 0000 48656C6C 		.ascii	"Hello from Chipwhispererer, Im only here to get enc"
  17      6F206672 
  17      6F6D2043 
  17      68697077 
  17      68697370 
  18 0033 72797074 		.ascii	"rypted and yo\000"
  18      65642061 
  18      6E642079 
  18      6F00
  19              		.section	.text.set_nonce,"ax",%progbits
  20              		.align	1
  21              		.global	set_nonce
  22              		.arch armv7e-m
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  26              		.fpu softvfp
  28              	set_nonce:
  29              	.LVL0:
  30              	.LFB3:
  31              		.file 1 "shiffthq.c"
   1:shiffthq.c    **** #include "chacha20.h"
   2:shiffthq.c    **** #include "simpleserial.h"
   3:shiffthq.c    **** 
   4:shiffthq.c    **** #include <stdint.h>
   5:shiffthq.c    **** #include <string.h>
   6:shiffthq.c    **** #include <stdio.h>
   7:shiffthq.c    **** 
   8:shiffthq.c    **** // check size of input bytes!
   9:shiffthq.c    **** #define INPUT_SIZE 64
  10:shiffthq.c    **** #define KEY_SIZE 32
  11:shiffthq.c    **** #define NONCE_SIZE 12
  12:shiffthq.c    **** #define COUNT_SIZE 4
  13:shiffthq.c    **** 
  14:shiffthq.c    **** uint8_t set_nonce(uint8_t* nc, uint8_t len){
  32              		.loc 1 14 44 view -0
  33              		.cfi_startproc
  34              		@ args = 0, pretend = 0, frame = 176
  35              		@ frame_needed = 0, uses_anonymous_args = 0
  15:shiffthq.c    ****     if (len != NONCE_SIZE+COUNT_SIZE) return 1;
  36              		.loc 1 15 5 view .LVU1
  14:shiffthq.c    ****     if (len != NONCE_SIZE+COUNT_SIZE) return 1;
  37              		.loc 1 14 44 is_stmt 0 view .LVU2
  38 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  39              	.LCFI0:
  40              		.cfi_def_cfa_offset 24
  41              		.cfi_offset 4, -24
  42              		.cfi_offset 5, -20
  43              		.cfi_offset 6, -16
  44              		.cfi_offset 7, -12
  45              		.cfi_offset 8, -8
  46              		.cfi_offset 14, -4
  47              		.loc 1 15 8 view .LVU3
  48 0004 1029     		cmp	r1, #16
  14:shiffthq.c    ****     if (len != NONCE_SIZE+COUNT_SIZE) return 1;
  49              		.loc 1 14 44 view .LVU4
  50 0006 AEB0     		sub	sp, sp, #184
  51              	.LCFI1:
  52              		.cfi_def_cfa_offset 208
  14:shiffthq.c    ****     if (len != NONCE_SIZE+COUNT_SIZE) return 1;
  53              		.loc 1 14 44 view .LVU5
  54 0008 0346     		mov	r3, r0
  55              		.loc 1 15 8 view .LVU6
  56 000a 55D1     		bne	.L5
  57              	.LVL1:
  58              	.LBB4:
  59              	.LBI4:
  14:shiffthq.c    ****     if (len != NONCE_SIZE+COUNT_SIZE) return 1;
  60              		.loc 1 14 9 is_stmt 1 view .LVU7
  61              	.LBB5:
  16:shiffthq.c    ****     uint8_t encrypt[INPUT_SIZE];
  62              		.loc 1 16 5 view .LVU8
  17:shiffthq.c    ****     uint8_t key[KEY_SIZE] = {
  63              		.loc 1 17 5 view .LVU9
  64              		.loc 1 17 13 is_stmt 0 view .LVU10
  65 000c 2B4A     		ldr	r2, .L8
  66 000e 06AC     		add	r4, sp, #24
  67 0010 02F12007 		add	r7, r2, #32
  68 0014 2646     		mov	r6, r4
  69              	.LVL2:
  70              	.L3:
  71              		.loc 1 17 13 view .LVU11
  72 0016 1068     		ldr	r0, [r2]	@ unaligned
  73 0018 5168     		ldr	r1, [r2, #4]	@ unaligned
  74 001a 2546     		mov	r5, r4
  75 001c 03C5     		stmia	r5!, {r0, r1}
  76 001e 0832     		adds	r2, r2, #8
  77 0020 BA42     		cmp	r2, r7
  78 0022 2C46     		mov	r4, r5
  79 0024 F7D1     		bne	.L3
  18:shiffthq.c    ****             0x00, 0x01, 0x02, 0x03,
  19:shiffthq.c    ****             0x04, 0x05, 0x06, 0x07,
  20:shiffthq.c    ****             0x08, 0x09, 0x0a, 0x0b,
  21:shiffthq.c    ****             0x0c, 0x0d, 0x0e, 0x0f,
  22:shiffthq.c    ****             0x10, 0x11, 0x12, 0x13,
  23:shiffthq.c    ****             0x14, 0x15, 0x16, 0x17,
  24:shiffthq.c    ****             0x18, 0x19, 0x1a, 0x1b,
  25:shiffthq.c    ****             0x1c, 0x1d, 0x1e, 0x1f
  26:shiffthq.c    ****     }; // key size 256 bit (32 bytes)
  27:shiffthq.c    **** 
  28:shiffthq.c    ****     // 12 bytes initial vector => 96 bit (in original 64 bit, but see: https://datatracker.ietf.org
  29:shiffthq.c    ****     // => to be set in the attack scenario
  30:shiffthq.c    ****     /*uint8_t nonce[NONCE_SIZE] = {
  31:shiffthq.c    ****             nc[0], nc[1], nc[2], nc[3],
  32:shiffthq.c    ****             nc[4], nc[5], nc[6], nc[7],
  33:shiffthq.c    ****             nc[8], nc[9], nc[10], nc[11]
  34:shiffthq.c    ****     };*/
  35:shiffthq.c    ****     uint8_t nonce[NONCE_SIZE] = {
  80              		.loc 1 35 5 is_stmt 1 view .LVU12
  81              		.loc 1 35 13 is_stmt 0 view .LVU13
  82 0026 1A79     		ldrb	r2, [r3, #4]	@ zero_extendqisi2
  83 0028 8DF80C20 		strb	r2, [sp, #12]
  84 002c 5A79     		ldrb	r2, [r3, #5]	@ zero_extendqisi2
  85 002e 8DF80D20 		strb	r2, [sp, #13]
  86 0032 9A79     		ldrb	r2, [r3, #6]	@ zero_extendqisi2
  87 0034 8DF80E20 		strb	r2, [sp, #14]
  88 0038 DA79     		ldrb	r2, [r3, #7]	@ zero_extendqisi2
  89 003a 8DF80F20 		strb	r2, [sp, #15]
  90 003e 1A7A     		ldrb	r2, [r3, #8]	@ zero_extendqisi2
  91 0040 8DF81020 		strb	r2, [sp, #16]
  92 0044 5A7A     		ldrb	r2, [r3, #9]	@ zero_extendqisi2
  93 0046 8DF81120 		strb	r2, [sp, #17]
  94 004a 9A7A     		ldrb	r2, [r3, #10]	@ zero_extendqisi2
  95 004c 8DF81220 		strb	r2, [sp, #18]
  96 0050 DA7A     		ldrb	r2, [r3, #11]	@ zero_extendqisi2
  97 0052 8DF81320 		strb	r2, [sp, #19]
  98 0056 1A7B     		ldrb	r2, [r3, #12]	@ zero_extendqisi2
  99 0058 8DF81420 		strb	r2, [sp, #20]
 100 005c 5A7B     		ldrb	r2, [r3, #13]	@ zero_extendqisi2
 101 005e 8DF81520 		strb	r2, [sp, #21]
 102 0062 9A7B     		ldrb	r2, [r3, #14]	@ zero_extendqisi2
 103 0064 8DF81620 		strb	r2, [sp, #22]
 104 0068 DA7B     		ldrb	r2, [r3, #15]	@ zero_extendqisi2
 105 006a 8DF81720 		strb	r2, [sp, #23]
  36:shiffthq.c    ****             nc[4], nc[5], nc[6], nc[7],
  37:shiffthq.c    ****             nc[8], nc[9], nc[10], nc[11],
  38:shiffthq.c    ****             nc[12], nc[13], nc[14], nc[15]
  39:shiffthq.c    ****     };
  40:shiffthq.c    **** 
  41:shiffthq.c    ****     // 4 bytes counter
  42:shiffthq.c    ****     // use function to get uint32_t LE counter
  43:shiffthq.c    ****     /*uint8_t count_arr[COUNT_SIZE] = {
  44:shiffthq.c    ****             nc[12], nc[13], nc[14], nc[15]
  45:shiffthq.c    ****     };
  46:shiffthq.c    ****     uint32_t counter = u8t32le(count_arr); */
  47:shiffthq.c    ****     // conversion from uint8_t to uint32_t with shifting => BE?
  48:shiffthq.c    ****     // https://forum.arduino.cc/t/convert-4-uint8_t-into-one-uint32_t/577243
  49:shiffthq.c    ****     //uint32_t counter = nc[12] | (nc[13] << 8) | (nc[14] << 16) | (nc[15] << 24);
  50:shiffthq.c    ****     uint32_t counter = nc[0] | (nc[1] << 8) | (nc[2] << 16) | (nc[3] << 24);
 106              		.loc 1 50 5 is_stmt 1 view .LVU14
  51:shiffthq.c    **** 
  52:shiffthq.c    ****     // Hello from Chipwhispererer, I'm only here to get encrypted and yo(u?)
  53:shiffthq.c    ****     uint8_t input[INPUT_SIZE] = {
 107              		.loc 1 53 13 is_stmt 0 view .LVU15
 108 006e 144A     		ldr	r2, .L8+4
 109 0070 1F68     		ldr	r7, [r3]	@ unaligned
 110              	.LVL3:
 111              		.loc 1 53 5 is_stmt 1 view .LVU16
 112              		.loc 1 53 13 is_stmt 0 view .LVU17
 113 0072 1EAC     		add	r4, sp, #120
 114 0074 02F14003 		add	r3, r2, #64
 115              	.LVL4:
 116              		.loc 1 53 13 view .LVU18
 117 0078 A046     		mov	r8, r4
 118              	.L4:
 119 007a 1068     		ldr	r0, [r2]	@ unaligned
 120 007c 5168     		ldr	r1, [r2, #4]	@ unaligned
 121 007e 2546     		mov	r5, r4
 122 0080 03C5     		stmia	r5!, {r0, r1}
 123 0082 0832     		adds	r2, r2, #8
 124 0084 9A42     		cmp	r2, r3
 125 0086 2C46     		mov	r4, r5
 126 0088 F7D1     		bne	.L4
  54:shiffthq.c    ****             0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x66, 0x72,
  55:shiffthq.c    ****             0x6f, 0x6d, 0x20, 0x43, 0x68, 0x69, 0x70, 0x77,
  56:shiffthq.c    ****             0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x65, 0x72,
  57:shiffthq.c    ****             0x65, 0x72, 0x2c, 0x20, 0x49, 0x6d, 0x20, 0x6f,
  58:shiffthq.c    ****             0x6e, 0x6c, 0x79, 0x20, 0x68, 0x65, 0x72, 0x65,
  59:shiffthq.c    ****             0x20, 0x74, 0x6f, 0x20, 0x67, 0x65, 0x74, 0x20,
  60:shiffthq.c    ****             0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
  61:shiffthq.c    ****             0x64, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x79, 0x6f,
  62:shiffthq.c    ****             //0x75, 0x3f
  63:shiffthq.c    ****     };
  64:shiffthq.c    **** 
  65:shiffthq.c    ****     // encrypt
  66:shiffthq.c    ****     trigger_high();
 127              		.loc 1 66 5 is_stmt 1 view .LVU19
  67:shiffthq.c    ****     ChaCha20XOR(key, counter, nonce, input, encrypt, INPUT_SIZE);
 128              		.loc 1 67 5 is_stmt 0 view .LVU20
 129 008a 4024     		movs	r4, #64
 130 008c 0EAD     		add	r5, sp, #56
  66:shiffthq.c    ****     ChaCha20XOR(key, counter, nonce, input, encrypt, INPUT_SIZE);
 131              		.loc 1 66 5 view .LVU21
 132 008e FFF7FEFF 		bl	trigger_high
 133              	.LVL5:
 134              		.loc 1 67 5 is_stmt 1 view .LVU22
 135 0092 4346     		mov	r3, r8
 136 0094 03AA     		add	r2, sp, #12
 137 0096 3946     		mov	r1, r7
 138 0098 3046     		mov	r0, r6
 139 009a 0194     		str	r4, [sp, #4]
 140 009c 0095     		str	r5, [sp]
 141 009e FFF7FEFF 		bl	ChaCha20XOR
 142              	.LVL6:
  68:shiffthq.c    ****     trigger_low();
 143              		.loc 1 68 5 view .LVU23
 144 00a2 FFF7FEFF 		bl	trigger_low
 145              	.LVL7:
  69:shiffthq.c    ****     
  70:shiffthq.c    ****     // put encrypted/decrypted to simple serial
  71:shiffthq.c    ****     simpleserial_put('r', INPUT_SIZE, encrypt);
 146              		.loc 1 71 5 view .LVU24
 147 00a6 7220     		movs	r0, #114
 148 00a8 2A46     		mov	r2, r5
 149 00aa 2146     		mov	r1, r4
 150 00ac FFF7FEFF 		bl	simpleserial_put
 151              	.LVL8:
  72:shiffthq.c    ****     
  73:shiffthq.c    ****     return 0;
 152              		.loc 1 73 5 view .LVU25
 153              		.loc 1 73 5 is_stmt 0 view .LVU26
 154 00b0 0020     		movs	r0, #0
 155              	.L2:
 156              		.loc 1 73 5 view .LVU27
 157              	.LBE5:
 158              	.LBE4:
  74:shiffthq.c    **** }
 159              		.loc 1 74 1 view .LVU28
 160 00b2 2EB0     		add	sp, sp, #184
 161              	.LCFI2:
 162              		.cfi_remember_state
 163              		.cfi_def_cfa_offset 24
 164              		@ sp needed
 165 00b4 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 166              	.LVL9:
 167              	.L5:
 168              	.LCFI3:
 169              		.cfi_restore_state
  15:shiffthq.c    ****     uint8_t encrypt[INPUT_SIZE];
 170              		.loc 1 15 46 view .LVU29
 171 00b8 0120     		movs	r0, #1
 172              	.LVL10:
  15:shiffthq.c    ****     uint8_t encrypt[INPUT_SIZE];
 173              		.loc 1 15 46 view .LVU30
 174 00ba FAE7     		b	.L2
 175              	.L9:
 176              		.align	2
 177              	.L8:
 178 00bc 00000000 		.word	.LANCHOR0
 179 00c0 00000000 		.word	.LC1
 180              		.cfi_endproc
 181              	.LFE3:
 183              		.section	.text.startup.main,"ax",%progbits
 184              		.align	1
 185              		.global	main
 186              		.syntax unified
 187              		.thumb
 188              		.thumb_func
 189              		.fpu softvfp
 191              	main:
 192              	.LFB4:
  75:shiffthq.c    **** 
  76:shiffthq.c    **** 
  77:shiffthq.c    **** int main(void) {
 193              		.loc 1 77 16 is_stmt 1 view -0
 194              		.cfi_startproc
 195              		@ Volatile: function does not return.
 196              		@ args = 0, pretend = 0, frame = 0
 197              		@ frame_needed = 0, uses_anonymous_args = 0
  78:shiffthq.c    ****     platform_init();
 198              		.loc 1 78 5 view .LVU32
  77:shiffthq.c    ****     platform_init();
 199              		.loc 1 77 16 is_stmt 0 view .LVU33
 200 0000 08B5     		push	{r3, lr}
 201              	.LCFI4:
 202              		.cfi_def_cfa_offset 8
 203              		.cfi_offset 3, -8
 204              		.cfi_offset 14, -4
 205              		.loc 1 78 5 view .LVU34
 206 0002 FFF7FEFF 		bl	platform_init
 207              	.LVL11:
  79:shiffthq.c    ****     init_uart();
 208              		.loc 1 79 5 is_stmt 1 view .LVU35
 209 0006 FFF7FEFF 		bl	init_uart
 210              	.LVL12:
  80:shiffthq.c    ****     trigger_setup();
 211              		.loc 1 80 5 view .LVU36
 212 000a FFF7FEFF 		bl	trigger_setup
 213              	.LVL13:
  81:shiffthq.c    **** 
  82:shiffthq.c    ****     simpleserial_init();
 214              		.loc 1 82 5 view .LVU37
 215 000e FFF7FEFF 		bl	simpleserial_init
 216              	.LVL14:
  83:shiffthq.c    ****     // 12 Bytes for nonce, 4 Bytes for counter
  84:shiffthq.c    ****     simpleserial_addcmd('p', 16, set_nonce);
 217              		.loc 1 84 5 view .LVU38
 218 0012 044A     		ldr	r2, .L12
 219 0014 1021     		movs	r1, #16
 220 0016 7020     		movs	r0, #112
 221 0018 FFF7FEFF 		bl	simpleserial_addcmd
 222              	.LVL15:
 223              	.L11:
  85:shiffthq.c    **** 
  86:shiffthq.c    ****     while(1)
 224              		.loc 1 86 5 discriminator 1 view .LVU39
  87:shiffthq.c    ****         simpleserial_get();
 225              		.loc 1 87 9 discriminator 1 view .LVU40
 226 001c FFF7FEFF 		bl	simpleserial_get
 227              	.LVL16:
  86:shiffthq.c    ****         simpleserial_get();
 228              		.loc 1 86 10 discriminator 1 view .LVU41
 229 0020 FCE7     		b	.L11
 230              	.L13:
 231 0022 00BF     		.align	2
 232              	.L12:
 233 0024 00000000 		.word	set_nonce
 234              		.cfi_endproc
 235              	.LFE4:
 237              		.section	.rodata
 238              		.set	.LANCHOR0,. + 0
 239              	.LC0:
 240 0000 00010203 		.ascii	"\000\001\002\003\004\005\006\007\010\011\012\013\014"
 240      04050607 
 240      08090A0B 
 240      0C
 241 000d 0D0E0F10 		.ascii	"\015\016\017\020\021\022\023\024\025\026\027\030\031"
 241      11121314 
 241      15161718 
 241      19
 242 001a 1A1B1C1D 		.ascii	"\032\033\034\035\036\037"
 242      1E1F
 243              		.text
 244              	.Letext0:
 245              		.file 2 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stdint.h"
 246              		.file 3 ".././simpleserial/simpleserial.h"
 247              		.file 4 "./lib/shiffthq/src/chacha20.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 shiffthq.c
     /tmp/ccdzh24L.s:20     .text.set_nonce:0000000000000000 $t
     /tmp/ccdzh24L.s:28     .text.set_nonce:0000000000000000 set_nonce
     /tmp/ccdzh24L.s:178    .text.set_nonce:00000000000000bc $d
     /tmp/ccdzh24L.s:184    .text.startup.main:0000000000000000 $t
     /tmp/ccdzh24L.s:191    .text.startup.main:0000000000000000 main
     /tmp/ccdzh24L.s:233    .text.startup.main:0000000000000024 $d

UNDEFINED SYMBOLS
trigger_high
ChaCha20XOR
trigger_low
simpleserial_put
platform_init
init_uart
trigger_setup
simpleserial_init
simpleserial_addcmd
simpleserial_get
