   1              		.cpu cortex-m0
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"simpleserial.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 ".././simpleserial/simpleserial.c"
  18              		.section	.text.check_version,"ax",%progbits
  19              		.align	1
  20              		.global	check_version
  21              		.syntax unified
  22              		.code	16
  23              		.thumb_func
  25              	check_version:
  26              	.LVL0:
  27              	.LFB3:
   1:.././simpleserial/simpleserial.c **** // simpleserial.c
   2:.././simpleserial/simpleserial.c **** 
   3:.././simpleserial/simpleserial.c **** #include "simpleserial.h"
   4:.././simpleserial/simpleserial.c **** #include <stdint.h>
   5:.././simpleserial/simpleserial.c **** #include "hal.h"
   6:.././simpleserial/simpleserial.c **** 
   7:.././simpleserial/simpleserial.c **** 
   8:.././simpleserial/simpleserial.c **** #define MAX_SS_CMDS 16
   9:.././simpleserial/simpleserial.c **** static int num_commands = 0;
  10:.././simpleserial/simpleserial.c **** 
  11:.././simpleserial/simpleserial.c **** #define MAX_SS_LEN 256
  12:.././simpleserial/simpleserial.c **** 
  13:.././simpleserial/simpleserial.c **** //#define SS_VER_1_0 0
  14:.././simpleserial/simpleserial.c **** //#define SS_VER_1_1 1
  15:.././simpleserial/simpleserial.c **** //#define SS_VER_2_0 2
  16:.././simpleserial/simpleserial.c **** 
  17:.././simpleserial/simpleserial.c **** 
  18:.././simpleserial/simpleserial.c **** // 0xA6 formerly 
  19:.././simpleserial/simpleserial.c **** #define CW_CRC 0x4D 
  20:.././simpleserial/simpleserial.c **** uint8_t ss_crc(uint8_t *buf, uint8_t len)
  21:.././simpleserial/simpleserial.c **** {
  22:.././simpleserial/simpleserial.c **** 	unsigned int k = 0;
  23:.././simpleserial/simpleserial.c **** 	uint8_t crc = 0x00;
  24:.././simpleserial/simpleserial.c **** 	while (len--) {
  25:.././simpleserial/simpleserial.c **** 		crc ^= *buf++;
  26:.././simpleserial/simpleserial.c **** 		for (k = 0; k < 8; k++) {
  27:.././simpleserial/simpleserial.c **** 			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
  28:.././simpleserial/simpleserial.c **** 		}
  29:.././simpleserial/simpleserial.c **** 	}
  30:.././simpleserial/simpleserial.c **** 	return crc;
  31:.././simpleserial/simpleserial.c **** 
  32:.././simpleserial/simpleserial.c **** }
  33:.././simpleserial/simpleserial.c **** 
  34:.././simpleserial/simpleserial.c **** // [B_STUFF, CMD, SCMD, LEN, B_STUFF, DATA..., CRC, TERM]
  35:.././simpleserial/simpleserial.c **** 
  36:.././simpleserial/simpleserial.c **** //#define SS_VER SS_VER_2_0
  37:.././simpleserial/simpleserial.c **** #if SS_VER == SS_VER_2_0
  38:.././simpleserial/simpleserial.c **** #error "SS_VER_2_0 is deprecated! Use SS_VER_2_1 instead."
  39:.././simpleserial/simpleserial.c **** #elif SS_VER == SS_VER_2_1
  40:.././simpleserial/simpleserial.c **** 
  41:.././simpleserial/simpleserial.c **** int hex_decode(int len, char* ascii_buf, uint8_t* data_buf)
  42:.././simpleserial/simpleserial.c **** {
  43:.././simpleserial/simpleserial.c **** 	for(int i = 0; i < len; i++)
  44:.././simpleserial/simpleserial.c **** 	{
  45:.././simpleserial/simpleserial.c **** 		char n_hi = ascii_buf[2*i];
  46:.././simpleserial/simpleserial.c **** 		char n_lo = ascii_buf[2*i+1];
  47:.././simpleserial/simpleserial.c **** 
  48:.././simpleserial/simpleserial.c **** 		if(n_lo >= '0' && n_lo <= '9')
  49:.././simpleserial/simpleserial.c **** 			data_buf[i] = n_lo - '0';
  50:.././simpleserial/simpleserial.c **** 		else if(n_lo >= 'A' && n_lo <= 'F')
  51:.././simpleserial/simpleserial.c **** 			data_buf[i] = n_lo - 'A' + 10;
  52:.././simpleserial/simpleserial.c **** 		else if(n_lo >= 'a' && n_lo <= 'f')
  53:.././simpleserial/simpleserial.c **** 			data_buf[i] = n_lo - 'a' + 10;
  54:.././simpleserial/simpleserial.c **** 		else
  55:.././simpleserial/simpleserial.c **** 			return 1;
  56:.././simpleserial/simpleserial.c **** 
  57:.././simpleserial/simpleserial.c **** 		if(n_hi >= '0' && n_hi <= '9')
  58:.././simpleserial/simpleserial.c **** 			data_buf[i] |= (n_hi - '0') << 4;
  59:.././simpleserial/simpleserial.c **** 		else if(n_hi >= 'A' && n_hi <= 'F')
  60:.././simpleserial/simpleserial.c **** 			data_buf[i] |= (n_hi - 'A' + 10) << 4;
  61:.././simpleserial/simpleserial.c **** 		else if(n_hi >= 'a' && n_hi <= 'f')
  62:.././simpleserial/simpleserial.c **** 			data_buf[i] |= (n_hi - 'a' + 10) << 4;
  63:.././simpleserial/simpleserial.c **** 		else
  64:.././simpleserial/simpleserial.c **** 			return 1;
  65:.././simpleserial/simpleserial.c **** 	}
  66:.././simpleserial/simpleserial.c **** 
  67:.././simpleserial/simpleserial.c **** 	return 0;
  68:.././simpleserial/simpleserial.c **** }
  69:.././simpleserial/simpleserial.c **** 
  70:.././simpleserial/simpleserial.c **** typedef struct ss_cmd
  71:.././simpleserial/simpleserial.c **** {
  72:.././simpleserial/simpleserial.c **** 	char c;
  73:.././simpleserial/simpleserial.c **** 	unsigned int len;
  74:.././simpleserial/simpleserial.c **** 	uint8_t (*fp)(uint8_t, uint8_t, uint8_t, uint8_t *);
  75:.././simpleserial/simpleserial.c **** } ss_cmd;
  76:.././simpleserial/simpleserial.c **** static ss_cmd commands[MAX_SS_CMDS];
  77:.././simpleserial/simpleserial.c **** 
  78:.././simpleserial/simpleserial.c **** void ss_puts(char *x)
  79:.././simpleserial/simpleserial.c **** {
  80:.././simpleserial/simpleserial.c **** 	do {
  81:.././simpleserial/simpleserial.c **** 		putch(*x);
  82:.././simpleserial/simpleserial.c **** 	} while (*++x);
  83:.././simpleserial/simpleserial.c **** }
  84:.././simpleserial/simpleserial.c **** 
  85:.././simpleserial/simpleserial.c **** #define FRAME_BYTE 0x00
  86:.././simpleserial/simpleserial.c **** 
  87:.././simpleserial/simpleserial.c **** uint8_t check_version(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t *data)
  88:.././simpleserial/simpleserial.c **** {
  89:.././simpleserial/simpleserial.c **** 	uint8_t ver = SS_VER;
  90:.././simpleserial/simpleserial.c **** 	simpleserial_put('r', 1, &ver);
  91:.././simpleserial/simpleserial.c **** 	return SS_ERR_OK;
  92:.././simpleserial/simpleserial.c **** }
  93:.././simpleserial/simpleserial.c **** 
  94:.././simpleserial/simpleserial.c **** uint8_t ss_get_commands(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t *data)
  95:.././simpleserial/simpleserial.c **** {
  96:.././simpleserial/simpleserial.c ****     uint8_t cmd_chars[MAX_SS_CMDS];
  97:.././simpleserial/simpleserial.c ****     for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
  98:.././simpleserial/simpleserial.c ****         cmd_chars[i] = commands[i].c;
  99:.././simpleserial/simpleserial.c ****     }
 100:.././simpleserial/simpleserial.c **** 
 101:.././simpleserial/simpleserial.c ****     simpleserial_put('r', num_commands & 0xFF, (void *)cmd_chars);
 102:.././simpleserial/simpleserial.c ****     return 0x00;
 103:.././simpleserial/simpleserial.c **** 
 104:.././simpleserial/simpleserial.c **** }
 105:.././simpleserial/simpleserial.c **** 
 106:.././simpleserial/simpleserial.c **** uint8_t stuff_data(uint8_t *buf, uint8_t len)
 107:.././simpleserial/simpleserial.c **** {
 108:.././simpleserial/simpleserial.c **** 	uint8_t i = 1;
 109:.././simpleserial/simpleserial.c **** 	uint8_t last = 0;
 110:.././simpleserial/simpleserial.c **** 	for (; i < len; i++) {
 111:.././simpleserial/simpleserial.c **** 		if (buf[i] == FRAME_BYTE) {
 112:.././simpleserial/simpleserial.c **** 			buf[last] = i - last;
 113:.././simpleserial/simpleserial.c **** 			last = i;
 114:.././simpleserial/simpleserial.c **** 		}
 115:.././simpleserial/simpleserial.c **** 	}
 116:.././simpleserial/simpleserial.c **** 	return 0x00;
 117:.././simpleserial/simpleserial.c **** }
 118:.././simpleserial/simpleserial.c **** 
 119:.././simpleserial/simpleserial.c **** uint8_t unstuff_data(uint8_t *buf, uint8_t len)
 120:.././simpleserial/simpleserial.c **** {
 121:.././simpleserial/simpleserial.c **** 	uint8_t next = buf[0];
 122:.././simpleserial/simpleserial.c **** 	buf[0] = 0x00;
 123:.././simpleserial/simpleserial.c **** 	//len -= 1;
 124:.././simpleserial/simpleserial.c **** 	uint8_t tmp = next;
 125:.././simpleserial/simpleserial.c **** 	while ((next < len) && tmp != 0) {
 126:.././simpleserial/simpleserial.c **** 		tmp = buf[next];
 127:.././simpleserial/simpleserial.c **** 		buf[next] = FRAME_BYTE;
 128:.././simpleserial/simpleserial.c **** 		next += tmp;
 129:.././simpleserial/simpleserial.c **** 	}
 130:.././simpleserial/simpleserial.c **** 	return next;
 131:.././simpleserial/simpleserial.c **** }
 132:.././simpleserial/simpleserial.c **** 
 133:.././simpleserial/simpleserial.c **** // Set up the SimpleSerial module by preparing internal commands
 134:.././simpleserial/simpleserial.c **** // This just adds the "v" command for now...
 135:.././simpleserial/simpleserial.c **** void simpleserial_init()
 136:.././simpleserial/simpleserial.c **** {
 137:.././simpleserial/simpleserial.c **** 	simpleserial_addcmd('v', 0, check_version);
 138:.././simpleserial/simpleserial.c ****     simpleserial_addcmd('w', 0, ss_get_commands);
 139:.././simpleserial/simpleserial.c **** }
 140:.././simpleserial/simpleserial.c **** 
 141:.././simpleserial/simpleserial.c **** int simpleserial_addcmd(char c, unsigned int len, uint8_t (*fp)(uint8_t, uint8_t, uint8_t, uint8_t*
 142:.././simpleserial/simpleserial.c **** {
 143:.././simpleserial/simpleserial.c **** 	if(num_commands >= MAX_SS_CMDS) {
 144:.././simpleserial/simpleserial.c **** 		putch('a');
 145:.././simpleserial/simpleserial.c **** 		return 1;
 146:.././simpleserial/simpleserial.c **** 	}
 147:.././simpleserial/simpleserial.c **** 
 148:.././simpleserial/simpleserial.c **** 	if(len >= MAX_SS_LEN) {
 149:.././simpleserial/simpleserial.c **** 		putch('b');
 150:.././simpleserial/simpleserial.c **** 		return 1;
 151:.././simpleserial/simpleserial.c **** 	}
 152:.././simpleserial/simpleserial.c **** 
 153:.././simpleserial/simpleserial.c **** 	commands[num_commands].c   = c;
 154:.././simpleserial/simpleserial.c **** 	commands[num_commands].len = len;
 155:.././simpleserial/simpleserial.c **** 	commands[num_commands].fp  = fp;
 156:.././simpleserial/simpleserial.c **** 	num_commands++;
 157:.././simpleserial/simpleserial.c **** 
 158:.././simpleserial/simpleserial.c **** 	return 0;
 159:.././simpleserial/simpleserial.c **** }
 160:.././simpleserial/simpleserial.c **** 
 161:.././simpleserial/simpleserial.c **** void simpleserial_get(void)
 162:.././simpleserial/simpleserial.c **** {
 163:.././simpleserial/simpleserial.c **** 	uint8_t data_buf[MAX_SS_LEN];
 164:.././simpleserial/simpleserial.c **** 	uint8_t err = 0;
 165:.././simpleserial/simpleserial.c **** 
 166:.././simpleserial/simpleserial.c **** 	for (int i = 0; i < 4; i++) {
 167:.././simpleserial/simpleserial.c **** 		data_buf[i] = getch(); //PTR, cmd, scmd, len
 168:.././simpleserial/simpleserial.c **** 		if (data_buf[i] == FRAME_BYTE) {
 169:.././simpleserial/simpleserial.c **** 			err = SS_ERR_FRAME_BYTE;
 170:.././simpleserial/simpleserial.c **** 			goto ERROR;
 171:.././simpleserial/simpleserial.c **** 		}
 172:.././simpleserial/simpleserial.c **** 	}
 173:.././simpleserial/simpleserial.c **** 	uint8_t next_frame = unstuff_data(data_buf, 4);
 174:.././simpleserial/simpleserial.c **** 
 175:.././simpleserial/simpleserial.c **** 	// check for valid command
 176:.././simpleserial/simpleserial.c **** 	uint8_t c = 0;
 177:.././simpleserial/simpleserial.c **** 	for(c = 0; c < num_commands; c++)
 178:.././simpleserial/simpleserial.c **** 	{
 179:.././simpleserial/simpleserial.c **** 		if(commands[c].c == data_buf[1])
 180:.././simpleserial/simpleserial.c **** 			break;
 181:.././simpleserial/simpleserial.c **** 	}
 182:.././simpleserial/simpleserial.c **** 
 183:.././simpleserial/simpleserial.c **** 	if (c == num_commands) {
 184:.././simpleserial/simpleserial.c **** 		err = SS_ERR_CMD;
 185:.././simpleserial/simpleserial.c **** 		goto ERROR;
 186:.././simpleserial/simpleserial.c **** 	}
 187:.././simpleserial/simpleserial.c **** 
 188:.././simpleserial/simpleserial.c **** 	//check that next frame not beyond end of message
 189:.././simpleserial/simpleserial.c **** 	// account for cmd, scmd, len, data, crc, end of frame
 190:.././simpleserial/simpleserial.c **** 	if ((data_buf[3] + 5) < next_frame) {
 191:.././simpleserial/simpleserial.c **** 		err = SS_ERR_LEN;
 192:.././simpleserial/simpleserial.c **** 		goto ERROR;
 193:.././simpleserial/simpleserial.c **** 	}
 194:.././simpleserial/simpleserial.c **** 
 195:.././simpleserial/simpleserial.c **** 	// read in data
 196:.././simpleserial/simpleserial.c **** 	// eq to len + crc + frame end
 197:.././simpleserial/simpleserial.c **** 	int i = 4;
 198:.././simpleserial/simpleserial.c **** 	for (; i < data_buf[3] + 5; i++) {
 199:.././simpleserial/simpleserial.c **** 		data_buf[i] = getch();
 200:.././simpleserial/simpleserial.c **** 		if (data_buf[i] == FRAME_BYTE) {
 201:.././simpleserial/simpleserial.c **** 			err = SS_ERR_FRAME_BYTE;
 202:.././simpleserial/simpleserial.c **** 			goto ERROR;
 203:.././simpleserial/simpleserial.c **** 		}
 204:.././simpleserial/simpleserial.c **** 	}
 205:.././simpleserial/simpleserial.c **** 
 206:.././simpleserial/simpleserial.c **** 	//check that final byte is the FRAME_BYTE
 207:.././simpleserial/simpleserial.c **** 	data_buf[i] = getch();
 208:.././simpleserial/simpleserial.c **** 	if (data_buf[i] != FRAME_BYTE) {
 209:.././simpleserial/simpleserial.c **** 		err = SS_ERR_LEN;
 210:.././simpleserial/simpleserial.c **** 		goto ERROR;
 211:.././simpleserial/simpleserial.c **** 	}
 212:.././simpleserial/simpleserial.c **** 
 213:.././simpleserial/simpleserial.c **** 	//fully unstuff data now
 214:.././simpleserial/simpleserial.c **** 	unstuff_data(data_buf + next_frame, i - next_frame + 1);
 215:.././simpleserial/simpleserial.c **** 
 216:.././simpleserial/simpleserial.c **** 	//calc crc excluding original frame offset and frame end and crc
 217:.././simpleserial/simpleserial.c **** 	uint8_t crc = ss_crc(data_buf+1, i-2);
 218:.././simpleserial/simpleserial.c **** 	if (crc != data_buf[i-1]) {
 219:.././simpleserial/simpleserial.c **** 		err = SS_ERR_CRC;
 220:.././simpleserial/simpleserial.c **** 		goto ERROR;
 221:.././simpleserial/simpleserial.c **** 	}
 222:.././simpleserial/simpleserial.c **** 
 223:.././simpleserial/simpleserial.c **** 	err = commands[c].fp(data_buf[1], data_buf[2], data_buf[3], data_buf+4);
 224:.././simpleserial/simpleserial.c **** 
 225:.././simpleserial/simpleserial.c **** ERROR:
 226:.././simpleserial/simpleserial.c **** 	simpleserial_put('e', 0x01, &err);
 227:.././simpleserial/simpleserial.c **** 	return;
 228:.././simpleserial/simpleserial.c **** }
 229:.././simpleserial/simpleserial.c **** 
 230:.././simpleserial/simpleserial.c **** void simpleserial_put(char c, uint8_t size, uint8_t* output)
 231:.././simpleserial/simpleserial.c **** {
 232:.././simpleserial/simpleserial.c **** 	uint8_t data_buf[MAX_SS_LEN];
 233:.././simpleserial/simpleserial.c **** 	data_buf[0] = 0x00;
 234:.././simpleserial/simpleserial.c **** 	data_buf[1] = c;
 235:.././simpleserial/simpleserial.c **** 	data_buf[2] = size;
 236:.././simpleserial/simpleserial.c **** 	int i = 0;
 237:.././simpleserial/simpleserial.c **** 	for (; i < size; i++) {
 238:.././simpleserial/simpleserial.c **** 		data_buf[i + 3] = output[i];
 239:.././simpleserial/simpleserial.c **** 	}
 240:.././simpleserial/simpleserial.c **** 	data_buf[i + 3] = ss_crc(data_buf+1, size+2);
 241:.././simpleserial/simpleserial.c **** 	data_buf[i + 4] = 0x00;
 242:.././simpleserial/simpleserial.c **** 	stuff_data(data_buf, i + 5);
 243:.././simpleserial/simpleserial.c **** 	for (int i = 0; i < size + 5; i++) {
 244:.././simpleserial/simpleserial.c **** 		putch(data_buf[i]);
 245:.././simpleserial/simpleserial.c **** 	}
 246:.././simpleserial/simpleserial.c **** }
 247:.././simpleserial/simpleserial.c **** 
 248:.././simpleserial/simpleserial.c **** 
 249:.././simpleserial/simpleserial.c **** #else
 250:.././simpleserial/simpleserial.c **** 
 251:.././simpleserial/simpleserial.c **** typedef struct ss_cmd
 252:.././simpleserial/simpleserial.c **** {
 253:.././simpleserial/simpleserial.c **** 	char c;
 254:.././simpleserial/simpleserial.c **** 	unsigned int len;
 255:.././simpleserial/simpleserial.c **** 	uint8_t (*fp)(uint8_t*, uint8_t);
 256:.././simpleserial/simpleserial.c **** 	uint8_t flags;
 257:.././simpleserial/simpleserial.c **** } ss_cmd;
 258:.././simpleserial/simpleserial.c **** static ss_cmd commands[MAX_SS_CMDS];
 259:.././simpleserial/simpleserial.c **** // Callback function for "v" command.
 260:.././simpleserial/simpleserial.c **** // This can exist in v1.0 as long as we don't actually send back an ack ("z")
 261:.././simpleserial/simpleserial.c **** uint8_t check_version(uint8_t *v, uint8_t len)
 262:.././simpleserial/simpleserial.c **** {
  28              		.loc 1 262 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
 263:.././simpleserial/simpleserial.c **** 	return SS_VER;
  33              		.loc 1 263 2 view .LVU1
 264:.././simpleserial/simpleserial.c **** }
  34              		.loc 1 264 1 is_stmt 0 view .LVU2
  35 0000 0120     		movs	r0, #1
  36              	.LVL1:
  37              		.loc 1 264 1 view .LVU3
  38              		@ sp needed
  39 0002 7047     		bx	lr
  40              		.cfi_endproc
  41              	.LFE3:
  43              		.section	.text.led_ok,"ax",%progbits
  44              		.align	1
  45              		.weak	led_ok
  46              		.syntax unified
  47              		.code	16
  48              		.thumb_func
  50              	led_ok:
  51              	.LFB13:
  52              		.cfi_startproc
  53              		.file 2 ".././hal/hal.h"
   1:.././hal/hal.h **** /*
   2:.././hal/hal.h ****     This file is part of the ChipWhisperer Example Targets
   3:.././hal/hal.h ****     Copyright (C) 2012-2015 NewAE Technology Inc.
   4:.././hal/hal.h **** 
   5:.././hal/hal.h ****     This program is free software: you can redistribute it and/or modify
   6:.././hal/hal.h ****     it under the terms of the GNU General Public License as published by
   7:.././hal/hal.h ****     the Free Software Foundation, either version 3 of the License, or
   8:.././hal/hal.h ****     (at your option) any later version.
   9:.././hal/hal.h **** 
  10:.././hal/hal.h ****     This program is distributed in the hope that it will be useful,
  11:.././hal/hal.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  12:.././hal/hal.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13:.././hal/hal.h ****     GNU General Public License for more details.
  14:.././hal/hal.h **** 
  15:.././hal/hal.h ****     You should have received a copy of the GNU General Public License
  16:.././hal/hal.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  17:.././hal/hal.h **** */
  18:.././hal/hal.h **** 
  19:.././hal/hal.h **** #ifndef HAL_H_
  20:.././hal/hal.h **** #define HAL_H_
  21:.././hal/hal.h **** 
  22:.././hal/hal.h **** #include <stdint.h>
  23:.././hal/hal.h **** 
  24:.././hal/hal.h **** void platform_init(void);
  25:.././hal/hal.h **** 
  26:.././hal/hal.h **** //PLATFORM Define Types
  27:.././hal/hal.h **** #define CW301_AVR      1
  28:.././hal/hal.h **** #define CW301_XMEGA    2
  29:.././hal/hal.h **** #define CW303          3
  30:.././hal/hal.h **** #define CW304          4
  31:.././hal/hal.h **** #define CW308_MEGARF   8
  32:.././hal/hal.h **** #define CW308_PIC24FJ  10
  33:.././hal/hal.h **** #define CW308_SAM4L    11
  34:.././hal/hal.h **** #define CW308_SI4010   12
  35:.././hal/hal.h **** #define CW308_MPC5748G 13
  36:.././hal/hal.h **** #define CW308_STM32F0  14
  37:.././hal/hal.h **** #define CW308_STM32F1  15
  38:.././hal/hal.h **** #define CW308_STM32F2  16
  39:.././hal/hal.h **** #define CW308_STM32F3  17
  40:.././hal/hal.h **** #define CW308_STM32F4  18
  41:.././hal/hal.h **** #define CW308_CC2538   19
  42:.././hal/hal.h **** #define CW308_K24F     20
  43:.././hal/hal.h **** #define CW308_NRF52840 21
  44:.././hal/hal.h **** #define CW308_AURIX    22
  45:.././hal/hal.h **** #define CW308_SAML11   23
  46:.././hal/hal.h **** #define CW308_EFM32TG11B 24
  47:.././hal/hal.h **** #define CW308_K82F     25
  48:.././hal/hal.h **** #define CW308_LPC55S6X 26
  49:.././hal/hal.h **** #define CW308_PSOC62   27
  50:.././hal/hal.h **** #define CW308_IMXRT1062 28
  51:.././hal/hal.h **** #define CW308_FE310    29
  52:.././hal/hal.h **** #define CW308_EFR32MG21A  30
  53:.././hal/hal.h **** #define CW308_EFM32GG11  31
  54:.././hal/hal.h **** #define CW308_STM32L5  32
  55:.././hal/hal.h **** #define CW308_STM32L4  33
  56:.././hal/hal.h **** #define CW308_RX65N  34
  57:.././hal/hal.h **** #define CW308_MPC5676R 35
  58:.././hal/hal.h **** #define CW308_NEORV32  36
  59:.././hal/hal.h **** #define CW305_IBEX  37
  60:.././hal/hal.h **** 
  61:.././hal/hal.h **** //HAL_TYPE Define Types
  62:.././hal/hal.h **** #define HAL_avr      1
  63:.././hal/hal.h **** #define HAL_xmega    2
  64:.././hal/hal.h **** #define HAL_pic24f   3
  65:.././hal/hal.h **** #define HAL_sam4l    4
  66:.././hal/hal.h **** #define HAL_stm32f0  5
  67:.././hal/hal.h **** #define HAL_stm32f1  6
  68:.././hal/hal.h **** #define HAL_stm32f2  7
  69:.././hal/hal.h **** #define HAL_stm32f3  8
  70:.././hal/hal.h **** #define HAL_stm32f4  9
  71:.././hal/hal.h **** #define HAL_cc2538   10
  72:.././hal/hal.h **** #define HAL_k24f     11
  73:.././hal/hal.h **** #define HAL_nrf52840 12
  74:.././hal/hal.h **** #define HAL_stm32f0_nano 13
  75:.././hal/hal.h **** #define HAL_aurix    14
  76:.././hal/hal.h **** #define HAL_saml11   15
  77:.././hal/hal.h **** #define HAL_efm32tg11b 16
  78:.././hal/hal.h **** #define HAL_k82f     17
  79:.././hal/hal.h **** #define HAL_lpc55s6x 18
  80:.././hal/hal.h **** #define HAL_psoc62   19
  81:.././hal/hal.h **** #define HAL_imxrt1062 20
  82:.././hal/hal.h **** #define HAL_fe310    21
  83:.././hal/hal.h **** #define HAL_efr32mg21a 22
  84:.././hal/hal.h **** #define HAL_efm32gg11 23
  85:.././hal/hal.h **** #define HAL_stm32l5 24
  86:.././hal/hal.h **** #define HAL_stm32l4 25
  87:.././hal/hal.h **** #define HAL_rx65n 26
  88:.././hal/hal.h **** #define HAL_mpc5676r 27
  89:.././hal/hal.h **** #define HAL_neorv32  28
  90:.././hal/hal.h **** #define HAL_sam4s  29
  91:.././hal/hal.h **** #define HAL_ibex  30
  92:.././hal/hal.h **** 
  93:.././hal/hal.h **** #if HAL_TYPE == HAL_avr
  94:.././hal/hal.h ****     #include <avr/io.h>
  95:.././hal/hal.h ****     #include <util/delay.h>
  96:.././hal/hal.h ****     #include "avr/avr_hal.h"
  97:.././hal/hal.h **** #elif HAL_TYPE == HAL_xmega
  98:.././hal/hal.h ****     #include <avr/io.h>
  99:.././hal/hal.h ****     #include <util/delay.h>
 100:.././hal/hal.h ****     #include "xmega/xmega_hal.h"
 101:.././hal/hal.h ****     #include "xmega/avr_compiler.h"
 102:.././hal/hal.h **** #elif HAL_TYPE == HAL_pic24f
 103:.././hal/hal.h ****     #include <xc.h>
 104:.././hal/hal.h ****     #include "pic24f/pic24f_hal.h"
 105:.././hal/hal.h ****     #include "pic24f/uart.h"
 106:.././hal/hal.h **** #elif HAL_TYPE == HAL_sam4l
 107:.././hal/hal.h ****     #include "sam4l/sam4l_hal.h"
 108:.././hal/hal.h **** #elif HAL_TYPE == HAL_stm32f0
 109:.././hal/hal.h **** 	#include "stm32f0/stm32f0_hal.h"
 110:.././hal/hal.h **** #elif HAL_TYPE == HAL_stm32f1
 111:.././hal/hal.h **** 	#include "stm32f1/stm32f1_hal.h"
 112:.././hal/hal.h **** #elif HAL_TYPE == HAL_stm32f2
 113:.././hal/hal.h **** 	#include "stm32f2/stm32f2_hal.h"
 114:.././hal/hal.h **** #elif HAL_TYPE == HAL_stm32f3
 115:.././hal/hal.h **** 	#include "stm32f3/stm32f3_hal.h"
 116:.././hal/hal.h **** 	#ifdef SECCAN
 117:.././hal/hal.h **** 		#include "stm32f3/stm32f3_hal_seccan.h"
 118:.././hal/hal.h **** 	#endif
 119:.././hal/hal.h **** #elif HAL_TYPE == HAL_stm32f4
 120:.././hal/hal.h **** 	#include "stm32f4/stm32f4_hal.h"
 121:.././hal/hal.h **** #elif HAL_TYPE == HAL_cc2538
 122:.././hal/hal.h **** 	#include "cc2538/cc2538_hal.h"
 123:.././hal/hal.h **** #elif HAL_TYPE == HAL_k24f
 124:.././hal/hal.h ****     #include "k24f/k24f_hal.h"
 125:.././hal/hal.h **** #elif HAL_TYPE == HAL_k82f
 126:.././hal/hal.h **** #include "k82f/k82f_hal.h"
 127:.././hal/hal.h **** #elif HAL_TYPE == HAL_nrf52840
 128:.././hal/hal.h ****     #include "nrf52840/nrf52840_hal.h"   
 129:.././hal/hal.h **** #elif HAL_TYPE == HAL_stm32f0_nano
 130:.././hal/hal.h ****     #include "stm32f0/stm32f0_hal.h" 
 131:.././hal/hal.h ****     void led_error(unsigned int status);
 132:.././hal/hal.h ****     void led_ok(unsigned int status);
 133:.././hal/hal.h **** #elif HAL_TYPE == HAL_aurix
 134:.././hal/hal.h ****     #include "aurix/aurix_hal.h"
 135:.././hal/hal.h **** #elif HAL_TYPE == HAL_saml11
 136:.././hal/hal.h ****      #include "saml11/saml11_hal.h"
 137:.././hal/hal.h **** #elif HAL_TYPE == HAL_efm32tg11b
 138:.././hal/hal.h ****      #include "efm32tg11b/efm32tg11b_hal.h"
 139:.././hal/hal.h **** #elif HAL_TYPE == HAL_lpc55s6x
 140:.././hal/hal.h ****      #include "lpc55s6x/lpc55s6x_hal.h"
 141:.././hal/hal.h **** #elif HAL_TYPE == HAL_psoc62
 142:.././hal/hal.h ****     #include "psoc62/psoc62_hal.h"
 143:.././hal/hal.h **** #elif HAL_TYPE == HAL_imxrt1062
 144:.././hal/hal.h ****     #include "imxrt1062/imxrt1062_hal.h"
 145:.././hal/hal.h **** #elif HAL_TYPE == HAL_fe310
 146:.././hal/hal.h ****     #include "fe310/fe310_hal.h"
 147:.././hal/hal.h **** #elif HAL_TYPE == HAL_efr32mg21a
 148:.././hal/hal.h ****     #include "efr32mg21a/efr32mg21a_hal.h"
 149:.././hal/hal.h **** #elif HAL_TYPE == HAL_efm32gg11
 150:.././hal/hal.h ****     #include "efm32gg11/efm32gg11_hal.h"
 151:.././hal/hal.h **** #elif HAL_TYPE == HAL_stm32l5
 152:.././hal/hal.h ****     #include "stm32l5/stm32l5_hal.h"
 153:.././hal/hal.h **** #elif HAL_TYPE == HAL_stm32l4
 154:.././hal/hal.h ****     #include "stm32l4/stm32l4_hal.h"
 155:.././hal/hal.h **** #elif HAL_TYPE == HAL_rx65n
 156:.././hal/hal.h ****     #include "rx65n/rx65n_hal.h"
 157:.././hal/hal.h **** #elif HAL_TYPE == HAL_mpc5676r
 158:.././hal/hal.h ****     #include "mpc5676r/MPC5676R_hal.h"
 159:.././hal/hal.h **** #elif HAL_TYPE == HAL_neorv32
 160:.././hal/hal.h ****     #include "neorv32/neorv32_hal.h"
 161:.././hal/hal.h **** #elif HAL_TYPE == HAL_sam4s
 162:.././hal/hal.h ****     #include "sam4s/sam4s_hal.h"
 163:.././hal/hal.h **** #elif HAL_TYPE == HAL_ibex
 164:.././hal/hal.h ****     #include "ibex/ibex_hal.h"
 165:.././hal/hal.h **** #else
 166:.././hal/hal.h ****     #error "Unsupported HAL Type"
 167:.././hal/hal.h **** #endif
 168:.././hal/hal.h **** 
 169:.././hal/hal.h **** #if PLATFORM == CW308_MEGARF
 170:.././hal/hal.h ****     #undef trigger_setup
 171:.././hal/hal.h ****     #undef trigger_high
 172:.././hal/hal.h ****     #undef trigger_low
 173:.././hal/hal.h ****     #define trigger_setup() DDRD |= 0x02
 174:.././hal/hal.h ****     #define trigger_high()  PORTD |= 0x02
 175:.././hal/hal.h ****     #define trigger_low()   PORTD &= ~(0x02)
 176:.././hal/hal.h ****     
 177:.././hal/hal.h ****     #define HW_AES128_Init();      AES_CTRL = 0x00;
 178:.././hal/hal.h **** 
 179:.././hal/hal.h ****     #define HW_AES128_LoadKey(key);  for (uint8_t i = 0; i < 16; i++){ \
 180:.././hal/hal.h ****                                      AES_KEY = *(key+i); \
 181:.././hal/hal.h ****                                   }
 182:.././hal/hal.h **** 
 183:.././hal/hal.h ****     #define HW_AES128_Enc(pt);  for (uint8_t i = 0; i < 16; i++){ \
 184:.././hal/hal.h ****                                     AES_STATE = *(pt+i); \
 185:.././hal/hal.h ****                                 } \
 186:.././hal/hal.h ****                                   \
 187:.././hal/hal.h ****                                 AES_CTRL |= 1<<AES_REQUEST; \
 188:.././hal/hal.h ****                                   \
 189:.././hal/hal.h ****                                 /*Wait for done  */ \
 190:.././hal/hal.h ****                                 while ((AES_STATUS & (1<<AES_DONE)) == 0){ \
 191:.././hal/hal.h ****                                     ; \
 192:.././hal/hal.h ****                                 } \
 193:.././hal/hal.h ****                                   \
 194:.././hal/hal.h ****                                 for (uint8_t i = 0; i < 16; i++){ \
 195:.././hal/hal.h ****                                     *(pt+i) = AES_STATE; \
 196:.././hal/hal.h ****                                 }
 197:.././hal/hal.h ****     
 198:.././hal/hal.h **** #endif
 199:.././hal/hal.h **** 
 200:.././hal/hal.h **** __attribute__((weak)) void led_ok(unsigned int status)
  54              		.loc 2 200 28 is_stmt 1 view -0
  55              		@ args = 0, pretend = 0, frame = 0
  56              		@ frame_needed = 0, uses_anonymous_args = 0
  57              		@ link register save eliminated.
  58              		@ sp needed
  59 0000 7047     		bx	lr
  60              		.cfi_endproc
  61              	.LFE13:
  63              		.section	.text.led_error,"ax",%progbits
  64              		.align	1
  65              		.weak	led_error
  66              		.syntax unified
  67              		.code	16
  68              		.thumb_func
  70              	led_error:
  71              	.LVL2:
  72              	.LFB1:
 201:.././hal/hal.h **** {
 202:.././hal/hal.h **** }
 203:.././hal/hal.h **** 
 204:.././hal/hal.h **** __attribute__((weak)) void led_error(unsigned int status)
 205:.././hal/hal.h **** {
  73              		.loc 2 205 1 view -0
  74              		.cfi_startproc
  75              		@ args = 0, pretend = 0, frame = 0
  76              		@ frame_needed = 0, uses_anonymous_args = 0
  77              		@ link register save eliminated.
 206:.././hal/hal.h **** }
  78              		.loc 2 206 1 view .LVU6
  79              		@ sp needed
  80 0000 7047     		bx	lr
  81              		.cfi_endproc
  82              	.LFE1:
  84              		.section	.text.ss_crc,"ax",%progbits
  85              		.align	1
  86              		.global	ss_crc
  87              		.syntax unified
  88              		.code	16
  89              		.thumb_func
  91              	ss_crc:
  92              	.LVL3:
  93              	.LFB2:
  21:.././simpleserial/simpleserial.c **** 	unsigned int k = 0;
  94              		.loc 1 21 1 view -0
  95              		.cfi_startproc
  96              		@ args = 0, pretend = 0, frame = 0
  97              		@ frame_needed = 0, uses_anonymous_args = 0
  22:.././simpleserial/simpleserial.c **** 	uint8_t crc = 0x00;
  98              		.loc 1 22 2 view .LVU8
  23:.././simpleserial/simpleserial.c **** 	while (len--) {
  99              		.loc 1 23 2 view .LVU9
  24:.././simpleserial/simpleserial.c **** 		crc ^= *buf++;
 100              		.loc 1 24 2 view .LVU10
 101 0000 0300     		movs	r3, r0
  21:.././simpleserial/simpleserial.c **** 	unsigned int k = 0;
 102              		.loc 1 21 1 is_stmt 0 view .LVU11
 103 0002 70B5     		push	{r4, r5, r6, lr}
 104              	.LCFI0:
 105              		.cfi_def_cfa_offset 16
 106              		.cfi_offset 4, -16
 107              		.cfi_offset 5, -12
 108              		.cfi_offset 6, -8
 109              		.cfi_offset 14, -4
 110 0004 4118     		adds	r1, r0, r1
 111              	.LVL4:
  27:.././simpleserial/simpleserial.c **** 		}
 112              		.loc 1 27 34 view .LVU12
 113 0006 4D25     		movs	r5, #77
  23:.././simpleserial/simpleserial.c **** 	while (len--) {
 114              		.loc 1 23 10 view .LVU13
 115 0008 0020     		movs	r0, #0
 116              	.LVL5:
 117              	.L5:
  24:.././simpleserial/simpleserial.c **** 		crc ^= *buf++;
 118              		.loc 1 24 9 is_stmt 1 view .LVU14
  24:.././simpleserial/simpleserial.c **** 		crc ^= *buf++;
 119              		.loc 1 24 9 is_stmt 0 view .LVU15
 120 000a 8B42     		cmp	r3, r1
 121 000c 00D1     		bne	.L9
  30:.././simpleserial/simpleserial.c **** 
 122              		.loc 1 30 2 is_stmt 1 view .LVU16
  32:.././simpleserial/simpleserial.c **** 
 123              		.loc 1 32 1 is_stmt 0 view .LVU17
 124              		@ sp needed
 125 000e 70BD     		pop	{r4, r5, r6, pc}
 126              	.L9:
  25:.././simpleserial/simpleserial.c **** 		for (k = 0; k < 8; k++) {
 127              		.loc 1 25 3 is_stmt 1 view .LVU18
 128              	.LVL6:
  25:.././simpleserial/simpleserial.c **** 		for (k = 0; k < 8; k++) {
 129              		.loc 1 25 7 is_stmt 0 view .LVU19
 130 0010 0824     		movs	r4, #8
 131 0012 1A78     		ldrb	r2, [r3]
 132 0014 5040     		eors	r0, r2
 133              	.LVL7:
  26:.././simpleserial/simpleserial.c **** 			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 134              		.loc 1 26 3 is_stmt 1 view .LVU20
  26:.././simpleserial/simpleserial.c **** 			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 135              		.loc 1 26 17 view .LVU21
 136              	.L8:
  27:.././simpleserial/simpleserial.c **** 		}
 137              		.loc 1 27 4 view .LVU22
  27:.././simpleserial/simpleserial.c **** 		}
 138              		.loc 1 27 8 is_stmt 0 view .LVU23
 139 0016 46B2     		sxtb	r6, r0
 140 0018 4200     		lsls	r2, r0, #1
 141 001a D0B2     		uxtb	r0, r2
 142              	.LVL8:
  27:.././simpleserial/simpleserial.c **** 		}
 143              		.loc 1 27 8 view .LVU24
 144 001c 002E     		cmp	r6, #0
 145 001e 01DA     		bge	.L7
  27:.././simpleserial/simpleserial.c **** 		}
 146              		.loc 1 27 34 discriminator 1 view .LVU25
 147 0020 6A40     		eors	r2, r5
  27:.././simpleserial/simpleserial.c **** 		}
 148              		.loc 1 27 8 discriminator 1 view .LVU26
 149 0022 D0B2     		uxtb	r0, r2
 150              	.L7:
 151              	.LVL9:
  26:.././simpleserial/simpleserial.c **** 			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 152              		.loc 1 26 23 is_stmt 1 discriminator 4 view .LVU27
  26:.././simpleserial/simpleserial.c **** 			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 153              		.loc 1 26 17 discriminator 4 view .LVU28
 154 0024 013C     		subs	r4, r4, #1
 155              	.LVL10:
  26:.././simpleserial/simpleserial.c **** 			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 156              		.loc 1 26 17 is_stmt 0 discriminator 4 view .LVU29
 157 0026 002C     		cmp	r4, #0
 158 0028 F5D1     		bne	.L8
 159 002a 0133     		adds	r3, r3, #1
 160              	.LVL11:
  26:.././simpleserial/simpleserial.c **** 			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 161              		.loc 1 26 17 discriminator 4 view .LVU30
 162 002c EDE7     		b	.L5
 163              		.cfi_endproc
 164              	.LFE2:
 166              		.section	.text.hex_decode,"ax",%progbits
 167              		.align	1
 168              		.global	hex_decode
 169              		.syntax unified
 170              		.code	16
 171              		.thumb_func
 173              	hex_decode:
 174              	.LVL12:
 175              	.LFB6:
 265:.././simpleserial/simpleserial.c **** 
 266:.././simpleserial/simpleserial.c **** uint8_t ss_num_commands(uint8_t *x, uint8_t len)
 267:.././simpleserial/simpleserial.c **** {
 268:.././simpleserial/simpleserial.c ****     uint8_t ncmds = num_commands & 0xFF;
 269:.././simpleserial/simpleserial.c ****     simpleserial_put('r', 0x01, &ncmds);
 270:.././simpleserial/simpleserial.c ****     return 0x00;
 271:.././simpleserial/simpleserial.c **** }
 272:.././simpleserial/simpleserial.c **** 
 273:.././simpleserial/simpleserial.c **** typedef struct ss_cmd_repr {
 274:.././simpleserial/simpleserial.c ****     uint8_t c;
 275:.././simpleserial/simpleserial.c ****     uint8_t len;
 276:.././simpleserial/simpleserial.c ****     uint8_t flags;
 277:.././simpleserial/simpleserial.c **** } ss_cmd_repr;
 278:.././simpleserial/simpleserial.c **** 
 279:.././simpleserial/simpleserial.c **** uint8_t ss_get_commands(uint8_t *x, uint8_t len)
 280:.././simpleserial/simpleserial.c **** {
 281:.././simpleserial/simpleserial.c ****     ss_cmd_repr repr_cmd_buf[MAX_SS_CMDS];
 282:.././simpleserial/simpleserial.c ****     for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 283:.././simpleserial/simpleserial.c ****         repr_cmd_buf[i].c = commands[i].c;
 284:.././simpleserial/simpleserial.c ****         repr_cmd_buf[i].len = commands[i].len;
 285:.././simpleserial/simpleserial.c ****         repr_cmd_buf[i].flags = commands[i].flags;
 286:.././simpleserial/simpleserial.c ****     }
 287:.././simpleserial/simpleserial.c **** 
 288:.././simpleserial/simpleserial.c ****     simpleserial_put('r', num_commands * 0x03, (void *) repr_cmd_buf);
 289:.././simpleserial/simpleserial.c ****     return 0x00;
 290:.././simpleserial/simpleserial.c **** }
 291:.././simpleserial/simpleserial.c **** 
 292:.././simpleserial/simpleserial.c **** static char hex_lookup[16] =
 293:.././simpleserial/simpleserial.c **** {
 294:.././simpleserial/simpleserial.c **** 	'0', '1', '2', '3', '4', '5', '6', '7',
 295:.././simpleserial/simpleserial.c **** 	'8', '9', 'A', 'B', 'C', 'D', 'E', 'F'
 296:.././simpleserial/simpleserial.c **** };
 297:.././simpleserial/simpleserial.c **** 
 298:.././simpleserial/simpleserial.c **** int hex_decode(int len, char* ascii_buf, uint8_t* data_buf)
 299:.././simpleserial/simpleserial.c **** {
 176              		.loc 1 299 1 is_stmt 1 view -0
 177              		.cfi_startproc
 178              		@ args = 0, pretend = 0, frame = 0
 179              		@ frame_needed = 0, uses_anonymous_args = 0
 300:.././simpleserial/simpleserial.c **** 	for(int i = 0; i < len; i++)
 180              		.loc 1 300 2 view .LVU32
 181              	.LBB2:
 182              		.loc 1 300 6 view .LVU33
 183              		.loc 1 300 6 is_stmt 0 view .LVU34
 184              	.LBE2:
 299:.././simpleserial/simpleserial.c **** 	for(int i = 0; i < len; i++)
 185              		.loc 1 299 1 view .LVU35
 186 0000 70B5     		push	{r4, r5, r6, lr}
 187              	.LCFI1:
 188              		.cfi_def_cfa_offset 16
 189              		.cfi_offset 4, -16
 190              		.cfi_offset 5, -12
 191              		.cfi_offset 6, -8
 192              		.cfi_offset 14, -4
 193              	.LBB6:
 194              		.loc 1 300 2 view .LVU36
 195 0002 1400     		movs	r4, r2
 196              	.LVL13:
 197              	.L12:
 198              		.loc 1 300 19 is_stmt 1 discriminator 1 view .LVU37
 199 0004 A31A     		subs	r3, r4, r2
 200 0006 9842     		cmp	r0, r3
 201 0008 01DC     		bgt	.L22
 202              	.LBE6:
 301:.././simpleserial/simpleserial.c **** 	{
 302:.././simpleserial/simpleserial.c **** 		char n_hi = ascii_buf[2*i];
 303:.././simpleserial/simpleserial.c **** 		char n_lo = ascii_buf[2*i+1];
 304:.././simpleserial/simpleserial.c **** 
 305:.././simpleserial/simpleserial.c **** 		if(n_lo >= '0' && n_lo <= '9')
 306:.././simpleserial/simpleserial.c **** 			data_buf[i] = n_lo - '0';
 307:.././simpleserial/simpleserial.c **** 		else if(n_lo >= 'A' && n_lo <= 'F')
 308:.././simpleserial/simpleserial.c **** 			data_buf[i] = n_lo - 'A' + 10;
 309:.././simpleserial/simpleserial.c **** 		else if(n_lo >= 'a' && n_lo <= 'f')
 310:.././simpleserial/simpleserial.c **** 			data_buf[i] = n_lo - 'a' + 10;
 311:.././simpleserial/simpleserial.c **** 		else
 312:.././simpleserial/simpleserial.c **** 			return 1;
 313:.././simpleserial/simpleserial.c **** 
 314:.././simpleserial/simpleserial.c **** 		if(n_hi >= '0' && n_hi <= '9')
 315:.././simpleserial/simpleserial.c **** 			data_buf[i] |= (n_hi - '0') << 4;
 316:.././simpleserial/simpleserial.c **** 		else if(n_hi >= 'A' && n_hi <= 'F')
 317:.././simpleserial/simpleserial.c **** 			data_buf[i] |= (n_hi - 'A' + 10) << 4;
 318:.././simpleserial/simpleserial.c **** 		else if(n_hi >= 'a' && n_hi <= 'f')
 319:.././simpleserial/simpleserial.c **** 			data_buf[i] |= (n_hi - 'a' + 10) << 4;
 320:.././simpleserial/simpleserial.c **** 		else
 321:.././simpleserial/simpleserial.c **** 			return 1;
 322:.././simpleserial/simpleserial.c **** 	}
 323:.././simpleserial/simpleserial.c **** 
 324:.././simpleserial/simpleserial.c **** 	return 0;
 203              		.loc 1 324 9 is_stmt 0 view .LVU38
 204 000a 0020     		movs	r0, #0
 205              	.LVL14:
 206              		.loc 1 324 9 view .LVU39
 207 000c 1FE0     		b	.L11
 208              	.LVL15:
 209              	.L22:
 210              	.LBB7:
 211              	.LBB3:
 302:.././simpleserial/simpleserial.c **** 		char n_lo = ascii_buf[2*i+1];
 212              		.loc 1 302 3 is_stmt 1 view .LVU40
 303:.././simpleserial/simpleserial.c **** 
 213              		.loc 1 303 8 is_stmt 0 view .LVU41
 214 000e 4D78     		ldrb	r5, [r1, #1]
 302:.././simpleserial/simpleserial.c **** 		char n_lo = ascii_buf[2*i+1];
 215              		.loc 1 302 8 view .LVU42
 216 0010 0B78     		ldrb	r3, [r1]
 217              	.LVL16:
 303:.././simpleserial/simpleserial.c **** 
 218              		.loc 1 303 3 is_stmt 1 view .LVU43
 305:.././simpleserial/simpleserial.c **** 			data_buf[i] = n_lo - '0';
 219              		.loc 1 305 3 view .LVU44
 305:.././simpleserial/simpleserial.c **** 			data_buf[i] = n_lo - '0';
 220              		.loc 1 305 18 is_stmt 0 view .LVU45
 221 0012 2E00     		movs	r6, r5
 222 0014 303E     		subs	r6, r6, #48
 223 0016 F6B2     		uxtb	r6, r6
 305:.././simpleserial/simpleserial.c **** 			data_buf[i] = n_lo - '0';
 224              		.loc 1 305 5 view .LVU46
 225 0018 092E     		cmp	r6, #9
 226 001a 0CD8     		bhi	.L13
 306:.././simpleserial/simpleserial.c **** 		else if(n_lo >= 'A' && n_lo <= 'F')
 227              		.loc 1 306 4 is_stmt 1 view .LVU47
 306:.././simpleserial/simpleserial.c **** 		else if(n_lo >= 'A' && n_lo <= 'F')
 228              		.loc 1 306 16 is_stmt 0 view .LVU48
 229 001c 2670     		strb	r6, [r4]
 230              	.LVL17:
 231              	.L14:
 314:.././simpleserial/simpleserial.c **** 			data_buf[i] |= (n_hi - '0') << 4;
 232              		.loc 1 314 3 is_stmt 1 view .LVU49
 314:.././simpleserial/simpleserial.c **** 			data_buf[i] |= (n_hi - '0') << 4;
 233              		.loc 1 314 18 is_stmt 0 view .LVU50
 234 001e 1D00     		movs	r5, r3
 235 0020 303D     		subs	r5, r5, #48
 314:.././simpleserial/simpleserial.c **** 			data_buf[i] |= (n_hi - '0') << 4;
 236              		.loc 1 314 5 view .LVU51
 237 0022 EEB2     		uxtb	r6, r5
 238 0024 092E     		cmp	r6, #9
 239 0026 15D8     		bhi	.L18
 315:.././simpleserial/simpleserial.c **** 		else if(n_hi >= 'A' && n_hi <= 'F')
 240              		.loc 1 315 4 is_stmt 1 view .LVU52
 315:.././simpleserial/simpleserial.c **** 		else if(n_hi >= 'A' && n_hi <= 'F')
 241              		.loc 1 315 16 is_stmt 0 view .LVU53
 242 0028 2378     		ldrb	r3, [r4]
 243              	.LVL18:
 315:.././simpleserial/simpleserial.c **** 		else if(n_hi >= 'A' && n_hi <= 'F')
 244              		.loc 1 315 32 view .LVU54
 245 002a 2D01     		lsls	r5, r5, #4
 246              	.LVL19:
 315:.././simpleserial/simpleserial.c **** 		else if(n_hi >= 'A' && n_hi <= 'F')
 247              		.loc 1 315 16 view .LVU55
 248 002c 1D43     		orrs	r5, r3
 249 002e 2570     		strb	r5, [r4]
 250              	.L19:
 315:.././simpleserial/simpleserial.c **** 		else if(n_hi >= 'A' && n_hi <= 'F')
 251              		.loc 1 315 16 view .LVU56
 252              	.LBE3:
 300:.././simpleserial/simpleserial.c **** 	{
 253              		.loc 1 300 27 is_stmt 1 discriminator 2 view .LVU57
 254              	.LVL20:
 300:.././simpleserial/simpleserial.c **** 	{
 255              		.loc 1 300 27 is_stmt 0 discriminator 2 view .LVU58
 256 0030 0134     		adds	r4, r4, #1
 257              	.LVL21:
 300:.././simpleserial/simpleserial.c **** 	{
 258              		.loc 1 300 27 discriminator 2 view .LVU59
 259 0032 0231     		adds	r1, r1, #2
 260 0034 E6E7     		b	.L12
 261              	.LVL22:
 262              	.L13:
 263              	.LBB4:
 307:.././simpleserial/simpleserial.c **** 			data_buf[i] = n_lo - 'A' + 10;
 264              		.loc 1 307 8 is_stmt 1 view .LVU60
 307:.././simpleserial/simpleserial.c **** 			data_buf[i] = n_lo - 'A' + 10;
 265              		.loc 1 307 10 is_stmt 0 view .LVU61
 266 0036 2E00     		movs	r6, r5
 267 0038 413E     		subs	r6, r6, #65
 268 003a 052E     		cmp	r6, #5
 269 003c 02D8     		bhi	.L15
 308:.././simpleserial/simpleserial.c **** 		else if(n_lo >= 'a' && n_lo <= 'f')
 270              		.loc 1 308 4 is_stmt 1 view .LVU62
 308:.././simpleserial/simpleserial.c **** 		else if(n_lo >= 'a' && n_lo <= 'f')
 271              		.loc 1 308 29 is_stmt 0 view .LVU63
 272 003e 373D     		subs	r5, r5, #55
 273              	.LVL23:
 274              	.L23:
 310:.././simpleserial/simpleserial.c **** 		else
 275              		.loc 1 310 16 view .LVU64
 276 0040 2570     		strb	r5, [r4]
 277              	.LVL24:
 310:.././simpleserial/simpleserial.c **** 		else
 278              		.loc 1 310 16 view .LVU65
 279 0042 ECE7     		b	.L14
 280              	.LVL25:
 281              	.L15:
 309:.././simpleserial/simpleserial.c **** 			data_buf[i] = n_lo - 'a' + 10;
 282              		.loc 1 309 8 is_stmt 1 view .LVU66
 309:.././simpleserial/simpleserial.c **** 			data_buf[i] = n_lo - 'a' + 10;
 283              		.loc 1 309 10 is_stmt 0 view .LVU67
 284 0044 2E00     		movs	r6, r5
 285 0046 613E     		subs	r6, r6, #97
 286 0048 052E     		cmp	r6, #5
 287 004a 01D9     		bls	.L16
 288              	.LVL26:
 289              	.L21:
 312:.././simpleserial/simpleserial.c **** 
 290              		.loc 1 312 11 view .LVU68
 291 004c 0120     		movs	r0, #1
 292              	.LVL27:
 293              	.L11:
 312:.././simpleserial/simpleserial.c **** 
 294              		.loc 1 312 11 view .LVU69
 295              	.LBE4:
 296              	.LBE7:
 325:.././simpleserial/simpleserial.c **** }
 297              		.loc 1 325 1 view .LVU70
 298              		@ sp needed
 299              	.LVL28:
 300              		.loc 1 325 1 view .LVU71
 301 004e 70BD     		pop	{r4, r5, r6, pc}
 302              	.LVL29:
 303              	.L16:
 304              	.LBB8:
 305              	.LBB5:
 310:.././simpleserial/simpleserial.c **** 		else
 306              		.loc 1 310 4 is_stmt 1 view .LVU72
 310:.././simpleserial/simpleserial.c **** 		else
 307              		.loc 1 310 29 is_stmt 0 view .LVU73
 308 0050 573D     		subs	r5, r5, #87
 309              	.LVL30:
 310:.././simpleserial/simpleserial.c **** 		else
 310              		.loc 1 310 29 view .LVU74
 311 0052 F5E7     		b	.L23
 312              	.LVL31:
 313              	.L18:
 316:.././simpleserial/simpleserial.c **** 			data_buf[i] |= (n_hi - 'A' + 10) << 4;
 314              		.loc 1 316 8 is_stmt 1 view .LVU75
 316:.././simpleserial/simpleserial.c **** 			data_buf[i] |= (n_hi - 'A' + 10) << 4;
 315              		.loc 1 316 10 is_stmt 0 view .LVU76
 316 0054 1D00     		movs	r5, r3
 317 0056 413D     		subs	r5, r5, #65
 318 0058 052D     		cmp	r5, #5
 319 005a 05D8     		bhi	.L20
 317:.././simpleserial/simpleserial.c **** 		else if(n_hi >= 'a' && n_hi <= 'f')
 320              		.loc 1 317 4 is_stmt 1 view .LVU77
 317:.././simpleserial/simpleserial.c **** 		else if(n_hi >= 'a' && n_hi <= 'f')
 321              		.loc 1 317 31 is_stmt 0 view .LVU78
 322 005c 373B     		subs	r3, r3, #55
 323              	.LVL32:
 324              	.L24:
 319:.././simpleserial/simpleserial.c **** 		else
 325              		.loc 1 319 16 view .LVU79
 326 005e 2578     		ldrb	r5, [r4]
 319:.././simpleserial/simpleserial.c **** 		else
 327              		.loc 1 319 37 view .LVU80
 328 0060 1B01     		lsls	r3, r3, #4
 319:.././simpleserial/simpleserial.c **** 		else
 329              		.loc 1 319 16 view .LVU81
 330 0062 2B43     		orrs	r3, r5
 331 0064 2370     		strb	r3, [r4]
 332 0066 E3E7     		b	.L19
 333              	.LVL33:
 334              	.L20:
 318:.././simpleserial/simpleserial.c **** 			data_buf[i] |= (n_hi - 'a' + 10) << 4;
 335              		.loc 1 318 8 is_stmt 1 view .LVU82
 318:.././simpleserial/simpleserial.c **** 			data_buf[i] |= (n_hi - 'a' + 10) << 4;
 336              		.loc 1 318 10 is_stmt 0 view .LVU83
 337 0068 1D00     		movs	r5, r3
 338 006a 613D     		subs	r5, r5, #97
 339 006c 052D     		cmp	r5, #5
 340 006e EDD8     		bhi	.L21
 319:.././simpleserial/simpleserial.c **** 		else
 341              		.loc 1 319 4 is_stmt 1 view .LVU84
 319:.././simpleserial/simpleserial.c **** 		else
 342              		.loc 1 319 31 is_stmt 0 view .LVU85
 343 0070 573B     		subs	r3, r3, #87
 344              	.LVL34:
 319:.././simpleserial/simpleserial.c **** 		else
 345              		.loc 1 319 31 view .LVU86
 346 0072 F4E7     		b	.L24
 347              	.LBE5:
 348              	.LBE8:
 349              		.cfi_endproc
 350              	.LFE6:
 352              		.section	.text.simpleserial_addcmd_flags,"ax",%progbits
 353              		.align	1
 354              		.global	simpleserial_addcmd_flags
 355              		.syntax unified
 356              		.code	16
 357              		.thumb_func
 359              	simpleserial_addcmd_flags:
 360              	.LVL35:
 361              	.LFB9:
 326:.././simpleserial/simpleserial.c **** 
 327:.././simpleserial/simpleserial.c **** 
 328:.././simpleserial/simpleserial.c **** 
 329:.././simpleserial/simpleserial.c **** // Set up the SimpleSerial module by preparing internal commands
 330:.././simpleserial/simpleserial.c **** // This just adds the "v" command for now...
 331:.././simpleserial/simpleserial.c **** void simpleserial_init()
 332:.././simpleserial/simpleserial.c **** {
 333:.././simpleserial/simpleserial.c **** 	simpleserial_addcmd('v', 0, check_version);
 334:.././simpleserial/simpleserial.c ****     simpleserial_addcmd('w', 0, ss_get_commands);
 335:.././simpleserial/simpleserial.c ****     simpleserial_addcmd('y', 0, ss_num_commands);
 336:.././simpleserial/simpleserial.c **** }
 337:.././simpleserial/simpleserial.c **** 
 338:.././simpleserial/simpleserial.c **** int simpleserial_addcmd(char c, unsigned int len, uint8_t (*fp)(uint8_t*, uint8_t))
 339:.././simpleserial/simpleserial.c **** {
 340:.././simpleserial/simpleserial.c **** 	return simpleserial_addcmd_flags(c, len, fp, CMD_FLAG_NONE);
 341:.././simpleserial/simpleserial.c **** }
 342:.././simpleserial/simpleserial.c **** 
 343:.././simpleserial/simpleserial.c **** int simpleserial_addcmd_flags(char c, unsigned int len, uint8_t (*fp)(uint8_t*, uint8_t), uint8_t f
 344:.././simpleserial/simpleserial.c **** {
 362              		.loc 1 344 1 is_stmt 1 view -0
 363              		.cfi_startproc
 364              		@ args = 0, pretend = 0, frame = 0
 365              		@ frame_needed = 0, uses_anonymous_args = 0
 345:.././simpleserial/simpleserial.c **** 	if(num_commands >= MAX_SS_CMDS)
 366              		.loc 1 345 2 view .LVU88
 344:.././simpleserial/simpleserial.c **** 	if(num_commands >= MAX_SS_CMDS)
 367              		.loc 1 344 1 is_stmt 0 view .LVU89
 368 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 369              	.LCFI2:
 370              		.cfi_def_cfa_offset 20
 371              		.cfi_offset 4, -20
 372              		.cfi_offset 5, -16
 373              		.cfi_offset 6, -12
 374              		.cfi_offset 7, -8
 375              		.cfi_offset 14, -4
 376              		.loc 1 345 18 view .LVU90
 377 0002 094F     		ldr	r7, .L29
 344:.././simpleserial/simpleserial.c **** 	if(num_commands >= MAX_SS_CMDS)
 378              		.loc 1 344 1 view .LVU91
 379 0004 0600     		movs	r6, r0
 380              		.loc 1 345 18 view .LVU92
 381 0006 3D68     		ldr	r5, [r7]
 346:.././simpleserial/simpleserial.c **** 		return 1;
 382              		.loc 1 346 10 view .LVU93
 383 0008 0120     		movs	r0, #1
 384              	.LVL36:
 345:.././simpleserial/simpleserial.c **** 	if(num_commands >= MAX_SS_CMDS)
 385              		.loc 1 345 4 view .LVU94
 386 000a 0F2D     		cmp	r5, #15
 387 000c 0BDC     		bgt	.L25
 347:.././simpleserial/simpleserial.c **** 
 348:.././simpleserial/simpleserial.c **** 	if(len >= MAX_SS_LEN)
 388              		.loc 1 348 2 is_stmt 1 view .LVU95
 389              		.loc 1 348 4 is_stmt 0 view .LVU96
 390 000e FF29     		cmp	r1, #255
 391 0010 09D8     		bhi	.L25
 349:.././simpleserial/simpleserial.c **** 		return 1;
 350:.././simpleserial/simpleserial.c **** 
 351:.././simpleserial/simpleserial.c **** 	commands[num_commands].c   = c;
 392              		.loc 1 351 2 is_stmt 1 view .LVU97
 393              		.loc 1 351 29 is_stmt 0 view .LVU98
 394 0012 064C     		ldr	r4, .L29+4
 395 0014 2801     		lsls	r0, r5, #4
 396 0016 0655     		strb	r6, [r0, r4]
 352:.././simpleserial/simpleserial.c **** 	commands[num_commands].len = len;
 397              		.loc 1 352 2 is_stmt 1 view .LVU99
 398              		.loc 1 352 29 is_stmt 0 view .LVU100
 399 0018 2018     		adds	r0, r4, r0
 400 001a 4160     		str	r1, [r0, #4]
 353:.././simpleserial/simpleserial.c **** 	commands[num_commands].fp  = fp;
 401              		.loc 1 353 2 is_stmt 1 view .LVU101
 402              		.loc 1 353 29 is_stmt 0 view .LVU102
 403 001c 8260     		str	r2, [r0, #8]
 354:.././simpleserial/simpleserial.c **** 	commands[num_commands].flags = fl;
 404              		.loc 1 354 2 is_stmt 1 view .LVU103
 405              		.loc 1 354 31 is_stmt 0 view .LVU104
 406 001e 0373     		strb	r3, [r0, #12]
 355:.././simpleserial/simpleserial.c **** 	num_commands++;
 407              		.loc 1 355 2 is_stmt 1 view .LVU105
 356:.././simpleserial/simpleserial.c **** 
 357:.././simpleserial/simpleserial.c **** 	return 0;
 408              		.loc 1 357 9 is_stmt 0 view .LVU106
 409 0020 0020     		movs	r0, #0
 355:.././simpleserial/simpleserial.c **** 	num_commands++;
 410              		.loc 1 355 14 view .LVU107
 411 0022 0135     		adds	r5, r5, #1
 412 0024 3D60     		str	r5, [r7]
 413              		.loc 1 357 2 is_stmt 1 view .LVU108
 414              	.L25:
 358:.././simpleserial/simpleserial.c **** }
 415              		.loc 1 358 1 is_stmt 0 view .LVU109
 416              		@ sp needed
 417 0026 F0BD     		pop	{r4, r5, r6, r7, pc}
 418              	.L30:
 419              		.align	2
 420              	.L29:
 421 0028 00000000 		.word	.LANCHOR0
 422 002c 04000000 		.word	commands
 423              		.cfi_endproc
 424              	.LFE9:
 426              		.section	.text.simpleserial_addcmd,"ax",%progbits
 427              		.align	1
 428              		.global	simpleserial_addcmd
 429              		.syntax unified
 430              		.code	16
 431              		.thumb_func
 433              	simpleserial_addcmd:
 434              	.LVL37:
 435              	.LFB8:
 339:.././simpleserial/simpleserial.c **** 	return simpleserial_addcmd_flags(c, len, fp, CMD_FLAG_NONE);
 436              		.loc 1 339 1 is_stmt 1 view -0
 437              		.cfi_startproc
 438              		@ args = 0, pretend = 0, frame = 0
 439              		@ frame_needed = 0, uses_anonymous_args = 0
 340:.././simpleserial/simpleserial.c **** }
 440              		.loc 1 340 2 view .LVU111
 339:.././simpleserial/simpleserial.c **** 	return simpleserial_addcmd_flags(c, len, fp, CMD_FLAG_NONE);
 441              		.loc 1 339 1 is_stmt 0 view .LVU112
 442 0000 10B5     		push	{r4, lr}
 443              	.LCFI3:
 444              		.cfi_def_cfa_offset 8
 445              		.cfi_offset 4, -8
 446              		.cfi_offset 14, -4
 340:.././simpleserial/simpleserial.c **** }
 447              		.loc 1 340 9 view .LVU113
 448 0002 0023     		movs	r3, #0
 341:.././simpleserial/simpleserial.c **** 
 449              		.loc 1 341 1 view .LVU114
 450              		@ sp needed
 340:.././simpleserial/simpleserial.c **** }
 451              		.loc 1 340 9 view .LVU115
 452 0004 FFF7FEFF 		bl	simpleserial_addcmd_flags
 453              	.LVL38:
 341:.././simpleserial/simpleserial.c **** 
 454              		.loc 1 341 1 view .LVU116
 455 0008 10BD     		pop	{r4, pc}
 456              		.cfi_endproc
 457              	.LFE8:
 459              		.section	.text.simpleserial_init,"ax",%progbits
 460              		.align	1
 461              		.global	simpleserial_init
 462              		.syntax unified
 463              		.code	16
 464              		.thumb_func
 466              	simpleserial_init:
 467              	.LFB7:
 332:.././simpleserial/simpleserial.c **** 	simpleserial_addcmd('v', 0, check_version);
 468              		.loc 1 332 1 is_stmt 1 view -0
 469              		.cfi_startproc
 470              		@ args = 0, pretend = 0, frame = 0
 471              		@ frame_needed = 0, uses_anonymous_args = 0
 333:.././simpleserial/simpleserial.c ****     simpleserial_addcmd('w', 0, ss_get_commands);
 472              		.loc 1 333 2 view .LVU118
 332:.././simpleserial/simpleserial.c **** 	simpleserial_addcmd('v', 0, check_version);
 473              		.loc 1 332 1 is_stmt 0 view .LVU119
 474 0000 10B5     		push	{r4, lr}
 475              	.LCFI4:
 476              		.cfi_def_cfa_offset 8
 477              		.cfi_offset 4, -8
 478              		.cfi_offset 14, -4
 333:.././simpleserial/simpleserial.c ****     simpleserial_addcmd('w', 0, ss_get_commands);
 479              		.loc 1 333 2 view .LVU120
 480 0002 0021     		movs	r1, #0
 336:.././simpleserial/simpleserial.c **** 
 481              		.loc 1 336 1 view .LVU121
 482              		@ sp needed
 333:.././simpleserial/simpleserial.c ****     simpleserial_addcmd('w', 0, ss_get_commands);
 483              		.loc 1 333 2 view .LVU122
 484 0004 074A     		ldr	r2, .L33
 485 0006 7620     		movs	r0, #118
 486 0008 FFF7FEFF 		bl	simpleserial_addcmd
 487              	.LVL39:
 334:.././simpleserial/simpleserial.c ****     simpleserial_addcmd('y', 0, ss_num_commands);
 488              		.loc 1 334 5 is_stmt 1 view .LVU123
 489 000c 0021     		movs	r1, #0
 490 000e 064A     		ldr	r2, .L33+4
 491 0010 7720     		movs	r0, #119
 492 0012 FFF7FEFF 		bl	simpleserial_addcmd
 493              	.LVL40:
 335:.././simpleserial/simpleserial.c **** }
 494              		.loc 1 335 5 view .LVU124
 495 0016 0021     		movs	r1, #0
 496 0018 7920     		movs	r0, #121
 497 001a 044A     		ldr	r2, .L33+8
 498 001c FFF7FEFF 		bl	simpleserial_addcmd
 499              	.LVL41:
 336:.././simpleserial/simpleserial.c **** 
 500              		.loc 1 336 1 is_stmt 0 view .LVU125
 501 0020 10BD     		pop	{r4, pc}
 502              	.L34:
 503 0022 C046     		.align	2
 504              	.L33:
 505 0024 00000000 		.word	check_version
 506 0028 00000000 		.word	ss_get_commands
 507 002c 00000000 		.word	ss_num_commands
 508              		.cfi_endproc
 509              	.LFE7:
 511              		.section	.text.simpleserial_put,"ax",%progbits
 512              		.align	1
 513              		.global	simpleserial_put
 514              		.syntax unified
 515              		.code	16
 516              		.thumb_func
 518              	simpleserial_put:
 519              	.LVL42:
 520              	.LFB11:
 359:.././simpleserial/simpleserial.c **** 
 360:.././simpleserial/simpleserial.c **** void simpleserial_get(void)
 361:.././simpleserial/simpleserial.c **** {
 362:.././simpleserial/simpleserial.c **** 	char ascii_buf[2*MAX_SS_LEN];
 363:.././simpleserial/simpleserial.c **** 	uint8_t data_buf[MAX_SS_LEN];
 364:.././simpleserial/simpleserial.c **** 	char c;
 365:.././simpleserial/simpleserial.c **** 
 366:.././simpleserial/simpleserial.c **** 	// Find which command we're receiving
 367:.././simpleserial/simpleserial.c **** 	c = getch();
 368:.././simpleserial/simpleserial.c **** 
 369:.././simpleserial/simpleserial.c **** 	int cmd;
 370:.././simpleserial/simpleserial.c **** 	for(cmd = 0; cmd < num_commands; cmd++)
 371:.././simpleserial/simpleserial.c **** 	{
 372:.././simpleserial/simpleserial.c **** 		if(commands[cmd].c == c)
 373:.././simpleserial/simpleserial.c **** 			break;
 374:.././simpleserial/simpleserial.c **** 	}
 375:.././simpleserial/simpleserial.c **** 
 376:.././simpleserial/simpleserial.c **** 	// If we didn't find a match, give up right away
 377:.././simpleserial/simpleserial.c **** 	if(cmd == num_commands)
 378:.././simpleserial/simpleserial.c **** 		return;
 379:.././simpleserial/simpleserial.c **** 
 380:.././simpleserial/simpleserial.c **** 	// If flag CMD_FLAG_LEN is set, the next byte indicates the sent length
 381:.././simpleserial/simpleserial.c **** 	if ((commands[cmd].flags & CMD_FLAG_LEN) != 0)
 382:.././simpleserial/simpleserial.c **** 	{
 383:.././simpleserial/simpleserial.c **** 		uint8_t l = 0;
 384:.././simpleserial/simpleserial.c **** 		char buff[2];
 385:.././simpleserial/simpleserial.c **** 		buff[0] = getch();
 386:.././simpleserial/simpleserial.c **** 		buff[1] = getch();
 387:.././simpleserial/simpleserial.c **** 		if (hex_decode(1, buff, &l))
 388:.././simpleserial/simpleserial.c **** 			return;
 389:.././simpleserial/simpleserial.c **** 		commands[cmd].len = l;
 390:.././simpleserial/simpleserial.c **** 	}
 391:.././simpleserial/simpleserial.c **** 
 392:.././simpleserial/simpleserial.c **** 	// Receive characters until we fill the ASCII buffer
 393:.././simpleserial/simpleserial.c **** 	for(int i = 0; i < 2*commands[cmd].len; i++)
 394:.././simpleserial/simpleserial.c **** 	{
 395:.././simpleserial/simpleserial.c **** 		c = getch();
 396:.././simpleserial/simpleserial.c **** 
 397:.././simpleserial/simpleserial.c **** 		// Check for early \n
 398:.././simpleserial/simpleserial.c **** 		if(c == '\n' || c == '\r')
 399:.././simpleserial/simpleserial.c **** 			return;
 400:.././simpleserial/simpleserial.c **** 
 401:.././simpleserial/simpleserial.c **** 		ascii_buf[i] = c;
 402:.././simpleserial/simpleserial.c **** 	}
 403:.././simpleserial/simpleserial.c **** 
 404:.././simpleserial/simpleserial.c **** 	// Assert that last character is \n or \r
 405:.././simpleserial/simpleserial.c **** 	c = getch();
 406:.././simpleserial/simpleserial.c **** 	if(c != '\n' && c != '\r')
 407:.././simpleserial/simpleserial.c **** 		return;
 408:.././simpleserial/simpleserial.c **** 
 409:.././simpleserial/simpleserial.c **** 	// ASCII buffer is full: convert to bytes
 410:.././simpleserial/simpleserial.c **** 	// Check for illegal characters here
 411:.././simpleserial/simpleserial.c **** 	if(hex_decode(commands[cmd].len, ascii_buf, data_buf))
 412:.././simpleserial/simpleserial.c **** 		return;
 413:.././simpleserial/simpleserial.c **** 
 414:.././simpleserial/simpleserial.c **** 	// Callback
 415:.././simpleserial/simpleserial.c **** 	uint8_t ret[1];
 416:.././simpleserial/simpleserial.c **** 	ret[0] = commands[cmd].fp(data_buf, commands[cmd].len);
 417:.././simpleserial/simpleserial.c **** 
 418:.././simpleserial/simpleserial.c **** 	// Acknowledge (if version is 1.1)
 419:.././simpleserial/simpleserial.c **** #if SS_VER == SS_VER_1_1
 420:.././simpleserial/simpleserial.c **** 	simpleserial_put('z', 1, ret);
 421:.././simpleserial/simpleserial.c **** #endif
 422:.././simpleserial/simpleserial.c **** }
 423:.././simpleserial/simpleserial.c **** 
 424:.././simpleserial/simpleserial.c **** void simpleserial_put(char c, uint8_t size, uint8_t* output)
 425:.././simpleserial/simpleserial.c **** {
 521              		.loc 1 425 1 is_stmt 1 view -0
 522              		.cfi_startproc
 523              		@ args = 0, pretend = 0, frame = 0
 524              		@ frame_needed = 0, uses_anonymous_args = 0
 525              		.loc 1 425 1 is_stmt 0 view .LVU127
 526 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 527              	.LCFI5:
 528              		.cfi_def_cfa_offset 24
 529              		.cfi_offset 3, -24
 530              		.cfi_offset 4, -20
 531              		.cfi_offset 5, -16
 532              		.cfi_offset 6, -12
 533              		.cfi_offset 7, -8
 534              		.cfi_offset 14, -4
 535              		.loc 1 425 1 view .LVU128
 536 0002 0D00     		movs	r5, r1
 426:.././simpleserial/simpleserial.c **** 	// Write first character
 427:.././simpleserial/simpleserial.c **** 	putch(c);
 537              		.loc 1 427 2 is_stmt 1 view .LVU129
 425:.././simpleserial/simpleserial.c **** 	// Write first character
 538              		.loc 1 425 1 is_stmt 0 view .LVU130
 539 0004 1400     		movs	r4, r2
 540              	.LBB9:
 428:.././simpleserial/simpleserial.c **** 
 429:.././simpleserial/simpleserial.c **** 	// Write each byte as two nibbles
 430:.././simpleserial/simpleserial.c **** 	for(int i = 0; i < size; i++)
 431:.././simpleserial/simpleserial.c **** 	{
 432:.././simpleserial/simpleserial.c **** 		putch(hex_lookup[output[i] >> 4 ]);
 433:.././simpleserial/simpleserial.c **** 		putch(hex_lookup[output[i] & 0xF]);
 541              		.loc 1 433 30 view .LVU131
 542 0006 0F27     		movs	r7, #15
 543              	.LBE9:
 427:.././simpleserial/simpleserial.c **** 
 544              		.loc 1 427 2 view .LVU132
 545 0008 FFF7FEFF 		bl	putch
 546              	.LVL43:
 430:.././simpleserial/simpleserial.c **** 	{
 547              		.loc 1 430 2 is_stmt 1 view .LVU133
 548              	.LBB10:
 430:.././simpleserial/simpleserial.c **** 	{
 549              		.loc 1 430 6 view .LVU134
 430:.././simpleserial/simpleserial.c **** 	{
 550              		.loc 1 430 6 is_stmt 0 view .LVU135
 551 000c 6519     		adds	r5, r4, r5
 552              	.LVL44:
 553              	.L36:
 430:.././simpleserial/simpleserial.c **** 	{
 554              		.loc 1 430 19 is_stmt 1 discriminator 1 view .LVU136
 555 000e AC42     		cmp	r4, r5
 556 0010 03D1     		bne	.L37
 557              	.LBE10:
 434:.././simpleserial/simpleserial.c **** 	}
 435:.././simpleserial/simpleserial.c **** 
 436:.././simpleserial/simpleserial.c **** 	// Write trailing '\n'
 437:.././simpleserial/simpleserial.c **** 	putch('\n');
 558              		.loc 1 437 2 view .LVU137
 438:.././simpleserial/simpleserial.c **** }
 559              		.loc 1 438 1 is_stmt 0 view .LVU138
 560              		@ sp needed
 437:.././simpleserial/simpleserial.c **** }
 561              		.loc 1 437 2 view .LVU139
 562 0012 0A20     		movs	r0, #10
 563 0014 FFF7FEFF 		bl	putch
 564              	.LVL45:
 565              	.LVL46:
 566              		.loc 1 438 1 view .LVU140
 567 0018 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 568              	.LVL47:
 569              	.L37:
 570              	.LBB11:
 432:.././simpleserial/simpleserial.c **** 		putch(hex_lookup[output[i] & 0xF]);
 571              		.loc 1 432 3 is_stmt 1 discriminator 3 view .LVU141
 432:.././simpleserial/simpleserial.c **** 		putch(hex_lookup[output[i] & 0xF]);
 572              		.loc 1 432 30 is_stmt 0 discriminator 3 view .LVU142
 573 001a 2378     		ldrb	r3, [r4]
 432:.././simpleserial/simpleserial.c **** 		putch(hex_lookup[output[i] & 0xF]);
 574              		.loc 1 432 3 discriminator 3 view .LVU143
 575 001c 054E     		ldr	r6, .L38
 432:.././simpleserial/simpleserial.c **** 		putch(hex_lookup[output[i] & 0xF]);
 576              		.loc 1 432 30 discriminator 3 view .LVU144
 577 001e 1B09     		lsrs	r3, r3, #4
 432:.././simpleserial/simpleserial.c **** 		putch(hex_lookup[output[i] & 0xF]);
 578              		.loc 1 432 3 discriminator 3 view .LVU145
 579 0020 F05C     		ldrb	r0, [r6, r3]
 580 0022 FFF7FEFF 		bl	putch
 581              	.LVL48:
 433:.././simpleserial/simpleserial.c **** 	}
 582              		.loc 1 433 3 is_stmt 1 discriminator 3 view .LVU146
 433:.././simpleserial/simpleserial.c **** 	}
 583              		.loc 1 433 30 is_stmt 0 discriminator 3 view .LVU147
 584 0026 2378     		ldrb	r3, [r4]
 585 0028 0134     		adds	r4, r4, #1
 586              	.LVL49:
 433:.././simpleserial/simpleserial.c **** 	}
 587              		.loc 1 433 30 discriminator 3 view .LVU148
 588 002a 3B40     		ands	r3, r7
 433:.././simpleserial/simpleserial.c **** 	}
 589              		.loc 1 433 3 discriminator 3 view .LVU149
 590 002c F05C     		ldrb	r0, [r6, r3]
 591 002e FFF7FEFF 		bl	putch
 592              	.LVL50:
 430:.././simpleserial/simpleserial.c **** 	{
 593              		.loc 1 430 28 is_stmt 1 discriminator 3 view .LVU150
 430:.././simpleserial/simpleserial.c **** 	{
 594              		.loc 1 430 28 is_stmt 0 discriminator 3 view .LVU151
 595 0032 ECE7     		b	.L36
 596              	.L39:
 597              		.align	2
 598              	.L38:
 599 0034 00000000 		.word	.LANCHOR1
 600              	.LBE11:
 601              		.cfi_endproc
 602              	.LFE11:
 604              		.section	.text.ss_num_commands,"ax",%progbits
 605              		.align	1
 606              		.global	ss_num_commands
 607              		.syntax unified
 608              		.code	16
 609              		.thumb_func
 611              	ss_num_commands:
 612              	.LVL51:
 613              	.LFB4:
 267:.././simpleserial/simpleserial.c ****     uint8_t ncmds = num_commands & 0xFF;
 614              		.loc 1 267 1 is_stmt 1 view -0
 615              		.cfi_startproc
 616              		@ args = 0, pretend = 0, frame = 8
 617              		@ frame_needed = 0, uses_anonymous_args = 0
 268:.././simpleserial/simpleserial.c ****     simpleserial_put('r', 0x01, &ncmds);
 618              		.loc 1 268 5 view .LVU153
 267:.././simpleserial/simpleserial.c ****     uint8_t ncmds = num_commands & 0xFF;
 619              		.loc 1 267 1 is_stmt 0 view .LVU154
 620 0000 07B5     		push	{r0, r1, r2, lr}
 621              	.LCFI6:
 622              		.cfi_def_cfa_offset 16
 623              		.cfi_offset 0, -16
 624              		.cfi_offset 1, -12
 625              		.cfi_offset 2, -8
 626              		.cfi_offset 14, -4
 268:.././simpleserial/simpleserial.c ****     simpleserial_put('r', 0x01, &ncmds);
 627              		.loc 1 268 13 view .LVU155
 628 0002 6B46     		mov	r3, sp
 271:.././simpleserial/simpleserial.c **** 
 629              		.loc 1 271 1 view .LVU156
 630              		@ sp needed
 268:.././simpleserial/simpleserial.c ****     simpleserial_put('r', 0x01, &ncmds);
 631              		.loc 1 268 13 view .LVU157
 632 0004 DA1D     		adds	r2, r3, #7
 633 0006 044B     		ldr	r3, .L41
 269:.././simpleserial/simpleserial.c ****     return 0x00;
 634              		.loc 1 269 5 view .LVU158
 635 0008 7220     		movs	r0, #114
 636              	.LVL52:
 268:.././simpleserial/simpleserial.c ****     simpleserial_put('r', 0x01, &ncmds);
 637              		.loc 1 268 13 view .LVU159
 638 000a 1B68     		ldr	r3, [r3]
 269:.././simpleserial/simpleserial.c ****     return 0x00;
 639              		.loc 1 269 5 view .LVU160
 640 000c 0121     		movs	r1, #1
 641              	.LVL53:
 268:.././simpleserial/simpleserial.c ****     simpleserial_put('r', 0x01, &ncmds);
 642              		.loc 1 268 13 view .LVU161
 643 000e 1370     		strb	r3, [r2]
 269:.././simpleserial/simpleserial.c ****     return 0x00;
 644              		.loc 1 269 5 is_stmt 1 view .LVU162
 645 0010 FFF7FEFF 		bl	simpleserial_put
 646              	.LVL54:
 270:.././simpleserial/simpleserial.c **** }
 647              		.loc 1 270 5 view .LVU163
 271:.././simpleserial/simpleserial.c **** 
 648              		.loc 1 271 1 is_stmt 0 view .LVU164
 649 0014 0020     		movs	r0, #0
 650 0016 0EBD     		pop	{r1, r2, r3, pc}
 651              	.L42:
 652              		.align	2
 653              	.L41:
 654 0018 00000000 		.word	.LANCHOR0
 655              		.cfi_endproc
 656              	.LFE4:
 658              		.section	.text.ss_get_commands,"ax",%progbits
 659              		.align	1
 660              		.global	ss_get_commands
 661              		.syntax unified
 662              		.code	16
 663              		.thumb_func
 665              	ss_get_commands:
 666              	.LVL55:
 667              	.LFB5:
 280:.././simpleserial/simpleserial.c ****     ss_cmd_repr repr_cmd_buf[MAX_SS_CMDS];
 668              		.loc 1 280 1 is_stmt 1 view -0
 669              		.cfi_startproc
 670              		@ args = 0, pretend = 0, frame = 48
 671              		@ frame_needed = 0, uses_anonymous_args = 0
 281:.././simpleserial/simpleserial.c ****     for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 672              		.loc 1 281 5 view .LVU166
 282:.././simpleserial/simpleserial.c ****         repr_cmd_buf[i].c = commands[i].c;
 673              		.loc 1 282 5 view .LVU167
 674              	.LBB12:
 282:.././simpleserial/simpleserial.c ****         repr_cmd_buf[i].c = commands[i].c;
 675              		.loc 1 282 10 view .LVU168
 282:.././simpleserial/simpleserial.c ****         repr_cmd_buf[i].c = commands[i].c;
 676              		.loc 1 282 10 is_stmt 0 view .LVU169
 677 0000 0322     		movs	r2, #3
 282:.././simpleserial/simpleserial.c ****         repr_cmd_buf[i].c = commands[i].c;
 678              		.loc 1 282 43 view .LVU170
 679 0002 114B     		ldr	r3, .L46
 680 0004 9446     		mov	ip, r2
 681 0006 1868     		ldr	r0, [r3]
 682              	.LVL56:
 282:.././simpleserial/simpleserial.c ****         repr_cmd_buf[i].c = commands[i].c;
 683              		.loc 1 282 18 view .LVU171
 684 0008 0023     		movs	r3, #0
 685              	.LBE12:
 280:.././simpleserial/simpleserial.c ****     ss_cmd_repr repr_cmd_buf[MAX_SS_CMDS];
 686              		.loc 1 280 1 view .LVU172
 687 000a F0B5     		push	{r4, r5, r6, r7, lr}
 688              	.LCFI7:
 689              		.cfi_def_cfa_offset 20
 690              		.cfi_offset 4, -20
 691              		.cfi_offset 5, -16
 692              		.cfi_offset 6, -12
 693              		.cfi_offset 7, -8
 694              		.cfi_offset 14, -4
 695              	.LBB13:
 283:.././simpleserial/simpleserial.c ****         repr_cmd_buf[i].len = commands[i].len;
 696              		.loc 1 283 40 view .LVU173
 697 000c 0F4C     		ldr	r4, .L46+4
 698              	.LBE13:
 280:.././simpleserial/simpleserial.c ****     ss_cmd_repr repr_cmd_buf[MAX_SS_CMDS];
 699              		.loc 1 280 1 view .LVU174
 700 000e 8DB0     		sub	sp, sp, #52
 701              	.LCFI8:
 702              		.cfi_def_cfa_offset 72
 703              	.LBB14:
 282:.././simpleserial/simpleserial.c ****         repr_cmd_buf[i].c = commands[i].c;
 704              		.loc 1 282 43 view .LVU175
 705 0010 C6B2     		uxtb	r6, r0
 706              	.LVL57:
 707              	.L44:
 282:.././simpleserial/simpleserial.c ****         repr_cmd_buf[i].c = commands[i].c;
 708              		.loc 1 282 27 is_stmt 1 discriminator 1 view .LVU176
 709 0012 B342     		cmp	r3, r6
 710 0014 09DB     		blt	.L45
 711              	.LBE14:
 288:.././simpleserial/simpleserial.c ****     return 0x00;
 712              		.loc 1 288 5 view .LVU177
 713 0016 6146     		mov	r1, ip
 714 0018 4143     		muls	r1, r0
 715 001a 6A46     		mov	r2, sp
 716 001c 7220     		movs	r0, #114
 717 001e C9B2     		uxtb	r1, r1
 718 0020 FFF7FEFF 		bl	simpleserial_put
 719              	.LVL58:
 289:.././simpleserial/simpleserial.c **** }
 720              		.loc 1 289 5 view .LVU178
 290:.././simpleserial/simpleserial.c **** 
 721              		.loc 1 290 1 is_stmt 0 view .LVU179
 722 0024 0020     		movs	r0, #0
 723 0026 0DB0     		add	sp, sp, #52
 724              		@ sp needed
 725 0028 F0BD     		pop	{r4, r5, r6, r7, pc}
 726              	.LVL59:
 727              	.L45:
 728              	.LBB15:
 283:.././simpleserial/simpleserial.c ****         repr_cmd_buf[i].len = commands[i].len;
 729              		.loc 1 283 9 is_stmt 1 discriminator 3 view .LVU180
 283:.././simpleserial/simpleserial.c ****         repr_cmd_buf[i].len = commands[i].len;
 730              		.loc 1 283 27 is_stmt 0 discriminator 3 view .LVU181
 731 002a 6546     		mov	r5, ip
 732 002c 6946     		mov	r1, sp
 733 002e 5D43     		muls	r5, r3
 283:.././simpleserial/simpleserial.c ****         repr_cmd_buf[i].len = commands[i].len;
 734              		.loc 1 283 40 discriminator 3 view .LVU182
 735 0030 1A01     		lsls	r2, r3, #4
 283:.././simpleserial/simpleserial.c ****         repr_cmd_buf[i].len = commands[i].len;
 736              		.loc 1 283 27 discriminator 3 view .LVU183
 737 0032 175D     		ldrb	r7, [r2, r4]
 284:.././simpleserial/simpleserial.c ****         repr_cmd_buf[i].flags = commands[i].flags;
 738              		.loc 1 284 42 discriminator 3 view .LVU184
 739 0034 A218     		adds	r2, r4, r2
 283:.././simpleserial/simpleserial.c ****         repr_cmd_buf[i].len = commands[i].len;
 740              		.loc 1 283 27 discriminator 3 view .LVU185
 741 0036 4F55     		strb	r7, [r1, r5]
 284:.././simpleserial/simpleserial.c ****         repr_cmd_buf[i].flags = commands[i].flags;
 742              		.loc 1 284 9 is_stmt 1 discriminator 3 view .LVU186
 284:.././simpleserial/simpleserial.c ****         repr_cmd_buf[i].flags = commands[i].flags;
 743              		.loc 1 284 29 is_stmt 0 discriminator 3 view .LVU187
 744 0038 5768     		ldr	r7, [r2, #4]
 285:.././simpleserial/simpleserial.c ****     }
 745              		.loc 1 285 31 discriminator 3 view .LVU188
 746 003a 127B     		ldrb	r2, [r2, #12]
 284:.././simpleserial/simpleserial.c ****         repr_cmd_buf[i].flags = commands[i].flags;
 747              		.loc 1 284 29 discriminator 3 view .LVU189
 748 003c 6D44     		add	r5, r5, sp
 282:.././simpleserial/simpleserial.c ****         repr_cmd_buf[i].c = commands[i].c;
 749              		.loc 1 282 53 discriminator 3 view .LVU190
 750 003e 0133     		adds	r3, r3, #1
 751              	.LVL60:
 284:.././simpleserial/simpleserial.c ****         repr_cmd_buf[i].flags = commands[i].flags;
 752              		.loc 1 284 29 discriminator 3 view .LVU191
 753 0040 6F70     		strb	r7, [r5, #1]
 285:.././simpleserial/simpleserial.c ****     }
 754              		.loc 1 285 9 is_stmt 1 discriminator 3 view .LVU192
 285:.././simpleserial/simpleserial.c ****     }
 755              		.loc 1 285 31 is_stmt 0 discriminator 3 view .LVU193
 756 0042 AA70     		strb	r2, [r5, #2]
 282:.././simpleserial/simpleserial.c ****         repr_cmd_buf[i].c = commands[i].c;
 757              		.loc 1 282 53 is_stmt 1 discriminator 3 view .LVU194
 758 0044 DBB2     		uxtb	r3, r3
 759              	.LVL61:
 282:.././simpleserial/simpleserial.c ****         repr_cmd_buf[i].c = commands[i].c;
 760              		.loc 1 282 53 is_stmt 0 discriminator 3 view .LVU195
 761 0046 E4E7     		b	.L44
 762              	.L47:
 763              		.align	2
 764              	.L46:
 765 0048 00000000 		.word	.LANCHOR0
 766 004c 04000000 		.word	commands
 767              	.LBE15:
 768              		.cfi_endproc
 769              	.LFE5:
 771              		.section	.text.simpleserial_get,"ax",%progbits
 772              		.align	1
 773              		.global	simpleserial_get
 774              		.syntax unified
 775              		.code	16
 776              		.thumb_func
 778              	simpleserial_get:
 779              	.LFB10:
 361:.././simpleserial/simpleserial.c **** 	char ascii_buf[2*MAX_SS_LEN];
 780              		.loc 1 361 1 is_stmt 1 view -0
 781              		.cfi_startproc
 782              		@ args = 0, pretend = 0, frame = 776
 783              		@ frame_needed = 0, uses_anonymous_args = 0
 362:.././simpleserial/simpleserial.c **** 	uint8_t data_buf[MAX_SS_LEN];
 784              		.loc 1 362 2 view .LVU197
 363:.././simpleserial/simpleserial.c **** 	char c;
 785              		.loc 1 363 2 view .LVU198
 364:.././simpleserial/simpleserial.c **** 
 786              		.loc 1 364 2 view .LVU199
 367:.././simpleserial/simpleserial.c **** 
 787              		.loc 1 367 2 view .LVU200
 361:.././simpleserial/simpleserial.c **** 	char ascii_buf[2*MAX_SS_LEN];
 788              		.loc 1 361 1 is_stmt 0 view .LVU201
 789 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 790              	.LCFI9:
 791              		.cfi_def_cfa_offset 20
 792              		.cfi_offset 4, -20
 793              		.cfi_offset 5, -16
 794              		.cfi_offset 6, -12
 795              		.cfi_offset 7, -8
 796              		.cfi_offset 14, -4
 370:.././simpleserial/simpleserial.c **** 	{
 797              		.loc 1 370 10 view .LVU202
 798 0002 0025     		movs	r5, #0
 361:.././simpleserial/simpleserial.c **** 	char ascii_buf[2*MAX_SS_LEN];
 799              		.loc 1 361 1 view .LVU203
 800 0004 2F4C     		ldr	r4, .L72
 801 0006 A544     		add	sp, sp, r4
 802              	.LCFI10:
 803              		.cfi_def_cfa_offset 800
 367:.././simpleserial/simpleserial.c **** 
 804              		.loc 1 367 6 view .LVU204
 805 0008 FFF7FEFF 		bl	getch
 806              	.LVL62:
 369:.././simpleserial/simpleserial.c **** 	for(cmd = 0; cmd < num_commands; cmd++)
 807              		.loc 1 369 2 is_stmt 1 view .LVU205
 370:.././simpleserial/simpleserial.c **** 	{
 808              		.loc 1 370 2 view .LVU206
 370:.././simpleserial/simpleserial.c **** 	{
 809              		.loc 1 370 19 is_stmt 0 view .LVU207
 810 000c 2E4B     		ldr	r3, .L72+4
 372:.././simpleserial/simpleserial.c **** 			break;
 811              		.loc 1 372 19 view .LVU208
 812 000e 2F49     		ldr	r1, .L72+8
 370:.././simpleserial/simpleserial.c **** 	{
 813              		.loc 1 370 19 view .LVU209
 814 0010 1A68     		ldr	r2, [r3]
 815              	.LVL63:
 816              	.L49:
 370:.././simpleserial/simpleserial.c **** 	{
 817              		.loc 1 370 19 is_stmt 1 discriminator 1 view .LVU210
 818 0012 AA42     		cmp	r2, r5
 819 0014 45DC     		bgt	.L51
 377:.././simpleserial/simpleserial.c **** 		return;
 820              		.loc 1 377 2 view .LVU211
 377:.././simpleserial/simpleserial.c **** 		return;
 821              		.loc 1 377 4 is_stmt 0 view .LVU212
 822 0016 40D0     		beq	.L48
 823              	.L50:
 381:.././simpleserial/simpleserial.c **** 	{
 824              		.loc 1 381 2 is_stmt 1 view .LVU213
 381:.././simpleserial/simpleserial.c **** 	{
 825              		.loc 1 381 5 is_stmt 0 view .LVU214
 826 0018 0127     		movs	r7, #1
 381:.././simpleserial/simpleserial.c **** 	{
 827              		.loc 1 381 20 view .LVU215
 828 001a 2C4C     		ldr	r4, .L72+8
 829 001c 2D01     		lsls	r5, r5, #4
 830              	.LVL64:
 381:.././simpleserial/simpleserial.c **** 	{
 831              		.loc 1 381 20 view .LVU216
 832 001e 6619     		adds	r6, r4, r5
 381:.././simpleserial/simpleserial.c **** 	{
 833              		.loc 1 381 5 view .LVU217
 834 0020 337B     		ldrb	r3, [r6, #12]
 835 0022 3B42     		tst	r3, r7
 836 0024 1AD0     		beq	.L53
 837              	.LBB16:
 383:.././simpleserial/simpleserial.c **** 		char buff[2];
 838              		.loc 1 383 3 is_stmt 1 view .LVU218
 383:.././simpleserial/simpleserial.c **** 		char buff[2];
 839              		.loc 1 383 11 is_stmt 0 view .LVU219
 840 0026 0023     		movs	r3, #0
 841 0028 6A46     		mov	r2, sp
 842 002a 1372     		strb	r3, [r2, #8]
 384:.././simpleserial/simpleserial.c **** 		buff[0] = getch();
 843              		.loc 1 384 3 is_stmt 1 view .LVU220
 385:.././simpleserial/simpleserial.c **** 		buff[1] = getch();
 844              		.loc 1 385 3 view .LVU221
 385:.././simpleserial/simpleserial.c **** 		buff[1] = getch();
 845              		.loc 1 385 13 is_stmt 0 view .LVU222
 846 002c FFF7FEFF 		bl	getch
 847              	.LVL65:
 385:.././simpleserial/simpleserial.c **** 		buff[1] = getch();
 848              		.loc 1 385 11 view .LVU223
 849 0030 8422     		movs	r2, #132
 850 0032 6B46     		mov	r3, sp
 851 0034 5200     		lsls	r2, r2, #1
 852 0036 9B18     		adds	r3, r3, r2
 853 0038 1870     		strb	r0, [r3]
 386:.././simpleserial/simpleserial.c **** 		if (hex_decode(1, buff, &l))
 854              		.loc 1 386 3 is_stmt 1 view .LVU224
 386:.././simpleserial/simpleserial.c **** 		if (hex_decode(1, buff, &l))
 855              		.loc 1 386 13 is_stmt 0 view .LVU225
 856 003a FFF7FEFF 		bl	getch
 857              	.LVL66:
 386:.././simpleserial/simpleserial.c **** 		if (hex_decode(1, buff, &l))
 858              		.loc 1 386 11 view .LVU226
 859 003e 0A22     		movs	r2, #10
 860 0040 6B46     		mov	r3, sp
 861 0042 FF32     		adds	r2, r2, #255
 862 0044 9B18     		adds	r3, r3, r2
 863 0046 1870     		strb	r0, [r3]
 387:.././simpleserial/simpleserial.c **** 			return;
 864              		.loc 1 387 3 is_stmt 1 view .LVU227
 387:.././simpleserial/simpleserial.c **** 			return;
 865              		.loc 1 387 7 is_stmt 0 view .LVU228
 866 0048 02AA     		add	r2, sp, #8
 867 004a 3800     		movs	r0, r7
 868 004c 42A9     		add	r1, sp, #264
 869 004e FFF7FEFF 		bl	hex_decode
 870              	.LVL67:
 387:.././simpleserial/simpleserial.c **** 			return;
 871              		.loc 1 387 6 view .LVU229
 872 0052 0028     		cmp	r0, #0
 873 0054 21D1     		bne	.L48
 389:.././simpleserial/simpleserial.c **** 	}
 874              		.loc 1 389 3 is_stmt 1 view .LVU230
 389:.././simpleserial/simpleserial.c **** 	}
 875              		.loc 1 389 21 is_stmt 0 view .LVU231
 876 0056 6B46     		mov	r3, sp
 877 0058 1B7A     		ldrb	r3, [r3, #8]
 878 005a 7360     		str	r3, [r6, #4]
 879              	.L53:
 880              	.LBE16:
 370:.././simpleserial/simpleserial.c **** 	{
 881              		.loc 1 370 10 discriminator 1 view .LVU232
 882 005c 0026     		movs	r6, #0
 883              	.LVL68:
 884              	.L56:
 885              	.LBB17:
 393:.././simpleserial/simpleserial.c **** 	{
 886              		.loc 1 393 19 is_stmt 1 discriminator 1 view .LVU233
 393:.././simpleserial/simpleserial.c **** 	{
 887              		.loc 1 393 36 is_stmt 0 discriminator 1 view .LVU234
 888 005e 6319     		adds	r3, r4, r5
 393:.././simpleserial/simpleserial.c **** 	{
 889              		.loc 1 393 22 discriminator 1 view .LVU235
 890 0060 5B68     		ldr	r3, [r3, #4]
 891 0062 5B00     		lsls	r3, r3, #1
 393:.././simpleserial/simpleserial.c **** 	{
 892              		.loc 1 393 19 discriminator 1 view .LVU236
 893 0064 B342     		cmp	r3, r6
 894 0066 22D8     		bhi	.L57
 895              	.LBE17:
 405:.././simpleserial/simpleserial.c **** 	if(c != '\n' && c != '\r')
 896              		.loc 1 405 2 is_stmt 1 view .LVU237
 405:.././simpleserial/simpleserial.c **** 	if(c != '\n' && c != '\r')
 897              		.loc 1 405 6 is_stmt 0 view .LVU238
 898 0068 FFF7FEFF 		bl	getch
 899              	.LVL69:
 406:.././simpleserial/simpleserial.c **** 		return;
 900              		.loc 1 406 2 is_stmt 1 view .LVU239
 406:.././simpleserial/simpleserial.c **** 		return;
 901              		.loc 1 406 4 is_stmt 0 view .LVU240
 902 006c 0A28     		cmp	r0, #10
 903 006e 01D0     		beq	.L58
 406:.././simpleserial/simpleserial.c **** 		return;
 904              		.loc 1 406 15 discriminator 1 view .LVU241
 905 0070 0D28     		cmp	r0, #13
 906 0072 12D1     		bne	.L48
 907              	.L58:
 411:.././simpleserial/simpleserial.c **** 		return;
 908              		.loc 1 411 2 is_stmt 1 view .LVU242
 411:.././simpleserial/simpleserial.c **** 		return;
 909              		.loc 1 411 29 is_stmt 0 view .LVU243
 910 0074 6419     		adds	r4, r4, r5
 911 0076 6568     		ldr	r5, [r4, #4]
 411:.././simpleserial/simpleserial.c **** 		return;
 912              		.loc 1 411 5 view .LVU244
 913 0078 02AA     		add	r2, sp, #8
 914 007a 2800     		movs	r0, r5
 915              	.LVL70:
 411:.././simpleserial/simpleserial.c **** 		return;
 916              		.loc 1 411 5 view .LVU245
 917 007c 42A9     		add	r1, sp, #264
 918 007e FFF7FEFF 		bl	hex_decode
 919              	.LVL71:
 411:.././simpleserial/simpleserial.c **** 		return;
 920              		.loc 1 411 4 view .LVU246
 921 0082 0028     		cmp	r0, #0
 922 0084 09D1     		bne	.L48
 415:.././simpleserial/simpleserial.c **** 	ret[0] = commands[cmd].fp(data_buf, commands[cmd].len);
 923              		.loc 1 415 2 is_stmt 1 view .LVU247
 416:.././simpleserial/simpleserial.c **** 
 924              		.loc 1 416 2 view .LVU248
 416:.././simpleserial/simpleserial.c **** 
 925              		.loc 1 416 11 is_stmt 0 view .LVU249
 926 0086 E9B2     		uxtb	r1, r5
 927 0088 A368     		ldr	r3, [r4, #8]
 928 008a 02A8     		add	r0, sp, #8
 929 008c 9847     		blx	r3
 930              	.LVL72:
 416:.././simpleserial/simpleserial.c **** 
 931              		.loc 1 416 9 view .LVU250
 932 008e 01AA     		add	r2, sp, #4
 933 0090 1070     		strb	r0, [r2]
 420:.././simpleserial/simpleserial.c **** #endif
 934              		.loc 1 420 2 is_stmt 1 view .LVU251
 935 0092 0121     		movs	r1, #1
 936 0094 7A20     		movs	r0, #122
 937 0096 FFF7FEFF 		bl	simpleserial_put
 938              	.LVL73:
 939              	.L48:
 422:.././simpleserial/simpleserial.c **** 
 940              		.loc 1 422 1 is_stmt 0 view .LVU252
 941 009a C323     		movs	r3, #195
 942 009c 9B00     		lsls	r3, r3, #2
 943 009e 9D44     		add	sp, sp, r3
 944              		@ sp needed
 945 00a0 F0BD     		pop	{r4, r5, r6, r7, pc}
 946              	.LVL74:
 947              	.L51:
 372:.././simpleserial/simpleserial.c **** 			break;
 948              		.loc 1 372 3 is_stmt 1 view .LVU253
 372:.././simpleserial/simpleserial.c **** 			break;
 949              		.loc 1 372 19 is_stmt 0 view .LVU254
 950 00a2 2C01     		lsls	r4, r5, #4
 372:.././simpleserial/simpleserial.c **** 			break;
 951              		.loc 1 372 5 view .LVU255
 952 00a4 0C5D     		ldrb	r4, [r1, r4]
 953 00a6 8442     		cmp	r4, r0
 954 00a8 B6D0     		beq	.L50
 370:.././simpleserial/simpleserial.c **** 	{
 955              		.loc 1 370 38 is_stmt 1 discriminator 2 view .LVU256
 956 00aa 0135     		adds	r5, r5, #1
 957              	.LVL75:
 370:.././simpleserial/simpleserial.c **** 	{
 958              		.loc 1 370 38 is_stmt 0 discriminator 2 view .LVU257
 959 00ac B1E7     		b	.L49
 960              	.LVL76:
 961              	.L57:
 962              	.LBB18:
 395:.././simpleserial/simpleserial.c **** 
 963              		.loc 1 395 3 is_stmt 1 view .LVU258
 395:.././simpleserial/simpleserial.c **** 
 964              		.loc 1 395 7 is_stmt 0 view .LVU259
 965 00ae FFF7FEFF 		bl	getch
 966              	.LVL77:
 398:.././simpleserial/simpleserial.c **** 			return;
 967              		.loc 1 398 3 is_stmt 1 view .LVU260
 398:.././simpleserial/simpleserial.c **** 			return;
 968              		.loc 1 398 5 is_stmt 0 view .LVU261
 969 00b2 0A28     		cmp	r0, #10
 970 00b4 F1D0     		beq	.L48
 398:.././simpleserial/simpleserial.c **** 			return;
 971              		.loc 1 398 16 discriminator 1 view .LVU262
 972 00b6 0D28     		cmp	r0, #13
 973 00b8 EFD0     		beq	.L48
 401:.././simpleserial/simpleserial.c **** 	}
 974              		.loc 1 401 3 is_stmt 1 discriminator 2 view .LVU263
 401:.././simpleserial/simpleserial.c **** 	}
 975              		.loc 1 401 16 is_stmt 0 discriminator 2 view .LVU264
 976 00ba 42AB     		add	r3, sp, #264
 977 00bc F054     		strb	r0, [r6, r3]
 393:.././simpleserial/simpleserial.c **** 	{
 978              		.loc 1 393 43 is_stmt 1 discriminator 2 view .LVU265
 979 00be 0136     		adds	r6, r6, #1
 980              	.LVL78:
 393:.././simpleserial/simpleserial.c **** 	{
 981              		.loc 1 393 43 is_stmt 0 discriminator 2 view .LVU266
 982 00c0 CDE7     		b	.L56
 983              	.L73:
 984 00c2 C046     		.align	2
 985              	.L72:
 986 00c4 F4FCFFFF 		.word	-780
 987 00c8 00000000 		.word	.LANCHOR0
 988 00cc 04000000 		.word	commands
 989              	.LBE18:
 990              		.cfi_endproc
 991              	.LFE10:
 993              		.section	.rodata
 994              		.set	.LANCHOR1,. + 0
 997              	hex_lookup:
 998 0000 30313233 		.ascii	"0123456789ABCDEF"
 998      34353637 
 998      38394142 
 998      43444546 
 999              		.bss
 1000              		.align	2
 1001              		.set	.LANCHOR0,. + 0
 1004              	num_commands:
 1005 0000 00000000 		.space	4
 1008              	commands:
 1009 0004 00000000 		.space	256
 1009      00000000 
 1009      00000000 
 1009      00000000 
 1009      00000000 
 1010              		.text
 1011              	.Letext0:
 1012              		.file 3 "/usr/lib/gcc/arm-none-eabi/12.2.1/include/stdint.h"
 1013              		.file 4 ".././hal/stm32f0/stm32f0_hal.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 simpleserial.c
     /tmp/cc5vAfhS.s:19     .text.check_version:0000000000000000 $t
     /tmp/cc5vAfhS.s:25     .text.check_version:0000000000000000 check_version
     /tmp/cc5vAfhS.s:44     .text.led_ok:0000000000000000 $t
     /tmp/cc5vAfhS.s:50     .text.led_ok:0000000000000000 led_ok
     /tmp/cc5vAfhS.s:64     .text.led_error:0000000000000000 $t
     /tmp/cc5vAfhS.s:70     .text.led_error:0000000000000000 led_error
     /tmp/cc5vAfhS.s:85     .text.ss_crc:0000000000000000 $t
     /tmp/cc5vAfhS.s:91     .text.ss_crc:0000000000000000 ss_crc
     /tmp/cc5vAfhS.s:167    .text.hex_decode:0000000000000000 $t
     /tmp/cc5vAfhS.s:173    .text.hex_decode:0000000000000000 hex_decode
     /tmp/cc5vAfhS.s:353    .text.simpleserial_addcmd_flags:0000000000000000 $t
     /tmp/cc5vAfhS.s:359    .text.simpleserial_addcmd_flags:0000000000000000 simpleserial_addcmd_flags
     /tmp/cc5vAfhS.s:421    .text.simpleserial_addcmd_flags:0000000000000028 $d
     /tmp/cc5vAfhS.s:1008   .bss:0000000000000004 commands
     /tmp/cc5vAfhS.s:427    .text.simpleserial_addcmd:0000000000000000 $t
     /tmp/cc5vAfhS.s:433    .text.simpleserial_addcmd:0000000000000000 simpleserial_addcmd
     /tmp/cc5vAfhS.s:460    .text.simpleserial_init:0000000000000000 $t
     /tmp/cc5vAfhS.s:466    .text.simpleserial_init:0000000000000000 simpleserial_init
     /tmp/cc5vAfhS.s:505    .text.simpleserial_init:0000000000000024 $d
     /tmp/cc5vAfhS.s:665    .text.ss_get_commands:0000000000000000 ss_get_commands
     /tmp/cc5vAfhS.s:611    .text.ss_num_commands:0000000000000000 ss_num_commands
     /tmp/cc5vAfhS.s:512    .text.simpleserial_put:0000000000000000 $t
     /tmp/cc5vAfhS.s:518    .text.simpleserial_put:0000000000000000 simpleserial_put
     /tmp/cc5vAfhS.s:599    .text.simpleserial_put:0000000000000034 $d
     /tmp/cc5vAfhS.s:605    .text.ss_num_commands:0000000000000000 $t
     /tmp/cc5vAfhS.s:654    .text.ss_num_commands:0000000000000018 $d
     /tmp/cc5vAfhS.s:659    .text.ss_get_commands:0000000000000000 $t
     /tmp/cc5vAfhS.s:765    .text.ss_get_commands:0000000000000048 $d
     /tmp/cc5vAfhS.s:772    .text.simpleserial_get:0000000000000000 $t
     /tmp/cc5vAfhS.s:778    .text.simpleserial_get:0000000000000000 simpleserial_get
     /tmp/cc5vAfhS.s:986    .text.simpleserial_get:00000000000000c4 $d
     /tmp/cc5vAfhS.s:997    .rodata:0000000000000000 hex_lookup
     /tmp/cc5vAfhS.s:1000   .bss:0000000000000000 $d
     /tmp/cc5vAfhS.s:1004   .bss:0000000000000000 num_commands

UNDEFINED SYMBOLS
putch
getch
