
ss-chacha20-mbedtls-CWLITEARM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000015ec  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08001774  08001774  00011774  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080017e8  080017e8  000117f0  2**0
                  CONTENTS
  4 .ARM          00000000  080017e8  080017e8  000117f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080017e8  080017f0  000117f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080017e8  080017e8  000117e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080017ec  080017ec  000117ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000117f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000198  20000000  080017f0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  20000198  080017f0  00020198  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000117f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000033  00000000  00000000  0001181a  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004cca  00000000  00000000  0001184d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000f7d  00000000  00000000  00016517  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    0000289e  00000000  00000000  00017494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000210  00000000  00000000  00019d32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000004e0  00000000  00000000  00019f42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000028ae  00000000  00000000  0001a422  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00001683  00000000  00000000  0001ccd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000005b8  00000000  00000000  0001e354  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000144  00000000  00000000  0001e90c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000178  00000000  00000000  0001ea50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <deregister_tm_clones>:
 8000188:	4803      	ldr	r0, [pc, #12]	; (8000198 <deregister_tm_clones+0x10>)
 800018a:	4b04      	ldr	r3, [pc, #16]	; (800019c <deregister_tm_clones+0x14>)
 800018c:	4283      	cmp	r3, r0
 800018e:	d002      	beq.n	8000196 <deregister_tm_clones+0xe>
 8000190:	4b03      	ldr	r3, [pc, #12]	; (80001a0 <deregister_tm_clones+0x18>)
 8000192:	b103      	cbz	r3, 8000196 <deregister_tm_clones+0xe>
 8000194:	4718      	bx	r3
 8000196:	4770      	bx	lr
 8000198:	20000000 	.word	0x20000000
 800019c:	20000000 	.word	0x20000000
 80001a0:	00000000 	.word	0x00000000

080001a4 <register_tm_clones>:
 80001a4:	4805      	ldr	r0, [pc, #20]	; (80001bc <register_tm_clones+0x18>)
 80001a6:	4906      	ldr	r1, [pc, #24]	; (80001c0 <register_tm_clones+0x1c>)
 80001a8:	1a0b      	subs	r3, r1, r0
 80001aa:	0fd9      	lsrs	r1, r3, #31
 80001ac:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 80001b0:	1049      	asrs	r1, r1, #1
 80001b2:	d002      	beq.n	80001ba <register_tm_clones+0x16>
 80001b4:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <register_tm_clones+0x20>)
 80001b6:	b103      	cbz	r3, 80001ba <register_tm_clones+0x16>
 80001b8:	4718      	bx	r3
 80001ba:	4770      	bx	lr
 80001bc:	20000000 	.word	0x20000000
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c06      	ldr	r4, [pc, #24]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b943      	cbnz	r3, 80001e2 <__do_global_dtors_aux+0x1a>
 80001d0:	f7ff ffda 	bl	8000188 <deregister_tm_clones>
 80001d4:	4b04      	ldr	r3, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	b113      	cbz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d8:	4804      	ldr	r0, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x24>)
 80001da:	f3af 8000 	nop.w
 80001de:	2301      	movs	r3, #1
 80001e0:	7023      	strb	r3, [r4, #0]
 80001e2:	bd10      	pop	{r4, pc}
 80001e4:	20000000 	.word	0x20000000
 80001e8:	00000000 	.word	0x00000000
 80001ec:	0800175c 	.word	0x0800175c

080001f0 <frame_dummy>:
 80001f0:	b508      	push	{r3, lr}
 80001f2:	4b04      	ldr	r3, [pc, #16]	; (8000204 <frame_dummy+0x14>)
 80001f4:	b11b      	cbz	r3, 80001fe <frame_dummy+0xe>
 80001f6:	4904      	ldr	r1, [pc, #16]	; (8000208 <frame_dummy+0x18>)
 80001f8:	4804      	ldr	r0, [pc, #16]	; (800020c <frame_dummy+0x1c>)
 80001fa:	f3af 8000 	nop.w
 80001fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000202:	e7cf      	b.n	80001a4 <register_tm_clones>
 8000204:	00000000 	.word	0x00000000
 8000208:	20000004 	.word	0x20000004
 800020c:	0800175c 	.word	0x0800175c

08000210 <__libc_init_array>:
 8000210:	b570      	push	{r4, r5, r6, lr}
 8000212:	4e0d      	ldr	r6, [pc, #52]	; (8000248 <__libc_init_array+0x38>)
 8000214:	4d0d      	ldr	r5, [pc, #52]	; (800024c <__libc_init_array+0x3c>)
 8000216:	1b76      	subs	r6, r6, r5
 8000218:	10b6      	asrs	r6, r6, #2
 800021a:	d006      	beq.n	800022a <__libc_init_array+0x1a>
 800021c:	2400      	movs	r4, #0
 800021e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000222:	3401      	adds	r4, #1
 8000224:	4798      	blx	r3
 8000226:	42a6      	cmp	r6, r4
 8000228:	d1f9      	bne.n	800021e <__libc_init_array+0xe>
 800022a:	4e09      	ldr	r6, [pc, #36]	; (8000250 <__libc_init_array+0x40>)
 800022c:	4d09      	ldr	r5, [pc, #36]	; (8000254 <__libc_init_array+0x44>)
 800022e:	1b76      	subs	r6, r6, r5
 8000230:	f001 fa94 	bl	800175c <_init>
 8000234:	10b6      	asrs	r6, r6, #2
 8000236:	d006      	beq.n	8000246 <__libc_init_array+0x36>
 8000238:	2400      	movs	r4, #0
 800023a:	f855 3b04 	ldr.w	r3, [r5], #4
 800023e:	3401      	adds	r4, #1
 8000240:	4798      	blx	r3
 8000242:	42a6      	cmp	r6, r4
 8000244:	d1f9      	bne.n	800023a <__libc_init_array+0x2a>
 8000246:	bd70      	pop	{r4, r5, r6, pc}
 8000248:	080017e8 	.word	0x080017e8
 800024c:	080017e8 	.word	0x080017e8
 8000250:	080017ec 	.word	0x080017ec
 8000254:	080017e8 	.word	0x080017e8

08000258 <chacha20_quarter_round>:
static inline void chacha20_quarter_round(uint32_t state[16],
                                          size_t a,
                                          size_t b,
                                          size_t c,
                                          size_t d)
{
 8000258:	b570      	push	{r4, r5, r6, lr}
    /* a += b; d ^= a; d <<<= 16; */
    state[a] += state[b];
 800025a:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
 800025e:	f850 6022 	ldr.w	r6, [r0, r2, lsl #2]
{
 8000262:	9d04      	ldr	r5, [sp, #16]
    state[a] += state[b];
 8000264:	4434      	add	r4, r6
 8000266:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
    state[d] ^= state[a];
 800026a:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 800026e:	4074      	eors	r4, r6
    state[d] = ROTL32(state[d], 16);
 8000270:	ea4f 4434 	mov.w	r4, r4, ror #16
 8000274:	f840 4025 	str.w	r4, [r0, r5, lsl #2]

    /* c += d; b ^= c; b <<<= 12 */
    state[c] += state[d];
 8000278:	f850 6023 	ldr.w	r6, [r0, r3, lsl #2]
 800027c:	4434      	add	r4, r6
 800027e:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
    state[b] ^= state[c];
 8000282:	f850 6022 	ldr.w	r6, [r0, r2, lsl #2]
 8000286:	4074      	eors	r4, r6
    state[b] = ROTL32(state[b], 12);
 8000288:	ea4f 5434 	mov.w	r4, r4, ror #20
 800028c:	f840 4022 	str.w	r4, [r0, r2, lsl #2]

    /* a += b; d ^= a; d <<<= 8; */
    state[a] += state[b];
 8000290:	f850 6021 	ldr.w	r6, [r0, r1, lsl #2]
 8000294:	4434      	add	r4, r6
 8000296:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
    state[d] ^= state[a];
 800029a:	f850 1025 	ldr.w	r1, [r0, r5, lsl #2]
 800029e:	4061      	eors	r1, r4
    state[d] = ROTL32(state[d], 8);
 80002a0:	ea4f 6131 	mov.w	r1, r1, ror #24
 80002a4:	f840 1025 	str.w	r1, [r0, r5, lsl #2]

    /* c += d; b ^= c; b <<<= 7; */
    state[c] += state[d];
 80002a8:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 80002ac:	4421      	add	r1, r4
 80002ae:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    state[b] ^= state[c];
 80002b2:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 80002b6:	4059      	eors	r1, r3
    state[b] = ROTL32(state[b], 7);
 80002b8:	ea4f 6171 	mov.w	r1, r1, ror #25
 80002bc:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
}
 80002c0:	bd70      	pop	{r4, r5, r6, pc}

080002c2 <mbedtls_platform_zeroize>:
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 80002c2:	4401      	add	r1, r0
 80002c4:	2300      	movs	r3, #0
 80002c6:	4288      	cmp	r0, r1
 80002c8:	d100      	bne.n	80002cc <mbedtls_platform_zeroize+0xa>
}
 80002ca:	4770      	bx	lr
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 80002cc:	f800 3b01 	strb.w	r3, [r0], #1
 80002d0:	e7f9      	b.n	80002c6 <mbedtls_platform_zeroize+0x4>

080002d2 <chacha20_block>:
 * \param initial_state The initial ChaCha20 state (key, nonce, counter).
 * \param keystream     Generated keystream bytes are written to this buffer.
 */
static void chacha20_block(const uint32_t initial_state[16],
                           unsigned char keystream[64])
{
 80002d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d6:	b092      	sub	sp, #72	; 0x48
 80002d8:	4604      	mov	r4, r0
 80002da:	460d      	mov	r5, r1
    uint32_t working_state[16];
    size_t i;

    memcpy(working_state,
 80002dc:	4603      	mov	r3, r0
 80002de:	ae02      	add	r6, sp, #8
 80002e0:	f100 0740 	add.w	r7, r0, #64	; 0x40
 80002e4:	6818      	ldr	r0, [r3, #0]
 80002e6:	6859      	ldr	r1, [r3, #4]
 80002e8:	4632      	mov	r2, r6
 80002ea:	c203      	stmia	r2!, {r0, r1}
 80002ec:	3308      	adds	r3, #8
 80002ee:	42bb      	cmp	r3, r7
 80002f0:	4616      	mov	r6, r2
 80002f2:	d1f7      	bne.n	80002e4 <chacha20_block+0x12>
 80002f4:	260a      	movs	r6, #10
    chacha20_quarter_round(state, 0, 4, 8,  12);
 80002f6:	2308      	movs	r3, #8
 80002f8:	f04f 090c 	mov.w	r9, #12
 80002fc:	eb0d 0003 	add.w	r0, sp, r3
 8000300:	2204      	movs	r2, #4
 8000302:	2100      	movs	r1, #0
    chacha20_quarter_round(state, 1, 5, 9,  13);
 8000304:	f04f 080d 	mov.w	r8, #13
    chacha20_quarter_round(state, 0, 4, 8,  12);
 8000308:	f8cd 9000 	str.w	r9, [sp]
 800030c:	f7ff ffa4 	bl	8000258 <chacha20_quarter_round>
    chacha20_quarter_round(state, 2, 6, 10, 14);
 8000310:	270e      	movs	r7, #14
    chacha20_quarter_round(state, 1, 5, 9,  13);
 8000312:	2309      	movs	r3, #9
 8000314:	2205      	movs	r2, #5
 8000316:	2101      	movs	r1, #1
 8000318:	f8cd 8000 	str.w	r8, [sp]
 800031c:	f7ff ff9c 	bl	8000258 <chacha20_quarter_round>
    chacha20_quarter_round(state, 3, 7, 11, 15);
 8000320:	f04f 0a0f 	mov.w	sl, #15
    chacha20_quarter_round(state, 2, 6, 10, 14);
 8000324:	230a      	movs	r3, #10
 8000326:	2206      	movs	r2, #6
 8000328:	2102      	movs	r1, #2
 800032a:	9700      	str	r7, [sp, #0]
 800032c:	f7ff ff94 	bl	8000258 <chacha20_quarter_round>
    chacha20_quarter_round(state, 3, 7, 11, 15);
 8000330:	230b      	movs	r3, #11
 8000332:	2207      	movs	r2, #7
 8000334:	2103      	movs	r1, #3
 8000336:	f8cd a000 	str.w	sl, [sp]
 800033a:	f7ff ff8d 	bl	8000258 <chacha20_quarter_round>
    chacha20_quarter_round(state, 0, 5, 10, 15);
 800033e:	230a      	movs	r3, #10
 8000340:	2205      	movs	r2, #5
 8000342:	2100      	movs	r1, #0
 8000344:	f8cd a000 	str.w	sl, [sp]
 8000348:	f7ff ff86 	bl	8000258 <chacha20_quarter_round>
    chacha20_quarter_round(state, 1, 6, 11, 12);
 800034c:	230b      	movs	r3, #11
 800034e:	2206      	movs	r2, #6
 8000350:	2101      	movs	r1, #1
 8000352:	f8cd 9000 	str.w	r9, [sp]
 8000356:	f7ff ff7f 	bl	8000258 <chacha20_quarter_round>
    chacha20_quarter_round(state, 2, 7, 8,  13);
 800035a:	2308      	movs	r3, #8
 800035c:	2207      	movs	r2, #7
 800035e:	2102      	movs	r1, #2
 8000360:	f8cd 8000 	str.w	r8, [sp]
 8000364:	f7ff ff78 	bl	8000258 <chacha20_quarter_round>
    chacha20_quarter_round(state, 3, 4, 9,  14);
 8000368:	9700      	str	r7, [sp, #0]
 800036a:	2309      	movs	r3, #9
 800036c:	2204      	movs	r2, #4
 800036e:	2103      	movs	r1, #3
 8000370:	f7ff ff72 	bl	8000258 <chacha20_quarter_round>
           initial_state,
           CHACHA20_BLOCK_SIZE_BYTES);

    for (i = 0U; i < 10U; i++) {
 8000374:	3e01      	subs	r6, #1
 8000376:	d1be      	bne.n	80002f6 <chacha20_block+0x24>
        chacha20_inner_block(working_state);
    }

    working_state[0] += initial_state[0];
 8000378:	6822      	ldr	r2, [r4, #0]
 800037a:	9b02      	ldr	r3, [sp, #8]
 800037c:	4413      	add	r3, r2
 800037e:	9302      	str	r3, [sp, #8]
    working_state[1] += initial_state[1];
 8000380:	6862      	ldr	r2, [r4, #4]
 8000382:	9b03      	ldr	r3, [sp, #12]
 8000384:	4413      	add	r3, r2
 8000386:	9303      	str	r3, [sp, #12]
    working_state[2] += initial_state[2];
 8000388:	68a2      	ldr	r2, [r4, #8]
 800038a:	9b04      	ldr	r3, [sp, #16]
 800038c:	4413      	add	r3, r2
 800038e:	9304      	str	r3, [sp, #16]
    working_state[3] += initial_state[3];
 8000390:	68e2      	ldr	r2, [r4, #12]
 8000392:	9b05      	ldr	r3, [sp, #20]
 8000394:	4413      	add	r3, r2
 8000396:	9305      	str	r3, [sp, #20]
    working_state[4] += initial_state[4];
 8000398:	6922      	ldr	r2, [r4, #16]
 800039a:	9b06      	ldr	r3, [sp, #24]
 800039c:	4413      	add	r3, r2
 800039e:	9306      	str	r3, [sp, #24]
    working_state[5] += initial_state[5];
 80003a0:	6962      	ldr	r2, [r4, #20]
 80003a2:	9b07      	ldr	r3, [sp, #28]
 80003a4:	4413      	add	r3, r2
 80003a6:	9307      	str	r3, [sp, #28]
    working_state[6] += initial_state[6];
 80003a8:	69a2      	ldr	r2, [r4, #24]
 80003aa:	9b08      	ldr	r3, [sp, #32]
 80003ac:	4413      	add	r3, r2
 80003ae:	9308      	str	r3, [sp, #32]
    working_state[7] += initial_state[7];
 80003b0:	69e2      	ldr	r2, [r4, #28]
 80003b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80003b4:	4413      	add	r3, r2
 80003b6:	9309      	str	r3, [sp, #36]	; 0x24
    working_state[8] += initial_state[8];
 80003b8:	6a22      	ldr	r2, [r4, #32]
 80003ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80003bc:	4413      	add	r3, r2
 80003be:	930a      	str	r3, [sp, #40]	; 0x28
    working_state[9] += initial_state[9];
 80003c0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80003c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80003c4:	4413      	add	r3, r2
 80003c6:	930b      	str	r3, [sp, #44]	; 0x2c
    working_state[10] += initial_state[10];
 80003c8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80003ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80003cc:	4413      	add	r3, r2
 80003ce:	930c      	str	r3, [sp, #48]	; 0x30
    working_state[11] += initial_state[11];
 80003d0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80003d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80003d4:	4413      	add	r3, r2
 80003d6:	930d      	str	r3, [sp, #52]	; 0x34
    working_state[12] += initial_state[12];
 80003d8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80003da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80003dc:	4413      	add	r3, r2
 80003de:	930e      	str	r3, [sp, #56]	; 0x38
    working_state[13] += initial_state[13];
 80003e0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80003e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80003e4:	4413      	add	r3, r2
 80003e6:	930f      	str	r3, [sp, #60]	; 0x3c
    working_state[14] += initial_state[14];
 80003e8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80003ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80003ec:	4413      	add	r3, r2
 80003ee:	9310      	str	r3, [sp, #64]	; 0x40
    working_state[15] += initial_state[15];
 80003f0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80003f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80003f4:	4413      	add	r3, r2
 80003f6:	9311      	str	r3, [sp, #68]	; 0x44
    *p32 = x;
#elif defined(UINT_UNALIGNED_STRUCT)
    mbedtls_uint32_unaligned_t *p32 = (mbedtls_uint32_unaligned_t *) p;
    p32->x = x;
#else
    memcpy(p, &x, sizeof(x));
 80003f8:	4604      	mov	r4, r0
 80003fa:	462b      	mov	r3, r5
 80003fc:	ad12      	add	r5, sp, #72	; 0x48
 80003fe:	4622      	mov	r2, r4
 8000400:	ca03      	ldmia	r2!, {r0, r1}
 8000402:	42aa      	cmp	r2, r5
 8000404:	6018      	str	r0, [r3, #0]
 8000406:	6059      	str	r1, [r3, #4]
 8000408:	4614      	mov	r4, r2
 800040a:	f103 0308 	add.w	r3, r3, #8
 800040e:	d1f6      	bne.n	80003fe <chacha20_block+0x12c>
        size_t offset = i * 4U;

        MBEDTLS_PUT_UINT32_LE(working_state[i], keystream, offset);
    }

    mbedtls_platform_zeroize(working_state, sizeof(working_state));
 8000410:	2140      	movs	r1, #64	; 0x40
 8000412:	a802      	add	r0, sp, #8
 8000414:	f7ff ff55 	bl	80002c2 <mbedtls_platform_zeroize>
}
 8000418:	b012      	add	sp, #72	; 0x48
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800041e <mbedtls_chacha20_init>:

void mbedtls_chacha20_init(mbedtls_chacha20_context *ctx)
{
 800041e:	b508      	push	{r3, lr}
    mbedtls_platform_zeroize(ctx->state, sizeof(ctx->state));
 8000420:	2140      	movs	r1, #64	; 0x40
{
 8000422:	4602      	mov	r2, r0
    mbedtls_platform_zeroize(ctx->state, sizeof(ctx->state));
 8000424:	f7ff ff4d 	bl	80002c2 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize(ctx->keystream8, sizeof(ctx->keystream8));
 8000428:	2140      	movs	r1, #64	; 0x40
 800042a:	1850      	adds	r0, r2, r1
 800042c:	f7ff ff49 	bl	80002c2 <mbedtls_platform_zeroize>

    /* Initially, there's no keystream bytes available */
    ctx->keystream_bytes_used = CHACHA20_BLOCK_SIZE_BYTES;
 8000430:	2340      	movs	r3, #64	; 0x40
 8000432:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 8000436:	bd08      	pop	{r3, pc}

08000438 <mbedtls_chacha20_free>:

void mbedtls_chacha20_free(mbedtls_chacha20_context *ctx)
{
    if (ctx != NULL) {
 8000438:	b110      	cbz	r0, 8000440 <mbedtls_chacha20_free+0x8>
        mbedtls_platform_zeroize(ctx, sizeof(mbedtls_chacha20_context));
 800043a:	2184      	movs	r1, #132	; 0x84
 800043c:	f7ff bf41 	b.w	80002c2 <mbedtls_platform_zeroize>
    }
}
 8000440:	4770      	bx	lr
 8000442:	0000      	movs	r0, r0

08000444 <mbedtls_chacha20_setkey>:
int mbedtls_chacha20_setkey(mbedtls_chacha20_context *ctx,
                            const unsigned char key[32])
{
    /* ChaCha20 constants - the string "expand 32-byte k" */
    ctx->state[0] = 0x61707865;
    ctx->state[1] = 0x3320646e;
 8000444:	4a0f      	ldr	r2, [pc, #60]	; (8000484 <mbedtls_chacha20_setkey+0x40>)
 8000446:	4b10      	ldr	r3, [pc, #64]	; (8000488 <mbedtls_chacha20_setkey+0x44>)
 8000448:	e9c0 2300 	strd	r2, r3, [r0]
    ctx->state[2] = 0x79622d32;
 800044c:	4b0f      	ldr	r3, [pc, #60]	; (800048c <mbedtls_chacha20_setkey+0x48>)
 800044e:	6083      	str	r3, [r0, #8]
    ctx->state[3] = 0x6b206574;
 8000450:	f1a3 6364 	sub.w	r3, r3, #239075328	; 0xe400000
 8000454:	f5a3 33e3 	sub.w	r3, r3, #116224	; 0x1c600
 8000458:	f5a3 73df 	sub.w	r3, r3, #446	; 0x1be
 800045c:	60c3      	str	r3, [r0, #12]
    memcpy(&r, p, sizeof(r));
 800045e:	680b      	ldr	r3, [r1, #0]

    /* Set key */
    ctx->state[4]  = MBEDTLS_GET_UINT32_LE(key, 0);
 8000460:	6103      	str	r3, [r0, #16]
 8000462:	684b      	ldr	r3, [r1, #4]
    ctx->state[5]  = MBEDTLS_GET_UINT32_LE(key, 4);
 8000464:	6143      	str	r3, [r0, #20]
 8000466:	688b      	ldr	r3, [r1, #8]
    ctx->state[6]  = MBEDTLS_GET_UINT32_LE(key, 8);
 8000468:	6183      	str	r3, [r0, #24]
 800046a:	68cb      	ldr	r3, [r1, #12]
    ctx->state[7]  = MBEDTLS_GET_UINT32_LE(key, 12);
 800046c:	61c3      	str	r3, [r0, #28]
 800046e:	690b      	ldr	r3, [r1, #16]
    ctx->state[8]  = MBEDTLS_GET_UINT32_LE(key, 16);
 8000470:	6203      	str	r3, [r0, #32]
 8000472:	694b      	ldr	r3, [r1, #20]
    ctx->state[9]  = MBEDTLS_GET_UINT32_LE(key, 20);
 8000474:	6243      	str	r3, [r0, #36]	; 0x24
 8000476:	698b      	ldr	r3, [r1, #24]
    ctx->state[10] = MBEDTLS_GET_UINT32_LE(key, 24);
 8000478:	6283      	str	r3, [r0, #40]	; 0x28
 800047a:	69cb      	ldr	r3, [r1, #28]
    ctx->state[11] = MBEDTLS_GET_UINT32_LE(key, 28);
 800047c:	62c3      	str	r3, [r0, #44]	; 0x2c

    return 0;
}
 800047e:	2000      	movs	r0, #0
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop
 8000484:	61707865 	.word	0x61707865
 8000488:	3320646e 	.word	0x3320646e
 800048c:	79622d32 	.word	0x79622d32

08000490 <mbedtls_chacha20_starts>:

int mbedtls_chacha20_starts(mbedtls_chacha20_context *ctx,
                            const unsigned char nonce[12],
                            uint32_t counter)
{
 8000490:	b510      	push	{r4, lr}
    /* Counter */
    ctx->state[12] = counter;
 8000492:	6302      	str	r2, [r0, #48]	; 0x30
 8000494:	680b      	ldr	r3, [r1, #0]

    /* Nonce */
    ctx->state[13] = MBEDTLS_GET_UINT32_LE(nonce, 0);
 8000496:	6343      	str	r3, [r0, #52]	; 0x34
 8000498:	684b      	ldr	r3, [r1, #4]
    ctx->state[14] = MBEDTLS_GET_UINT32_LE(nonce, 4);
 800049a:	6383      	str	r3, [r0, #56]	; 0x38
 800049c:	688b      	ldr	r3, [r1, #8]
    ctx->state[15] = MBEDTLS_GET_UINT32_LE(nonce, 8);
 800049e:	63c3      	str	r3, [r0, #60]	; 0x3c

    mbedtls_platform_zeroize(ctx->keystream8, sizeof(ctx->keystream8));
 80004a0:	2140      	movs	r1, #64	; 0x40
{
 80004a2:	4604      	mov	r4, r0
    mbedtls_platform_zeroize(ctx->keystream8, sizeof(ctx->keystream8));
 80004a4:	4408      	add	r0, r1
 80004a6:	f7ff ff0c 	bl	80002c2 <mbedtls_platform_zeroize>

    /* Initially, there's no keystream bytes available */
    ctx->keystream_bytes_used = CHACHA20_BLOCK_SIZE_BYTES;
 80004aa:	2340      	movs	r3, #64	; 0x40
 80004ac:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80

    return 0;
}
 80004b0:	2000      	movs	r0, #0
 80004b2:	bd10      	pop	{r4, pc}

080004b4 <mbedtls_chacha20_update>:

int mbedtls_chacha20_update(mbedtls_chacha20_context *ctx,
                            size_t size,
                            const unsigned char *input,
                            unsigned char *output)
{
 80004b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80004b8:	4604      	mov	r4, r0
 80004ba:	4690      	mov	r8, r2
 80004bc:	461f      	mov	r7, r3
    size_t offset = 0U;
 80004be:	2600      	movs	r6, #0

    /* Use leftover keystream bytes, if available */
    while (size > 0U && ctx->keystream_bytes_used < CHACHA20_BLOCK_SIZE_BYTES) {
 80004c0:	428e      	cmp	r6, r1
 80004c2:	eba1 0506 	sub.w	r5, r1, r6
 80004c6:	d02b      	beq.n	8000520 <mbedtls_chacha20_update+0x6c>
 80004c8:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80004cc:	2b3f      	cmp	r3, #63	; 0x3f
 80004ce:	d92b      	bls.n	8000528 <mbedtls_chacha20_update+0x74>
 80004d0:	eb08 0b06 	add.w	fp, r8, r6
 80004d4:	eb07 0a06 	add.w	sl, r7, r6
 80004d8:	46a9      	mov	r9, r5
    }

    /* Process full blocks */
    while (size >= CHACHA20_BLOCK_SIZE_BYTES) {
        /* Generate new keystream block and increment counter */
        chacha20_block(ctx->state, ctx->keystream8);
 80004da:	f104 0140 	add.w	r1, r4, #64	; 0x40
    while (size >= CHACHA20_BLOCK_SIZE_BYTES) {
 80004de:	f1b9 0f3f 	cmp.w	r9, #63	; 0x3f
 80004e2:	d82f      	bhi.n	8000544 <mbedtls_chacha20_update+0x90>
 80004e4:	ea4f 1995 	mov.w	r9, r5, lsr #6
 80004e8:	f06f 033f 	mvn.w	r3, #63	; 0x3f
 80004ec:	fb03 5909 	mla	r9, r3, r9, r5
 80004f0:	401d      	ands	r5, r3
 80004f2:	4435      	add	r5, r6
        offset += CHACHA20_BLOCK_SIZE_BYTES;
        size   -= CHACHA20_BLOCK_SIZE_BYTES;
    }

    /* Last (partial) block */
    if (size > 0U) {
 80004f4:	f1b9 0f00 	cmp.w	r9, #0
 80004f8:	d012      	beq.n	8000520 <mbedtls_chacha20_update+0x6c>
        /* Generate new keystream block and increment counter */
        chacha20_block(ctx->state, ctx->keystream8);
 80004fa:	f104 0640 	add.w	r6, r4, #64	; 0x40
 80004fe:	4631      	mov	r1, r6
 8000500:	4620      	mov	r0, r4
 8000502:	f7ff fee6 	bl	80002d2 <chacha20_block>
        ctx->state[CHACHA20_CTR_INDEX]++;
 8000506:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000508:	3301      	adds	r3, #1
 800050a:	6323      	str	r3, [r4, #48]	; 0x30

        mbedtls_xor(output + offset, input + offset, ctx->keystream8, size);
 800050c:	442f      	add	r7, r5
    if (n % 8 == 0) {
        return;
    }
#endif
#else
    for (; (i + 4) <= n; i += 4) {
 800050e:	2300      	movs	r3, #0
 8000510:	4445      	add	r5, r8
 8000512:	1d19      	adds	r1, r3, #4
 8000514:	4549      	cmp	r1, r9
 8000516:	d92f      	bls.n	8000578 <mbedtls_chacha20_update+0xc4>
        return;
    }
#endif
#endif
#endif
    for (; i < n; i++) {
 8000518:	454b      	cmp	r3, r9
 800051a:	d334      	bcc.n	8000586 <mbedtls_chacha20_update+0xd2>

        ctx->keystream_bytes_used = size;
 800051c:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80

    }

    return 0;
}
 8000520:	2000      	movs	r0, #0
 8000522:	b003      	add	sp, #12
 8000524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                         ^ ctx->keystream8[ctx->keystream_bytes_used];
 8000528:	4423      	add	r3, r4
        output[offset] = input[offset]
 800052a:	f818 2006 	ldrb.w	r2, [r8, r6]
 800052e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000532:	4053      	eors	r3, r2
 8000534:	55bb      	strb	r3, [r7, r6]
        ctx->keystream_bytes_used++;
 8000536:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800053a:	3301      	adds	r3, #1
 800053c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        offset++;
 8000540:	3601      	adds	r6, #1
        size--;
 8000542:	e7bd      	b.n	80004c0 <mbedtls_chacha20_update+0xc>
        chacha20_block(ctx->state, ctx->keystream8);
 8000544:	4620      	mov	r0, r4
 8000546:	9101      	str	r1, [sp, #4]
 8000548:	f7ff fec3 	bl	80002d2 <chacha20_block>
        ctx->state[CHACHA20_CTR_INDEX]++;
 800054c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800054e:	9901      	ldr	r1, [sp, #4]
 8000550:	3301      	adds	r3, #1
 8000552:	6323      	str	r3, [r4, #48]	; 0x30
 8000554:	2300      	movs	r3, #0
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 8000556:	18e2      	adds	r2, r4, r3
 8000558:	f85b 0003 	ldr.w	r0, [fp, r3]
 800055c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800055e:	4042      	eors	r2, r0
    memcpy(p, &x, sizeof(x));
 8000560:	f84a 2003 	str.w	r2, [sl, r3]
    for (; (i + 4) <= n; i += 4) {
 8000564:	3304      	adds	r3, #4
 8000566:	2b40      	cmp	r3, #64	; 0x40
 8000568:	d1f5      	bne.n	8000556 <mbedtls_chacha20_update+0xa2>
        size   -= CHACHA20_BLOCK_SIZE_BYTES;
 800056a:	f1a9 0940 	sub.w	r9, r9, #64	; 0x40
 800056e:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
 8000572:	f10a 0a40 	add.w	sl, sl, #64	; 0x40
 8000576:	e7b2      	b.n	80004de <mbedtls_chacha20_update+0x2a>
        uint32_t x = mbedtls_get_unaligned_uint32(a + i) ^ mbedtls_get_unaligned_uint32(b + i);
 8000578:	18e2      	adds	r2, r4, r3
 800057a:	58e8      	ldr	r0, [r5, r3]
 800057c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800057e:	4042      	eors	r2, r0
 8000580:	50fa      	str	r2, [r7, r3]
 8000582:	460b      	mov	r3, r1
 8000584:	e7c5      	b.n	8000512 <mbedtls_chacha20_update+0x5e>
        r[i] = a[i] ^ b[i];
 8000586:	5cf2      	ldrb	r2, [r6, r3]
 8000588:	5ce9      	ldrb	r1, [r5, r3]
 800058a:	404a      	eors	r2, r1
 800058c:	54fa      	strb	r2, [r7, r3]
    for (; i < n; i++) {
 800058e:	3301      	adds	r3, #1
 8000590:	e7c2      	b.n	8000518 <mbedtls_chacha20_update+0x64>

08000592 <mbedtls_chacha20_crypt>:
                           const unsigned char nonce[12],
                           uint32_t counter,
                           size_t data_len,
                           const unsigned char *input,
                           unsigned char *output)
{
 8000592:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000594:	b0a3      	sub	sp, #140	; 0x8c
 8000596:	4604      	mov	r4, r0
    mbedtls_chacha20_context ctx;
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;

    mbedtls_chacha20_init(&ctx);
 8000598:	a801      	add	r0, sp, #4
{
 800059a:	460e      	mov	r6, r1
 800059c:	4617      	mov	r7, r2
 800059e:	461d      	mov	r5, r3
    mbedtls_chacha20_init(&ctx);
 80005a0:	f7ff ff3d 	bl	800041e <mbedtls_chacha20_init>

    ret = mbedtls_chacha20_setkey(&ctx, key);
 80005a4:	4621      	mov	r1, r4
 80005a6:	a801      	add	r0, sp, #4
 80005a8:	f7ff ff4c 	bl	8000444 <mbedtls_chacha20_setkey>
    if (ret != 0) {
 80005ac:	4604      	mov	r4, r0
 80005ae:	b968      	cbnz	r0, 80005cc <mbedtls_chacha20_crypt+0x3a>
        goto cleanup;
    }

    ret = mbedtls_chacha20_starts(&ctx, nonce, counter);
 80005b0:	463a      	mov	r2, r7
 80005b2:	4631      	mov	r1, r6
 80005b4:	a801      	add	r0, sp, #4
 80005b6:	f7ff ff6b 	bl	8000490 <mbedtls_chacha20_starts>
    if (ret != 0) {
 80005ba:	4604      	mov	r4, r0
 80005bc:	b930      	cbnz	r0, 80005cc <mbedtls_chacha20_crypt+0x3a>
        goto cleanup;
    }

    ret = mbedtls_chacha20_update(&ctx, data_len, input, output);
 80005be:	e9dd 2328 	ldrd	r2, r3, [sp, #160]	; 0xa0
 80005c2:	4629      	mov	r1, r5
 80005c4:	a801      	add	r0, sp, #4
 80005c6:	f7ff ff75 	bl	80004b4 <mbedtls_chacha20_update>
 80005ca:	4604      	mov	r4, r0

cleanup:
    mbedtls_chacha20_free(&ctx);
 80005cc:	a801      	add	r0, sp, #4
 80005ce:	f7ff ff33 	bl	8000438 <mbedtls_chacha20_free>
    return ret;
}
 80005d2:	4620      	mov	r0, r4
 80005d4:	b023      	add	sp, #140	; 0x8c
 80005d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080005d8 <set_nonce>:
#define INPUT_SIZE 64
#define KEY_SIZE 32
#define NONCE_SIZE 12
#define COUNT_SIZE 4

uint8_t set_nonce(uint8_t* nc, uint8_t len){
 80005d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (len != NONCE_SIZE+COUNT_SIZE) return 1;
 80005dc:	2910      	cmp	r1, #16
uint8_t set_nonce(uint8_t* nc, uint8_t len){
 80005de:	b0ae      	sub	sp, #184	; 0xb8
 80005e0:	4603      	mov	r3, r0
    if (len != NONCE_SIZE+COUNT_SIZE) return 1;
 80005e2:	d154      	bne.n	800068e <set_nonce+0xb6>
    uint8_t encrypt[INPUT_SIZE];
    uint8_t key[KEY_SIZE] = {
 80005e4:	4a2b      	ldr	r2, [pc, #172]	; (8000694 <set_nonce+0xbc>)
 80005e6:	ac06      	add	r4, sp, #24
 80005e8:	f102 0720 	add.w	r7, r2, #32
 80005ec:	4626      	mov	r6, r4
 80005ee:	6810      	ldr	r0, [r2, #0]
 80005f0:	6851      	ldr	r1, [r2, #4]
 80005f2:	4625      	mov	r5, r4
 80005f4:	c503      	stmia	r5!, {r0, r1}
 80005f6:	3208      	adds	r2, #8
 80005f8:	42ba      	cmp	r2, r7
 80005fa:	462c      	mov	r4, r5
 80005fc:	d1f7      	bne.n	80005ee <set_nonce+0x16>
    /*uint8_t nonce[NONCE_SIZE] = {
            nc[0], nc[1], nc[2], nc[3],
            nc[4], nc[5], nc[6], nc[7],
            nc[8], nc[9], nc[10], nc[11]
    };*/
    uint8_t nonce[NONCE_SIZE] = {
 80005fe:	791a      	ldrb	r2, [r3, #4]
 8000600:	f88d 200c 	strb.w	r2, [sp, #12]
 8000604:	795a      	ldrb	r2, [r3, #5]
 8000606:	f88d 200d 	strb.w	r2, [sp, #13]
 800060a:	799a      	ldrb	r2, [r3, #6]
 800060c:	f88d 200e 	strb.w	r2, [sp, #14]
 8000610:	79da      	ldrb	r2, [r3, #7]
 8000612:	f88d 200f 	strb.w	r2, [sp, #15]
 8000616:	7a1a      	ldrb	r2, [r3, #8]
 8000618:	f88d 2010 	strb.w	r2, [sp, #16]
 800061c:	7a5a      	ldrb	r2, [r3, #9]
 800061e:	f88d 2011 	strb.w	r2, [sp, #17]
 8000622:	7a9a      	ldrb	r2, [r3, #10]
 8000624:	f88d 2012 	strb.w	r2, [sp, #18]
 8000628:	7ada      	ldrb	r2, [r3, #11]
 800062a:	f88d 2013 	strb.w	r2, [sp, #19]
 800062e:	7b1a      	ldrb	r2, [r3, #12]
 8000630:	f88d 2014 	strb.w	r2, [sp, #20]
 8000634:	7b5a      	ldrb	r2, [r3, #13]
 8000636:	f88d 2015 	strb.w	r2, [sp, #21]
 800063a:	7b9a      	ldrb	r2, [r3, #14]
 800063c:	681f      	ldr	r7, [r3, #0]
 800063e:	f88d 2016 	strb.w	r2, [sp, #22]
 8000642:	7bda      	ldrb	r2, [r3, #15]
    // https://forum.arduino.cc/t/convert-4-uint8_t-into-one-uint32_t/577243
    //uint32_t counter = nc[12] | (nc[13] << 8) | (nc[14] << 16) | (nc[15] << 24);
    uint32_t counter = nc[0] | (nc[1] << 8) | (nc[2] << 16) | (nc[3] << 24);

    // Hello from Chipwhispererer, I'm only here to get encrypted and yo(u?)
    uint8_t input[INPUT_SIZE] = {
 8000644:	4b14      	ldr	r3, [pc, #80]	; (8000698 <set_nonce+0xc0>)
    uint8_t nonce[NONCE_SIZE] = {
 8000646:	f88d 2017 	strb.w	r2, [sp, #23]
    uint8_t input[INPUT_SIZE] = {
 800064a:	ac1e      	add	r4, sp, #120	; 0x78
 800064c:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8000650:	46a0      	mov	r8, r4
 8000652:	6818      	ldr	r0, [r3, #0]
 8000654:	6859      	ldr	r1, [r3, #4]
 8000656:	4625      	mov	r5, r4
 8000658:	c503      	stmia	r5!, {r0, r1}
 800065a:	3308      	adds	r3, #8
 800065c:	4293      	cmp	r3, r2
 800065e:	462c      	mov	r4, r5
 8000660:	d1f7      	bne.n	8000652 <set_nonce+0x7a>
            //0x75, 0x3f
    };

    // MBEDTLS
    trigger_high();
    mbedtls_chacha20_crypt(key, nonce, counter, INPUT_SIZE, input, encrypt);    // encrypt
 8000662:	ac0e      	add	r4, sp, #56	; 0x38
    trigger_high();
 8000664:	f000 f9fc 	bl	8000a60 <trigger_high>
    mbedtls_chacha20_crypt(key, nonce, counter, INPUT_SIZE, input, encrypt);    // encrypt
 8000668:	2340      	movs	r3, #64	; 0x40
 800066a:	463a      	mov	r2, r7
 800066c:	a903      	add	r1, sp, #12
 800066e:	e9cd 8400 	strd	r8, r4, [sp]
 8000672:	4630      	mov	r0, r6
 8000674:	f7ff ff8d 	bl	8000592 <mbedtls_chacha20_crypt>
    trigger_low();
 8000678:	f000 f9f9 	bl	8000a6e <trigger_low>

    // put encrypted/decrypted to simple serial
    simpleserial_put('r', INPUT_SIZE, encrypt);
 800067c:	2072      	movs	r0, #114	; 0x72
 800067e:	4622      	mov	r2, r4
 8000680:	2140      	movs	r1, #64	; 0x40
 8000682:	f000 f88d 	bl	80007a0 <simpleserial_put>

    return 0;
 8000686:	2000      	movs	r0, #0
}
 8000688:	b02e      	add	sp, #184	; 0xb8
 800068a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (len != NONCE_SIZE+COUNT_SIZE) return 1;
 800068e:	2001      	movs	r0, #1
 8000690:	e7fa      	b.n	8000688 <set_nonce+0xb0>
 8000692:	bf00      	nop
 8000694:	08001774 	.word	0x08001774
 8000698:	080017a7 	.word	0x080017a7

0800069c <main>:


int main(void) {
 800069c:	b508      	push	{r3, lr}
    platform_init();
 800069e:	f000 f93d 	bl	800091c <platform_init>
    init_uart();
 80006a2:	f000 f97b 	bl	800099c <init_uart>
    trigger_setup();
 80006a6:	f000 f9b7 	bl	8000a18 <trigger_setup>

    simpleserial_init();
 80006aa:	f000 f863 	bl	8000774 <simpleserial_init>
    // 12 Bytes for nonce, 4 Bytes for counter
    simpleserial_addcmd('p', 16, set_nonce);
 80006ae:	4a04      	ldr	r2, [pc, #16]	; (80006c0 <main+0x24>)
 80006b0:	2110      	movs	r1, #16
 80006b2:	2070      	movs	r0, #112	; 0x70
 80006b4:	f000 f85a 	bl	800076c <simpleserial_addcmd>

    while(1)
        simpleserial_get();
 80006b8:	f000 f8cc 	bl	8000854 <simpleserial_get>
    while(1)
 80006bc:	e7fc      	b.n	80006b8 <main+0x1c>
 80006be:	bf00      	nop
 80006c0:	080005d9 	.word	0x080005d9

080006c4 <check_version>:
// Callback function for "v" command.
// This can exist in v1.0 as long as we don't actually send back an ack ("z")
uint8_t check_version(uint8_t *v, uint8_t len)
{
	return SS_VER;
}
 80006c4:	2001      	movs	r0, #1
 80006c6:	4770      	bx	lr

080006c8 <hex_decode>:
	'0', '1', '2', '3', '4', '5', '6', '7',
	'8', '9', 'A', 'B', 'C', 'D', 'E', 'F'
};

int hex_decode(int len, char* ascii_buf, uint8_t* data_buf)
{
 80006c8:	b5f0      	push	{r4, r5, r6, r7, lr}
	for(int i = 0; i < len; i++)
 80006ca:	2500      	movs	r5, #0
	{
		char n_hi = ascii_buf[2*i];
		char n_lo = ascii_buf[2*i+1];
 80006cc:	1c4f      	adds	r7, r1, #1
	for(int i = 0; i < len; i++)
 80006ce:	4285      	cmp	r5, r0
 80006d0:	db01      	blt.n	80006d6 <hex_decode+0xe>
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
		else
			return 1;
	}

	return 0;
 80006d2:	2000      	movs	r0, #0
 80006d4:	e021      	b.n	800071a <hex_decode+0x52>
		char n_lo = ascii_buf[2*i+1];
 80006d6:	f817 4015 	ldrb.w	r4, [r7, r5, lsl #1]
		char n_hi = ascii_buf[2*i];
 80006da:	f811 3015 	ldrb.w	r3, [r1, r5, lsl #1]
		if(n_lo >= '0' && n_lo <= '9')
 80006de:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80006e2:	b2f6      	uxtb	r6, r6
 80006e4:	2e09      	cmp	r6, #9
 80006e6:	d80c      	bhi.n	8000702 <hex_decode+0x3a>
			data_buf[i] = n_lo - '0';
 80006e8:	7016      	strb	r6, [r2, #0]
		if(n_hi >= '0' && n_hi <= '9')
 80006ea:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
 80006ee:	b2e6      	uxtb	r6, r4
 80006f0:	2e09      	cmp	r6, #9
 80006f2:	d815      	bhi.n	8000720 <hex_decode+0x58>
			data_buf[i] |= (n_hi - 'A' + 10) << 4;
 80006f4:	7813      	ldrb	r3, [r2, #0]
 80006f6:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
 80006fa:	7013      	strb	r3, [r2, #0]
	for(int i = 0; i < len; i++)
 80006fc:	3501      	adds	r5, #1
 80006fe:	3201      	adds	r2, #1
 8000700:	e7e5      	b.n	80006ce <hex_decode+0x6>
		else if(n_lo >= 'A' && n_lo <= 'F')
 8000702:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8000706:	2e05      	cmp	r6, #5
 8000708:	d802      	bhi.n	8000710 <hex_decode+0x48>
			data_buf[i] = n_lo - 'A' + 10;
 800070a:	3c37      	subs	r4, #55	; 0x37
			data_buf[i] = n_lo - 'a' + 10;
 800070c:	7014      	strb	r4, [r2, #0]
 800070e:	e7ec      	b.n	80006ea <hex_decode+0x22>
		else if(n_lo >= 'a' && n_lo <= 'f')
 8000710:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8000714:	2e05      	cmp	r6, #5
 8000716:	d901      	bls.n	800071c <hex_decode+0x54>
			return 1;
 8000718:	2001      	movs	r0, #1
}
 800071a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			data_buf[i] = n_lo - 'a' + 10;
 800071c:	3c57      	subs	r4, #87	; 0x57
 800071e:	e7f5      	b.n	800070c <hex_decode+0x44>
		else if(n_hi >= 'A' && n_hi <= 'F')
 8000720:	f1a3 0441 	sub.w	r4, r3, #65	; 0x41
 8000724:	2c05      	cmp	r4, #5
 8000726:	d802      	bhi.n	800072e <hex_decode+0x66>
			data_buf[i] |= (n_hi - 'A' + 10) << 4;
 8000728:	f1a3 0437 	sub.w	r4, r3, #55	; 0x37
 800072c:	e7e2      	b.n	80006f4 <hex_decode+0x2c>
		else if(n_hi >= 'a' && n_hi <= 'f')
 800072e:	f1a3 0461 	sub.w	r4, r3, #97	; 0x61
 8000732:	2c05      	cmp	r4, #5
 8000734:	d8f0      	bhi.n	8000718 <hex_decode+0x50>
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
 8000736:	7814      	ldrb	r4, [r2, #0]
 8000738:	3b57      	subs	r3, #87	; 0x57
 800073a:	ea44 1303 	orr.w	r3, r4, r3, lsl #4
 800073e:	e7dc      	b.n	80006fa <hex_decode+0x32>

08000740 <simpleserial_addcmd_flags>:
{
	return simpleserial_addcmd_flags(c, len, fp, CMD_FLAG_NONE);
}

int simpleserial_addcmd_flags(char c, unsigned int len, uint8_t (*fp)(uint8_t*, uint8_t), uint8_t fl)
{
 8000740:	b570      	push	{r4, r5, r6, lr}
	if(num_commands >= MAX_SS_CMDS)
 8000742:	4e09      	ldr	r6, [pc, #36]	; (8000768 <simpleserial_addcmd_flags+0x28>)
 8000744:	6834      	ldr	r4, [r6, #0]
 8000746:	2c0f      	cmp	r4, #15
 8000748:	dc0b      	bgt.n	8000762 <simpleserial_addcmd_flags+0x22>
		return 1;

	if(len >= MAX_SS_LEN)
 800074a:	29ff      	cmp	r1, #255	; 0xff
 800074c:	d809      	bhi.n	8000762 <simpleserial_addcmd_flags+0x22>
		return 1;

	commands[num_commands].c   = c;
 800074e:	eb06 1504 	add.w	r5, r6, r4, lsl #4
	commands[num_commands].len = len;
	commands[num_commands].fp  = fp;
 8000752:	e9c5 1202 	strd	r1, r2, [r5, #8]
	commands[num_commands].flags = fl;
	num_commands++;
 8000756:	3401      	adds	r4, #1
	commands[num_commands].c   = c;
 8000758:	7128      	strb	r0, [r5, #4]
	commands[num_commands].flags = fl;
 800075a:	742b      	strb	r3, [r5, #16]
	num_commands++;
 800075c:	6034      	str	r4, [r6, #0]

	return 0;
 800075e:	2000      	movs	r0, #0
}
 8000760:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
 8000762:	2001      	movs	r0, #1
 8000764:	e7fc      	b.n	8000760 <simpleserial_addcmd_flags+0x20>
 8000766:	bf00      	nop
 8000768:	2000001c 	.word	0x2000001c

0800076c <simpleserial_addcmd>:
	return simpleserial_addcmd_flags(c, len, fp, CMD_FLAG_NONE);
 800076c:	2300      	movs	r3, #0
 800076e:	f7ff bfe7 	b.w	8000740 <simpleserial_addcmd_flags>
 8000772:	0000      	movs	r0, r0

08000774 <simpleserial_init>:
{
 8000774:	b508      	push	{r3, lr}
	simpleserial_addcmd('v', 0, check_version);
 8000776:	4a07      	ldr	r2, [pc, #28]	; (8000794 <simpleserial_init+0x20>)
 8000778:	2100      	movs	r1, #0
 800077a:	2076      	movs	r0, #118	; 0x76
 800077c:	f7ff fff6 	bl	800076c <simpleserial_addcmd>
    simpleserial_addcmd('w', 0, ss_get_commands);
 8000780:	4a05      	ldr	r2, [pc, #20]	; (8000798 <simpleserial_init+0x24>)
 8000782:	2077      	movs	r0, #119	; 0x77
 8000784:	f7ff fff2 	bl	800076c <simpleserial_addcmd>
}
 8000788:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    simpleserial_addcmd('y', 0, ss_num_commands);
 800078c:	4a03      	ldr	r2, [pc, #12]	; (800079c <simpleserial_init+0x28>)
 800078e:	2079      	movs	r0, #121	; 0x79
 8000790:	f7ff bfec 	b.w	800076c <simpleserial_addcmd>
 8000794:	080006c5 	.word	0x080006c5
 8000798:	08000805 	.word	0x08000805
 800079c:	080007e1 	.word	0x080007e1

080007a0 <simpleserial_put>:
	simpleserial_put('z', 1, ret);
#endif
}

void simpleserial_put(char c, uint8_t size, uint8_t* output)
{
 80007a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007a2:	4614      	mov	r4, r2
 80007a4:	460e      	mov	r6, r1
	// Write first character
	putch(c);
 80007a6:	f000 f983 	bl	8000ab0 <putch>

	// Write each byte as two nibbles
	for(int i = 0; i < size; i++)
	{
		putch(hex_lookup[output[i] >> 4 ]);
 80007aa:	4f0c      	ldr	r7, [pc, #48]	; (80007dc <simpleserial_put+0x3c>)
 80007ac:	1e65      	subs	r5, r4, #1
	for(int i = 0; i < size; i++)
 80007ae:	f1c4 0401 	rsb	r4, r4, #1
 80007b2:	1963      	adds	r3, r4, r5
 80007b4:	429e      	cmp	r6, r3
 80007b6:	dc04      	bgt.n	80007c2 <simpleserial_put+0x22>
		putch(hex_lookup[output[i] & 0xF]);
	}

	// Write trailing '\n'
	putch('\n');
}
 80007b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	putch('\n');
 80007bc:	200a      	movs	r0, #10
 80007be:	f000 b977 	b.w	8000ab0 <putch>
		putch(hex_lookup[output[i] >> 4 ]);
 80007c2:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80007c6:	091b      	lsrs	r3, r3, #4
 80007c8:	5cf8      	ldrb	r0, [r7, r3]
 80007ca:	f000 f971 	bl	8000ab0 <putch>
		putch(hex_lookup[output[i] & 0xF]);
 80007ce:	782b      	ldrb	r3, [r5, #0]
 80007d0:	f003 030f 	and.w	r3, r3, #15
 80007d4:	5cf8      	ldrb	r0, [r7, r3]
 80007d6:	f000 f96b 	bl	8000ab0 <putch>
	for(int i = 0; i < size; i++)
 80007da:	e7ea      	b.n	80007b2 <simpleserial_put+0x12>
 80007dc:	08001794 	.word	0x08001794

080007e0 <ss_num_commands>:
{
 80007e0:	b507      	push	{r0, r1, r2, lr}
    uint8_t ncmds = num_commands & 0xFF;
 80007e2:	4b07      	ldr	r3, [pc, #28]	; (8000800 <ss_num_commands+0x20>)
    simpleserial_put('r', 0x01, &ncmds);
 80007e4:	f10d 0207 	add.w	r2, sp, #7
    uint8_t ncmds = num_commands & 0xFF;
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	f88d 3007 	strb.w	r3, [sp, #7]
    simpleserial_put('r', 0x01, &ncmds);
 80007ee:	2101      	movs	r1, #1
 80007f0:	2072      	movs	r0, #114	; 0x72
 80007f2:	f7ff ffd5 	bl	80007a0 <simpleserial_put>
}
 80007f6:	2000      	movs	r0, #0
 80007f8:	b003      	add	sp, #12
 80007fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80007fe:	bf00      	nop
 8000800:	2000001c 	.word	0x2000001c

08000804 <ss_get_commands>:
{
 8000804:	b570      	push	{r4, r5, r6, lr}
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8000806:	4c12      	ldr	r4, [pc, #72]	; (8000850 <ss_get_commands+0x4c>)
 8000808:	6821      	ldr	r1, [r4, #0]
{
 800080a:	b08c      	sub	sp, #48	; 0x30
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 800080c:	b2cd      	uxtb	r5, r1
 800080e:	2000      	movs	r0, #0
 8000810:	b2c3      	uxtb	r3, r0
 8000812:	42ab      	cmp	r3, r5
 8000814:	f100 0001 	add.w	r0, r0, #1
 8000818:	db09      	blt.n	800082e <ss_get_commands+0x2a>
    simpleserial_put('r', num_commands * 0x03, (void *) repr_cmd_buf);
 800081a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800081e:	466a      	mov	r2, sp
 8000820:	b2c9      	uxtb	r1, r1
 8000822:	2072      	movs	r0, #114	; 0x72
 8000824:	f7ff ffbc 	bl	80007a0 <simpleserial_put>
}
 8000828:	2000      	movs	r0, #0
 800082a:	b00c      	add	sp, #48	; 0x30
 800082c:	bd70      	pop	{r4, r5, r6, pc}
        repr_cmd_buf[i].c = commands[i].c;
 800082e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8000832:	3230      	adds	r2, #48	; 0x30
 8000834:	eb04 1303 	add.w	r3, r4, r3, lsl #4
 8000838:	446a      	add	r2, sp
 800083a:	791e      	ldrb	r6, [r3, #4]
 800083c:	f802 6c30 	strb.w	r6, [r2, #-48]
        repr_cmd_buf[i].len = commands[i].len;
 8000840:	689e      	ldr	r6, [r3, #8]
        repr_cmd_buf[i].flags = commands[i].flags;
 8000842:	7c1b      	ldrb	r3, [r3, #16]
        repr_cmd_buf[i].len = commands[i].len;
 8000844:	f802 6c2f 	strb.w	r6, [r2, #-47]
        repr_cmd_buf[i].flags = commands[i].flags;
 8000848:	f802 3c2e 	strb.w	r3, [r2, #-46]
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 800084c:	e7e0      	b.n	8000810 <ss_get_commands+0xc>
 800084e:	bf00      	nop
 8000850:	2000001c 	.word	0x2000001c

08000854 <simpleserial_get>:
{
 8000854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for(cmd = 0; cmd < num_commands; cmd++)
 8000858:	4d2f      	ldr	r5, [pc, #188]	; (8000918 <simpleserial_get+0xc4>)
{
 800085a:	f5ad 7d42 	sub.w	sp, sp, #776	; 0x308
	c = getch();
 800085e:	f000 f90d 	bl	8000a7c <getch>
	for(cmd = 0; cmd < num_commands; cmd++)
 8000862:	462a      	mov	r2, r5
 8000864:	2300      	movs	r3, #0
 8000866:	f852 1b04 	ldr.w	r1, [r2], #4
 800086a:	4299      	cmp	r1, r3
 800086c:	dc04      	bgt.n	8000878 <simpleserial_get+0x24>
	if(cmd == num_commands)
 800086e:	d107      	bne.n	8000880 <simpleserial_get+0x2c>
}
 8000870:	f50d 7d42 	add.w	sp, sp, #776	; 0x308
 8000874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if(commands[cmd].c == c)
 8000878:	011c      	lsls	r4, r3, #4
 800087a:	5ca4      	ldrb	r4, [r4, r2]
 800087c:	4284      	cmp	r4, r0
 800087e:	d13e      	bne.n	80008fe <simpleserial_get+0xaa>
	if ((commands[cmd].flags & CMD_FLAG_LEN) != 0)
 8000880:	eb05 1403 	add.w	r4, r5, r3, lsl #4
 8000884:	011e      	lsls	r6, r3, #4
 8000886:	7c23      	ldrb	r3, [r4, #16]
 8000888:	07db      	lsls	r3, r3, #31
 800088a:	d514      	bpl.n	80008b6 <simpleserial_get+0x62>
		uint8_t l = 0;
 800088c:	2300      	movs	r3, #0
 800088e:	f88d 3008 	strb.w	r3, [sp, #8]
		buff[0] = getch();
 8000892:	f000 f8f3 	bl	8000a7c <getch>
 8000896:	f88d 0108 	strb.w	r0, [sp, #264]	; 0x108
		buff[1] = getch();
 800089a:	f000 f8ef 	bl	8000a7c <getch>
		if (hex_decode(1, buff, &l))
 800089e:	aa02      	add	r2, sp, #8
		buff[1] = getch();
 80008a0:	f88d 0109 	strb.w	r0, [sp, #265]	; 0x109
		if (hex_decode(1, buff, &l))
 80008a4:	a942      	add	r1, sp, #264	; 0x108
 80008a6:	2001      	movs	r0, #1
 80008a8:	f7ff ff0e 	bl	80006c8 <hex_decode>
 80008ac:	2800      	cmp	r0, #0
 80008ae:	d1df      	bne.n	8000870 <simpleserial_get+0x1c>
		commands[cmd].len = l;
 80008b0:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80008b4:	60a3      	str	r3, [r4, #8]
 80008b6:	af42      	add	r7, sp, #264	; 0x108
	for(cmd = 0; cmd < num_commands; cmd++)
 80008b8:	2400      	movs	r4, #0
	for(int i = 0; i < 2*commands[cmd].len; i++)
 80008ba:	eb05 0806 	add.w	r8, r5, r6
 80008be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80008c2:	ebb4 0f43 	cmp.w	r4, r3, lsl #1
 80008c6:	d31c      	bcc.n	8000902 <simpleserial_get+0xae>
	c = getch();
 80008c8:	f000 f8d8 	bl	8000a7c <getch>
	if(c != '\n' && c != '\r')
 80008cc:	280a      	cmp	r0, #10
 80008ce:	d001      	beq.n	80008d4 <simpleserial_get+0x80>
 80008d0:	280d      	cmp	r0, #13
 80008d2:	d1cd      	bne.n	8000870 <simpleserial_get+0x1c>
	if(hex_decode(commands[cmd].len, ascii_buf, data_buf))
 80008d4:	4435      	add	r5, r6
 80008d6:	aa02      	add	r2, sp, #8
 80008d8:	68ac      	ldr	r4, [r5, #8]
 80008da:	a942      	add	r1, sp, #264	; 0x108
 80008dc:	4620      	mov	r0, r4
 80008de:	f7ff fef3 	bl	80006c8 <hex_decode>
 80008e2:	2800      	cmp	r0, #0
 80008e4:	d1c4      	bne.n	8000870 <simpleserial_get+0x1c>
	ret[0] = commands[cmd].fp(data_buf, commands[cmd].len);
 80008e6:	b2e1      	uxtb	r1, r4
 80008e8:	68eb      	ldr	r3, [r5, #12]
 80008ea:	a802      	add	r0, sp, #8
 80008ec:	4798      	blx	r3
	simpleserial_put('z', 1, ret);
 80008ee:	aa01      	add	r2, sp, #4
	ret[0] = commands[cmd].fp(data_buf, commands[cmd].len);
 80008f0:	f88d 0004 	strb.w	r0, [sp, #4]
	simpleserial_put('z', 1, ret);
 80008f4:	2101      	movs	r1, #1
 80008f6:	207a      	movs	r0, #122	; 0x7a
 80008f8:	f7ff ff52 	bl	80007a0 <simpleserial_put>
 80008fc:	e7b8      	b.n	8000870 <simpleserial_get+0x1c>
	for(cmd = 0; cmd < num_commands; cmd++)
 80008fe:	3301      	adds	r3, #1
 8000900:	e7b3      	b.n	800086a <simpleserial_get+0x16>
		c = getch();
 8000902:	f000 f8bb 	bl	8000a7c <getch>
		if(c == '\n' || c == '\r')
 8000906:	280a      	cmp	r0, #10
 8000908:	d0b2      	beq.n	8000870 <simpleserial_get+0x1c>
 800090a:	280d      	cmp	r0, #13
 800090c:	d0b0      	beq.n	8000870 <simpleserial_get+0x1c>
		ascii_buf[i] = c;
 800090e:	f807 0b01 	strb.w	r0, [r7], #1
	for(int i = 0; i < 2*commands[cmd].len; i++)
 8000912:	3401      	adds	r4, #1
 8000914:	e7d3      	b.n	80008be <simpleserial_get+0x6a>
 8000916:	bf00      	nop
 8000918:	2000001c 	.word	0x2000001c

0800091c <platform_init>:

UART_HandleTypeDef UartHandle;


void platform_init(void)
{
 800091c:	b570      	push	{r4, r5, r6, lr}
 800091e:	b096      	sub	sp, #88	; 0x58
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
  #else
     RCC_OscInitTypeDef RCC_OscInitStruct;
     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
     RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 8000920:	2400      	movs	r4, #0
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 8000922:	2603      	movs	r6, #3
 8000924:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
     RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
     HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000928:	a80c      	add	r0, sp, #48	; 0x30

     RCC_ClkInitTypeDef RCC_ClkInitStruct;
     RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 800092a:	2501      	movs	r5, #1
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 800092c:	e9cd 630c 	strd	r6, r3, [sp, #48]	; 0x30
     RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 8000930:	9410      	str	r4, [sp, #64]	; 0x40
     RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
 8000932:	9414      	str	r4, [sp, #80]	; 0x50
     HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000934:	f000 f8d4 	bl	8000ae0 <HAL_RCC_OscConfig>
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 8000938:	230f      	movs	r3, #15
     RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
     uint32_t flash_latency = 0;
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
 800093a:	4621      	mov	r1, r4
 800093c:	a802      	add	r0, sp, #8
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 800093e:	e9cd 3502 	strd	r3, r5, [sp, #8]
     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000942:	e9cd 4404 	strd	r4, r4, [sp, #16]
     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000946:	9406      	str	r4, [sp, #24]
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
 8000948:	f000 fb38 	bl	8000fbc <HAL_RCC_ClockConfig>




#if (PLATFORM==CWLITEARM)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800094c:	4b11      	ldr	r3, [pc, #68]	; (8000994 <platform_init+0x78>)
 800094e:	695a      	ldr	r2, [r3, #20]
 8000950:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000954:	615a      	str	r2, [r3, #20]
 8000956:	695b      	ldr	r3, [r3, #20]
  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_13 | GPIO_PIN_14;
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
  GpioInit.Pull      = GPIO_NOPULL;
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000958:	e9cd 4609 	strd	r4, r6, [sp, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800095c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8000960:	4c0d      	ldr	r4, [pc, #52]	; (8000998 <platform_init+0x7c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000962:	9301      	str	r3, [sp, #4]
 8000964:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8000966:	a907      	add	r1, sp, #28
  GpioInit.Pin       = GPIO_PIN_13 | GPIO_PIN_14;
 8000968:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
  HAL_GPIO_Init(GPIOC, &GpioInit);
 800096c:	4620      	mov	r0, r4
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 800096e:	e9cd 3507 	strd	r3, r5, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8000972:	f000 fbc9 	bl	8001108 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 8000976:	462a      	mov	r2, r5
 8000978:	4620      	mov	r0, r4
 800097a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800097e:	f000 fc87 	bl	8001290 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 8000982:	462a      	mov	r2, r5
 8000984:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000988:	4620      	mov	r0, r4
 800098a:	f000 fc81 	bl	8001290 <HAL_GPIO_WritePin>
#endif
}
 800098e:	b016      	add	sp, #88	; 0x58
 8000990:	bd70      	pop	{r4, r5, r6, pc}
 8000992:	bf00      	nop
 8000994:	40021000 	.word	0x40021000
 8000998:	48000800 	.word	0x48000800

0800099c <init_uart>:

void init_uart(void)
{
 800099c:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
  GpioInit.Mode      = GPIO_MODE_AF_PP;
 800099e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
{
 80009a2:	b088      	sub	sp, #32
  GpioInit.Mode      = GPIO_MODE_AF_PP;
 80009a4:	2302      	movs	r3, #2
 80009a6:	e9cd 2303 	strd	r2, r3, [sp, #12]
  GpioInit.Pull      = GPIO_PULLUP;
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 80009aa:	2101      	movs	r1, #1
 80009ac:	2303      	movs	r3, #3
 80009ae:	e9cd 1305 	strd	r1, r3, [sp, #20]
  GpioInit.Alternate = GPIO_AF7_USART1;
  __GPIOA_CLK_ENABLE();
 80009b2:	4c16      	ldr	r4, [pc, #88]	; (8000a0c <init_uart+0x70>)
  GpioInit.Alternate = GPIO_AF7_USART1;
 80009b4:	2307      	movs	r3, #7
 80009b6:	9307      	str	r3, [sp, #28]
  __GPIOA_CLK_ENABLE();
 80009b8:	6963      	ldr	r3, [r4, #20]
 80009ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009be:	6163      	str	r3, [r4, #20]
 80009c0:	6963      	ldr	r3, [r4, #20]
 80009c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009c6:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 80009c8:	a903      	add	r1, sp, #12
 80009ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __GPIOA_CLK_ENABLE();
 80009ce:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 80009d0:	f000 fb9a 	bl	8001108 <HAL_GPIO_Init>

  UartHandle.Instance        = USART1;
 80009d4:	480e      	ldr	r0, [pc, #56]	; (8000a10 <init_uart+0x74>)
  #if SS_VER==SS_VER_2_1
  UartHandle.Init.BaudRate   = 230400;
  #else
  UartHandle.Init.BaudRate   = 38400;
 80009d6:	f8df c03c 	ldr.w	ip, [pc, #60]	; 8000a14 <init_uart+0x78>
 80009da:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 80009de:	e9c0 c300 	strd	ip, r3, [r0]
  #endif
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 80009e2:	2300      	movs	r3, #0
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 80009e4:	e9c0 3302 	strd	r3, r3, [r0, #8]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 80009e8:	6103      	str	r3, [r0, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 80009ea:	6183      	str	r3, [r0, #24]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 80009ec:	230c      	movs	r3, #12
 80009ee:	6143      	str	r3, [r0, #20]
  __USART1_CLK_ENABLE();
 80009f0:	69a3      	ldr	r3, [r4, #24]
 80009f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009f6:	61a3      	str	r3, [r4, #24]
 80009f8:	69a3      	ldr	r3, [r4, #24]
 80009fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009fe:	9302      	str	r3, [sp, #8]
 8000a00:	9b02      	ldr	r3, [sp, #8]
  HAL_UART_Init(&UartHandle);
 8000a02:	f000 fd99 	bl	8001538 <HAL_UART_Init>
}
 8000a06:	b008      	add	sp, #32
 8000a08:	bd10      	pop	{r4, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40021000 	.word	0x40021000
 8000a10:	20000120 	.word	0x20000120
 8000a14:	40013800 	.word	0x40013800

08000a18 <trigger_setup>:

void trigger_setup(void)
{
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a18:	4b10      	ldr	r3, [pc, #64]	; (8000a5c <trigger_setup+0x44>)
{
 8000a1a:	b530      	push	{r4, r5, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1c:	695a      	ldr	r2, [r3, #20]
 8000a1e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000a22:	615a      	str	r2, [r3, #20]
 8000a24:	695b      	ldr	r3, [r3, #20]
{
 8000a26:	b087      	sub	sp, #28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a2c:	9300      	str	r3, [sp, #0]
 8000a2e:	9b00      	ldr	r3, [sp, #0]

  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_12;
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8000a30:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8000a34:	2301      	movs	r3, #1
 8000a36:	e9cd 4301 	strd	r4, r3, [sp, #4]
  GpioInit.Pull      = GPIO_NOPULL;
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000a3a:	2500      	movs	r5, #0
 8000a3c:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8000a3e:	a901      	add	r1, sp, #4
 8000a40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000a44:	e9cd 5303 	strd	r5, r3, [sp, #12]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8000a48:	f000 fb5e 	bl	8001108 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 8000a4c:	462a      	mov	r2, r5
 8000a4e:	4621      	mov	r1, r4
 8000a50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a54:	f000 fc1c 	bl	8001290 <HAL_GPIO_WritePin>
}
 8000a58:	b007      	add	sp, #28
 8000a5a:	bd30      	pop	{r4, r5, pc}
 8000a5c:	40021000 	.word	0x40021000

08000a60 <trigger_high>:

void trigger_high(void)
{
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, SET);
 8000a60:	2201      	movs	r2, #1
 8000a62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a6a:	f000 bc11 	b.w	8001290 <HAL_GPIO_WritePin>

08000a6e <trigger_low>:
}

void trigger_low(void)
{
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a78:	f000 bc0a 	b.w	8001290 <HAL_GPIO_WritePin>

08000a7c <getch>:
}

char getch(void)
{
 8000a7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t d;
  while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK)
 8000a7e:	4d0a      	ldr	r5, [pc, #40]	; (8000aa8 <getch+0x2c>)
    USART1->ICR |= (1 << 3);
 8000a80:	4c0a      	ldr	r4, [pc, #40]	; (8000aac <getch+0x30>)
  while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK)
 8000a82:	f241 3388 	movw	r3, #5000	; 0x1388
 8000a86:	2201      	movs	r2, #1
 8000a88:	f10d 0107 	add.w	r1, sp, #7
 8000a8c:	4628      	mov	r0, r5
 8000a8e:	f000 fdd4 	bl	800163a <HAL_UART_Receive>
 8000a92:	b918      	cbnz	r0, 8000a9c <getch+0x20>
  //putch(d);
  return d;
}
 8000a94:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8000a98:	b003      	add	sp, #12
 8000a9a:	bd30      	pop	{r4, r5, pc}
    USART1->ICR |= (1 << 3);
 8000a9c:	6a23      	ldr	r3, [r4, #32]
 8000a9e:	f043 0308 	orr.w	r3, r3, #8
 8000aa2:	6223      	str	r3, [r4, #32]
 8000aa4:	e7ed      	b.n	8000a82 <getch+0x6>
 8000aa6:	bf00      	nop
 8000aa8:	20000120 	.word	0x20000120
 8000aac:	40013800 	.word	0x40013800

08000ab0 <putch>:

void putch(char c)
{
 8000ab0:	b507      	push	{r0, r1, r2, lr}
  uint8_t d  = c;
  HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 8000ab2:	f241 3388 	movw	r3, #5000	; 0x1388
  uint8_t d  = c;
 8000ab6:	f88d 0007 	strb.w	r0, [sp, #7]
  HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 8000aba:	2201      	movs	r2, #1
 8000abc:	f10d 0107 	add.w	r1, sp, #7
 8000ac0:	4802      	ldr	r0, [pc, #8]	; (8000acc <putch+0x1c>)
 8000ac2:	f000 fd64 	bl	800158e <HAL_UART_Transmit>
}
 8000ac6:	b003      	add	sp, #12
 8000ac8:	f85d fb04 	ldr.w	pc, [sp], #4
 8000acc:	20000120 	.word	0x20000120

08000ad0 <HAL_GetTick>:
	hal_sys_tick = 0;
	return HAL_OK;
}
uint32_t HAL_GetTick(void)
{
	return hal_sys_tick++;
 8000ad0:	4b02      	ldr	r3, [pc, #8]	; (8000adc <HAL_GetTick+0xc>)
 8000ad2:	6818      	ldr	r0, [r3, #0]
 8000ad4:	1c42      	adds	r2, r0, #1
 8000ad6:	601a      	str	r2, [r3, #0]
}
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	20000190 	.word	0x20000190

08000ae0 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ae0:	6803      	ldr	r3, [r0, #0]
{
 8000ae2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ae6:	07d9      	lsls	r1, r3, #31
{
 8000ae8:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000aea:	d411      	bmi.n	8000b10 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000aec:	6823      	ldr	r3, [r4, #0]
 8000aee:	079a      	lsls	r2, r3, #30
 8000af0:	f100 8086 	bmi.w	8000c00 <HAL_RCC_OscConfig+0x120>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000af4:	6823      	ldr	r3, [r4, #0]
 8000af6:	071e      	lsls	r6, r3, #28
 8000af8:	f100 80f4 	bmi.w	8000ce4 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000afc:	6823      	ldr	r3, [r4, #0]
 8000afe:	075d      	lsls	r5, r3, #29
 8000b00:	f100 8140 	bmi.w	8000d84 <HAL_RCC_OscConfig+0x2a4>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000b04:	69e2      	ldr	r2, [r4, #28]
 8000b06:	2a00      	cmp	r2, #0
 8000b08:	f040 81cb 	bne.w	8000ea2 <HAL_RCC_OscConfig+0x3c2>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000b0c:	2000      	movs	r0, #0
 8000b0e:	e021      	b.n	8000b54 <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000b10:	499a      	ldr	r1, [pc, #616]	; (8000d7c <HAL_RCC_OscConfig+0x29c>)
 8000b12:	684b      	ldr	r3, [r1, #4]
 8000b14:	f003 030c 	and.w	r3, r3, #12
 8000b18:	2b04      	cmp	r3, #4
 8000b1a:	d007      	beq.n	8000b2c <HAL_RCC_OscConfig+0x4c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b1c:	684b      	ldr	r3, [r1, #4]
 8000b1e:	f003 030c 	and.w	r3, r3, #12
 8000b22:	2b08      	cmp	r3, #8
 8000b24:	d119      	bne.n	8000b5a <HAL_RCC_OscConfig+0x7a>
 8000b26:	684b      	ldr	r3, [r1, #4]
 8000b28:	03db      	lsls	r3, r3, #15
 8000b2a:	d516      	bpl.n	8000b5a <HAL_RCC_OscConfig+0x7a>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b30:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b34:	6809      	ldr	r1, [r1, #0]
 8000b36:	fa93 f3a3 	rbit	r3, r3
 8000b3a:	fab3 f383 	clz	r3, r3
 8000b3e:	f003 031f 	and.w	r3, r3, #31
 8000b42:	2201      	movs	r2, #1
 8000b44:	fa02 f303 	lsl.w	r3, r2, r3
 8000b48:	420b      	tst	r3, r1
 8000b4a:	d0cf      	beq.n	8000aec <HAL_RCC_OscConfig+0xc>
 8000b4c:	6863      	ldr	r3, [r4, #4]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d1cc      	bne.n	8000aec <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000b52:	2001      	movs	r0, #1
}
 8000b54:	b002      	add	sp, #8
 8000b56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b5a:	6862      	ldr	r2, [r4, #4]
 8000b5c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000b60:	d124      	bne.n	8000bac <HAL_RCC_OscConfig+0xcc>
 8000b62:	680b      	ldr	r3, [r1, #0]
 8000b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b68:	600b      	str	r3, [r1, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000b6a:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8000b6c:	68a0      	ldr	r0, [r4, #8]
 8000b6e:	f023 030f 	bic.w	r3, r3, #15
 8000b72:	4303      	orrs	r3, r0
 8000b74:	62cb      	str	r3, [r1, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000b76:	b34a      	cbz	r2, 8000bcc <HAL_RCC_OscConfig+0xec>
        tickstart = HAL_GetTick();
 8000b78:	f7ff ffaa 	bl	8000ad0 <HAL_GetTick>
 8000b7c:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000b80:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b82:	2701      	movs	r7, #1
 8000b84:	fa96 f3a6 	rbit	r3, r6
 8000b88:	680a      	ldr	r2, [r1, #0]
 8000b8a:	fa96 f3a6 	rbit	r3, r6
 8000b8e:	fab3 f383 	clz	r3, r3
 8000b92:	f003 031f 	and.w	r3, r3, #31
 8000b96:	fa07 f303 	lsl.w	r3, r7, r3
 8000b9a:	4213      	tst	r3, r2
 8000b9c:	d1a6      	bne.n	8000aec <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b9e:	f7ff ff97 	bl	8000ad0 <HAL_GetTick>
 8000ba2:	1b40      	subs	r0, r0, r5
 8000ba4:	2864      	cmp	r0, #100	; 0x64
 8000ba6:	d9ed      	bls.n	8000b84 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
 8000ba8:	2003      	movs	r0, #3
 8000baa:	e7d3      	b.n	8000b54 <HAL_RCC_OscConfig+0x74>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bac:	680b      	ldr	r3, [r1, #0]
 8000bae:	b932      	cbnz	r2, 8000bbe <HAL_RCC_OscConfig+0xde>
 8000bb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bb4:	600b      	str	r3, [r1, #0]
 8000bb6:	680b      	ldr	r3, [r1, #0]
 8000bb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bbc:	e7d4      	b.n	8000b68 <HAL_RCC_OscConfig+0x88>
 8000bbe:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8000bc2:	d1f5      	bne.n	8000bb0 <HAL_RCC_OscConfig+0xd0>
 8000bc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bc8:	600b      	str	r3, [r1, #0]
 8000bca:	e7ca      	b.n	8000b62 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8000bcc:	f7ff ff80 	bl	8000ad0 <HAL_GetTick>
 8000bd0:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000bd4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bd6:	2701      	movs	r7, #1
 8000bd8:	fa96 f3a6 	rbit	r3, r6
 8000bdc:	680a      	ldr	r2, [r1, #0]
 8000bde:	fa96 f3a6 	rbit	r3, r6
 8000be2:	fab3 f383 	clz	r3, r3
 8000be6:	f003 031f 	and.w	r3, r3, #31
 8000bea:	fa07 f303 	lsl.w	r3, r7, r3
 8000bee:	4213      	tst	r3, r2
 8000bf0:	f43f af7c 	beq.w	8000aec <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bf4:	f7ff ff6c 	bl	8000ad0 <HAL_GetTick>
 8000bf8:	1b40      	subs	r0, r0, r5
 8000bfa:	2864      	cmp	r0, #100	; 0x64
 8000bfc:	d9ec      	bls.n	8000bd8 <HAL_RCC_OscConfig+0xf8>
 8000bfe:	e7d3      	b.n	8000ba8 <HAL_RCC_OscConfig+0xc8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000c00:	495e      	ldr	r1, [pc, #376]	; (8000d7c <HAL_RCC_OscConfig+0x29c>)
 8000c02:	684b      	ldr	r3, [r1, #4]
 8000c04:	f013 0f0c 	tst.w	r3, #12
 8000c08:	d007      	beq.n	8000c1a <HAL_RCC_OscConfig+0x13a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000c0a:	684b      	ldr	r3, [r1, #4]
 8000c0c:	f003 030c 	and.w	r3, r3, #12
 8000c10:	2b08      	cmp	r3, #8
 8000c12:	d121      	bne.n	8000c58 <HAL_RCC_OscConfig+0x178>
 8000c14:	684b      	ldr	r3, [r1, #4]
 8000c16:	03df      	lsls	r7, r3, #15
 8000c18:	d41e      	bmi.n	8000c58 <HAL_RCC_OscConfig+0x178>
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c20:	6808      	ldr	r0, [r1, #0]
 8000c22:	fa93 f3a3 	rbit	r3, r3
 8000c26:	fab3 f383 	clz	r3, r3
 8000c2a:	f003 031f 	and.w	r3, r3, #31
 8000c2e:	2201      	movs	r2, #1
 8000c30:	fa02 f303 	lsl.w	r3, r2, r3
 8000c34:	4203      	tst	r3, r0
 8000c36:	d002      	beq.n	8000c3e <HAL_RCC_OscConfig+0x15e>
 8000c38:	6923      	ldr	r3, [r4, #16]
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d189      	bne.n	8000b52 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c3e:	6808      	ldr	r0, [r1, #0]
 8000c40:	23f8      	movs	r3, #248	; 0xf8
 8000c42:	fa93 f3a3 	rbit	r3, r3
 8000c46:	fab3 f283 	clz	r2, r3
 8000c4a:	6963      	ldr	r3, [r4, #20]
 8000c4c:	4093      	lsls	r3, r2
 8000c4e:	f020 02f8 	bic.w	r2, r0, #248	; 0xf8
 8000c52:	4313      	orrs	r3, r2
 8000c54:	600b      	str	r3, [r1, #0]
 8000c56:	e74d      	b.n	8000af4 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c58:	6922      	ldr	r2, [r4, #16]
 8000c5a:	2501      	movs	r5, #1
 8000c5c:	b302      	cbz	r2, 8000ca0 <HAL_RCC_OscConfig+0x1c0>
 8000c5e:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_ENABLE();
 8000c62:	fab3 f383 	clz	r3, r3
 8000c66:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000c6a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000c6e:	009b      	lsls	r3, r3, #2
 8000c70:	2702      	movs	r7, #2
 8000c72:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8000c74:	f7ff ff2c 	bl	8000ad0 <HAL_GetTick>
 8000c78:	4606      	mov	r6, r0
 8000c7a:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c7e:	680a      	ldr	r2, [r1, #0]
 8000c80:	fa97 f3a7 	rbit	r3, r7
 8000c84:	fab3 f383 	clz	r3, r3
 8000c88:	f003 031f 	and.w	r3, r3, #31
 8000c8c:	fa05 f303 	lsl.w	r3, r5, r3
 8000c90:	4213      	tst	r3, r2
 8000c92:	d1d4      	bne.n	8000c3e <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c94:	f7ff ff1c 	bl	8000ad0 <HAL_GetTick>
 8000c98:	1b80      	subs	r0, r0, r6
 8000c9a:	2802      	cmp	r0, #2
 8000c9c:	d9ed      	bls.n	8000c7a <HAL_RCC_OscConfig+0x19a>
 8000c9e:	e783      	b.n	8000ba8 <HAL_RCC_OscConfig+0xc8>
 8000ca0:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 8000ca4:	fab3 f383 	clz	r3, r3
 8000ca8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000cac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	2702      	movs	r7, #2
 8000cb4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000cb6:	f7ff ff0b 	bl	8000ad0 <HAL_GetTick>
 8000cba:	4606      	mov	r6, r0
 8000cbc:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cc0:	680a      	ldr	r2, [r1, #0]
 8000cc2:	fa97 f3a7 	rbit	r3, r7
 8000cc6:	fab3 f383 	clz	r3, r3
 8000cca:	f003 031f 	and.w	r3, r3, #31
 8000cce:	fa05 f303 	lsl.w	r3, r5, r3
 8000cd2:	4213      	tst	r3, r2
 8000cd4:	f43f af0e 	beq.w	8000af4 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cd8:	f7ff fefa 	bl	8000ad0 <HAL_GetTick>
 8000cdc:	1b80      	subs	r0, r0, r6
 8000cde:	2802      	cmp	r0, #2
 8000ce0:	d9ec      	bls.n	8000cbc <HAL_RCC_OscConfig+0x1dc>
 8000ce2:	e761      	b.n	8000ba8 <HAL_RCC_OscConfig+0xc8>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ce4:	69a2      	ldr	r2, [r4, #24]
 8000ce6:	4d25      	ldr	r5, [pc, #148]	; (8000d7c <HAL_RCC_OscConfig+0x29c>)
 8000ce8:	4825      	ldr	r0, [pc, #148]	; (8000d80 <HAL_RCC_OscConfig+0x2a0>)
 8000cea:	2101      	movs	r1, #1
 8000cec:	b312      	cbz	r2, 8000d34 <HAL_RCC_OscConfig+0x254>
 8000cee:	fa91 f3a1 	rbit	r3, r1
      __HAL_RCC_LSI_ENABLE();
 8000cf2:	fab3 f383 	clz	r3, r3
 8000cf6:	4403      	add	r3, r0
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	2602      	movs	r6, #2
 8000cfc:	6019      	str	r1, [r3, #0]
      tickstart = HAL_GetTick();
 8000cfe:	f7ff fee7 	bl	8000ad0 <HAL_GetTick>
 8000d02:	4607      	mov	r7, r0
 8000d04:	fa96 f3a6 	rbit	r3, r6
 8000d08:	fa96 f3a6 	rbit	r3, r6
 8000d0c:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d10:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000d12:	fa96 f3a6 	rbit	r3, r6
 8000d16:	fab3 f383 	clz	r3, r3
 8000d1a:	f003 031f 	and.w	r3, r3, #31
 8000d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d22:	4213      	tst	r3, r2
 8000d24:	f47f aeea 	bne.w	8000afc <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d28:	f7ff fed2 	bl	8000ad0 <HAL_GetTick>
 8000d2c:	1bc0      	subs	r0, r0, r7
 8000d2e:	2802      	cmp	r0, #2
 8000d30:	d9e8      	bls.n	8000d04 <HAL_RCC_OscConfig+0x224>
 8000d32:	e739      	b.n	8000ba8 <HAL_RCC_OscConfig+0xc8>
 8000d34:	fa91 f3a1 	rbit	r3, r1
      __HAL_RCC_LSI_DISABLE();
 8000d38:	fab3 f383 	clz	r3, r3
 8000d3c:	4403      	add	r3, r0
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	2602      	movs	r6, #2
 8000d42:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000d44:	f7ff fec4 	bl	8000ad0 <HAL_GetTick>
 8000d48:	4607      	mov	r7, r0
 8000d4a:	fa96 f3a6 	rbit	r3, r6
 8000d4e:	fa96 f3a6 	rbit	r3, r6
 8000d52:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d56:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000d58:	fa96 f3a6 	rbit	r3, r6
 8000d5c:	fab3 f383 	clz	r3, r3
 8000d60:	f003 031f 	and.w	r3, r3, #31
 8000d64:	fa01 f303 	lsl.w	r3, r1, r3
 8000d68:	4213      	tst	r3, r2
 8000d6a:	f43f aec7 	beq.w	8000afc <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d6e:	f7ff feaf 	bl	8000ad0 <HAL_GetTick>
 8000d72:	1bc0      	subs	r0, r0, r7
 8000d74:	2802      	cmp	r0, #2
 8000d76:	d9e8      	bls.n	8000d4a <HAL_RCC_OscConfig+0x26a>
 8000d78:	e716      	b.n	8000ba8 <HAL_RCC_OscConfig+0xc8>
 8000d7a:	bf00      	nop
 8000d7c:	40021000 	.word	0x40021000
 8000d80:	10908120 	.word	0x10908120
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d84:	498a      	ldr	r1, [pc, #552]	; (8000fb0 <HAL_RCC_OscConfig+0x4d0>)
 8000d86:	69cb      	ldr	r3, [r1, #28]
 8000d88:	00d8      	lsls	r0, r3, #3
 8000d8a:	d433      	bmi.n	8000df4 <HAL_RCC_OscConfig+0x314>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d8c:	69cb      	ldr	r3, [r1, #28]
 8000d8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d92:	61cb      	str	r3, [r1, #28]
 8000d94:	69cb      	ldr	r3, [r1, #28]
 8000d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d9a:	9301      	str	r3, [sp, #4]
 8000d9c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000d9e:	2501      	movs	r5, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000da0:	4e84      	ldr	r6, [pc, #528]	; (8000fb4 <HAL_RCC_OscConfig+0x4d4>)
 8000da2:	6833      	ldr	r3, [r6, #0]
 8000da4:	05da      	lsls	r2, r3, #23
 8000da6:	d527      	bpl.n	8000df8 <HAL_RCC_OscConfig+0x318>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000da8:	68e3      	ldr	r3, [r4, #12]
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d134      	bne.n	8000e18 <HAL_RCC_OscConfig+0x338>
 8000dae:	6a0b      	ldr	r3, [r1, #32]
 8000db0:	f043 0301 	orr.w	r3, r3, #1
 8000db4:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 8000db6:	f7ff fe8b 	bl	8000ad0 <HAL_GetTick>
 8000dba:	2602      	movs	r6, #2
 8000dbc:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000dbe:	f04f 0801 	mov.w	r8, #1
 8000dc2:	fa96 f3a6 	rbit	r3, r6
 8000dc6:	fa96 f3a6 	rbit	r3, r6
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d061      	beq.n	8000e92 <HAL_RCC_OscConfig+0x3b2>
 8000dce:	6a0a      	ldr	r2, [r1, #32]
 8000dd0:	fa96 f3a6 	rbit	r3, r6
 8000dd4:	fab3 f383 	clz	r3, r3
 8000dd8:	f003 031f 	and.w	r3, r3, #31
 8000ddc:	fa08 f303 	lsl.w	r3, r8, r3
 8000de0:	4213      	tst	r3, r2
 8000de2:	d04e      	beq.n	8000e82 <HAL_RCC_OscConfig+0x3a2>
    if(pwrclkchanged == SET)
 8000de4:	2d00      	cmp	r5, #0
 8000de6:	f43f ae8d 	beq.w	8000b04 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000dea:	69cb      	ldr	r3, [r1, #28]
 8000dec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000df0:	61cb      	str	r3, [r1, #28]
 8000df2:	e687      	b.n	8000b04 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8000df4:	2500      	movs	r5, #0
 8000df6:	e7d3      	b.n	8000da0 <HAL_RCC_OscConfig+0x2c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000df8:	6833      	ldr	r3, [r6, #0]
 8000dfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dfe:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000e00:	f7ff fe66 	bl	8000ad0 <HAL_GetTick>
 8000e04:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e06:	6833      	ldr	r3, [r6, #0]
 8000e08:	05db      	lsls	r3, r3, #23
 8000e0a:	d4cd      	bmi.n	8000da8 <HAL_RCC_OscConfig+0x2c8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e0c:	f7ff fe60 	bl	8000ad0 <HAL_GetTick>
 8000e10:	1bc0      	subs	r0, r0, r7
 8000e12:	2864      	cmp	r0, #100	; 0x64
 8000e14:	d9f7      	bls.n	8000e06 <HAL_RCC_OscConfig+0x326>
 8000e16:	e6c7      	b.n	8000ba8 <HAL_RCC_OscConfig+0xc8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e18:	bb2b      	cbnz	r3, 8000e66 <HAL_RCC_OscConfig+0x386>
 8000e1a:	6a0b      	ldr	r3, [r1, #32]
 8000e1c:	f023 0301 	bic.w	r3, r3, #1
 8000e20:	620b      	str	r3, [r1, #32]
 8000e22:	6a0b      	ldr	r3, [r1, #32]
 8000e24:	f023 0304 	bic.w	r3, r3, #4
 8000e28:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 8000e2a:	f7ff fe51 	bl	8000ad0 <HAL_GetTick>
 8000e2e:	2602      	movs	r6, #2
 8000e30:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e32:	f04f 0801 	mov.w	r8, #1
 8000e36:	fa96 f3a6 	rbit	r3, r6
 8000e3a:	fa96 f3a6 	rbit	r3, r6
 8000e3e:	b363      	cbz	r3, 8000e9a <HAL_RCC_OscConfig+0x3ba>
 8000e40:	6a0a      	ldr	r2, [r1, #32]
 8000e42:	fa96 f3a6 	rbit	r3, r6
 8000e46:	fab3 f383 	clz	r3, r3
 8000e4a:	f003 031f 	and.w	r3, r3, #31
 8000e4e:	fa08 f303 	lsl.w	r3, r8, r3
 8000e52:	4213      	tst	r3, r2
 8000e54:	d0c6      	beq.n	8000de4 <HAL_RCC_OscConfig+0x304>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e56:	f7ff fe3b 	bl	8000ad0 <HAL_GetTick>
 8000e5a:	f241 3388 	movw	r3, #5000	; 0x1388
 8000e5e:	1bc0      	subs	r0, r0, r7
 8000e60:	4298      	cmp	r0, r3
 8000e62:	d9e8      	bls.n	8000e36 <HAL_RCC_OscConfig+0x356>
 8000e64:	e6a0      	b.n	8000ba8 <HAL_RCC_OscConfig+0xc8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e66:	2b05      	cmp	r3, #5
 8000e68:	6a0b      	ldr	r3, [r1, #32]
 8000e6a:	d103      	bne.n	8000e74 <HAL_RCC_OscConfig+0x394>
 8000e6c:	f043 0304 	orr.w	r3, r3, #4
 8000e70:	620b      	str	r3, [r1, #32]
 8000e72:	e79c      	b.n	8000dae <HAL_RCC_OscConfig+0x2ce>
 8000e74:	f023 0301 	bic.w	r3, r3, #1
 8000e78:	620b      	str	r3, [r1, #32]
 8000e7a:	6a0b      	ldr	r3, [r1, #32]
 8000e7c:	f023 0304 	bic.w	r3, r3, #4
 8000e80:	e798      	b.n	8000db4 <HAL_RCC_OscConfig+0x2d4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e82:	f7ff fe25 	bl	8000ad0 <HAL_GetTick>
 8000e86:	f241 3388 	movw	r3, #5000	; 0x1388
 8000e8a:	1bc0      	subs	r0, r0, r7
 8000e8c:	4298      	cmp	r0, r3
 8000e8e:	d998      	bls.n	8000dc2 <HAL_RCC_OscConfig+0x2e2>
 8000e90:	e68a      	b.n	8000ba8 <HAL_RCC_OscConfig+0xc8>
 8000e92:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e96:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8000e98:	e79a      	b.n	8000dd0 <HAL_RCC_OscConfig+0x2f0>
 8000e9a:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e9e:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8000ea0:	e7cf      	b.n	8000e42 <HAL_RCC_OscConfig+0x362>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ea2:	4943      	ldr	r1, [pc, #268]	; (8000fb0 <HAL_RCC_OscConfig+0x4d0>)
 8000ea4:	684b      	ldr	r3, [r1, #4]
 8000ea6:	f003 030c 	and.w	r3, r3, #12
 8000eaa:	2b08      	cmp	r3, #8
 8000eac:	f43f ae51 	beq.w	8000b52 <HAL_RCC_OscConfig+0x72>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000eb0:	2a02      	cmp	r2, #2
 8000eb2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000eb6:	d154      	bne.n	8000f62 <HAL_RCC_OscConfig+0x482>
 8000eb8:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000ebc:	fab3 f383 	clz	r3, r3
 8000ec0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000ec4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000ece:	f7ff fdff 	bl	8000ad0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ed2:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8000fb8 <HAL_RCC_OscConfig+0x4d8>
        tickstart = HAL_GetTick();
 8000ed6:	4606      	mov	r6, r0
 8000ed8:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000edc:	2501      	movs	r5, #1
 8000ede:	fa97 f3a7 	rbit	r3, r7
 8000ee2:	680a      	ldr	r2, [r1, #0]
 8000ee4:	fa97 f3a7 	rbit	r3, r7
 8000ee8:	fab3 f383 	clz	r3, r3
 8000eec:	f003 031f 	and.w	r3, r3, #31
 8000ef0:	fa05 f303 	lsl.w	r3, r5, r3
 8000ef4:	4213      	tst	r3, r2
 8000ef6:	d12e      	bne.n	8000f56 <HAL_RCC_OscConfig+0x476>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ef8:	e9d4 0308 	ldrd	r0, r3, [r4, #32]
 8000efc:	684a      	ldr	r2, [r1, #4]
 8000efe:	4303      	orrs	r3, r0
 8000f00:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000f04:	4313      	orrs	r3, r2
 8000f06:	604b      	str	r3, [r1, #4]
 8000f08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f0c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8000f10:	fab3 f383 	clz	r3, r3
 8000f14:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000f18:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000f1c:	009b      	lsls	r3, r3, #2
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f1e:	4f26      	ldr	r7, [pc, #152]	; (8000fb8 <HAL_RCC_OscConfig+0x4d8>)
        __HAL_RCC_PLL_ENABLE();
 8000f20:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8000f22:	f7ff fdd5 	bl	8000ad0 <HAL_GetTick>
 8000f26:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000f2a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f2c:	2601      	movs	r6, #1
 8000f2e:	fa95 f3a5 	rbit	r3, r5
 8000f32:	680a      	ldr	r2, [r1, #0]
 8000f34:	fa95 f3a5 	rbit	r3, r5
 8000f38:	fab3 f383 	clz	r3, r3
 8000f3c:	f003 031f 	and.w	r3, r3, #31
 8000f40:	fa06 f303 	lsl.w	r3, r6, r3
 8000f44:	4213      	tst	r3, r2
 8000f46:	f47f ade1 	bne.w	8000b0c <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f4a:	f7ff fdc1 	bl	8000ad0 <HAL_GetTick>
 8000f4e:	1b00      	subs	r0, r0, r4
 8000f50:	42b8      	cmp	r0, r7
 8000f52:	d9ec      	bls.n	8000f2e <HAL_RCC_OscConfig+0x44e>
 8000f54:	e628      	b.n	8000ba8 <HAL_RCC_OscConfig+0xc8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f56:	f7ff fdbb 	bl	8000ad0 <HAL_GetTick>
 8000f5a:	1b80      	subs	r0, r0, r6
 8000f5c:	4540      	cmp	r0, r8
 8000f5e:	d9be      	bls.n	8000ede <HAL_RCC_OscConfig+0x3fe>
 8000f60:	e622      	b.n	8000ba8 <HAL_RCC_OscConfig+0xc8>
 8000f62:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000f66:	fab3 f383 	clz	r3, r3
 8000f6a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000f6e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000f78:	f7ff fdaa 	bl	8000ad0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f7c:	4f0e      	ldr	r7, [pc, #56]	; (8000fb8 <HAL_RCC_OscConfig+0x4d8>)
        tickstart = HAL_GetTick();
 8000f7e:	4604      	mov	r4, r0
 8000f80:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f84:	2601      	movs	r6, #1
 8000f86:	fa95 f3a5 	rbit	r3, r5
 8000f8a:	680a      	ldr	r2, [r1, #0]
 8000f8c:	fa95 f3a5 	rbit	r3, r5
 8000f90:	fab3 f383 	clz	r3, r3
 8000f94:	f003 031f 	and.w	r3, r3, #31
 8000f98:	fa06 f303 	lsl.w	r3, r6, r3
 8000f9c:	4213      	tst	r3, r2
 8000f9e:	f43f adb5 	beq.w	8000b0c <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fa2:	f7ff fd95 	bl	8000ad0 <HAL_GetTick>
 8000fa6:	1b00      	subs	r0, r0, r4
 8000fa8:	42b8      	cmp	r0, r7
 8000faa:	d9ec      	bls.n	8000f86 <HAL_RCC_OscConfig+0x4a6>
 8000fac:	e5fc      	b.n	8000ba8 <HAL_RCC_OscConfig+0xc8>
 8000fae:	bf00      	nop
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	40007000 	.word	0x40007000
 8000fb8:	00030d40 	.word	0x00030d40

08000fbc <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000fbc:	4a50      	ldr	r2, [pc, #320]	; (8001100 <HAL_RCC_ClockConfig+0x144>)
{
 8000fbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000fc0:	6813      	ldr	r3, [r2, #0]
 8000fc2:	f003 0307 	and.w	r3, r3, #7
 8000fc6:	428b      	cmp	r3, r1
{
 8000fc8:	4604      	mov	r4, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000fca:	d31b      	bcc.n	8001004 <HAL_RCC_ClockConfig+0x48>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000fcc:	6822      	ldr	r2, [r4, #0]
 8000fce:	0790      	lsls	r0, r2, #30
 8000fd0:	d424      	bmi.n	800101c <HAL_RCC_ClockConfig+0x60>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000fd2:	07d2      	lsls	r2, r2, #31
 8000fd4:	d42a      	bmi.n	800102c <HAL_RCC_ClockConfig+0x70>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000fd6:	4a4a      	ldr	r2, [pc, #296]	; (8001100 <HAL_RCC_ClockConfig+0x144>)
 8000fd8:	6813      	ldr	r3, [r2, #0]
 8000fda:	f003 0307 	and.w	r3, r3, #7
 8000fde:	428b      	cmp	r3, r1
 8000fe0:	d87a      	bhi.n	80010d8 <HAL_RCC_ClockConfig+0x11c>
      return HAL_ERROR;
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fe2:	6820      	ldr	r0, [r4, #0]
 8000fe4:	0743      	lsls	r3, r0, #29
 8000fe6:	f100 8082 	bmi.w	80010ee <HAL_RCC_ClockConfig+0x132>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000fea:	f010 0008 	ands.w	r0, r0, #8
 8000fee:	d014      	beq.n	800101a <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000ff0:	4a44      	ldr	r2, [pc, #272]	; (8001104 <HAL_RCC_ClockConfig+0x148>)
 8000ff2:	6921      	ldr	r1, [r4, #16]
 8000ff4:	6853      	ldr	r3, [r2, #4]
 8000ff6:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000ffa:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000ffe:	6053      	str	r3, [r2, #4]
  //SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];

  /* Configure the source of time base considering new system clocks settings*/
  //HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
 8001000:	2000      	movs	r0, #0
 8001002:	e00a      	b.n	800101a <HAL_RCC_ClockConfig+0x5e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001004:	6813      	ldr	r3, [r2, #0]
 8001006:	f023 0307 	bic.w	r3, r3, #7
 800100a:	430b      	orrs	r3, r1
 800100c:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800100e:	6813      	ldr	r3, [r2, #0]
 8001010:	f003 0307 	and.w	r3, r3, #7
 8001014:	428b      	cmp	r3, r1
 8001016:	d0d9      	beq.n	8000fcc <HAL_RCC_ClockConfig+0x10>
      return HAL_ERROR;
 8001018:	2001      	movs	r0, #1
}
 800101a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800101c:	4839      	ldr	r0, [pc, #228]	; (8001104 <HAL_RCC_ClockConfig+0x148>)
 800101e:	68a5      	ldr	r5, [r4, #8]
 8001020:	6843      	ldr	r3, [r0, #4]
 8001022:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001026:	432b      	orrs	r3, r5
 8001028:	6043      	str	r3, [r0, #4]
 800102a:	e7d2      	b.n	8000fd2 <HAL_RCC_ClockConfig+0x16>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800102c:	6862      	ldr	r2, [r4, #4]
 800102e:	4d35      	ldr	r5, [pc, #212]	; (8001104 <HAL_RCC_ClockConfig+0x148>)
 8001030:	2a01      	cmp	r2, #1
 8001032:	d127      	bne.n	8001084 <HAL_RCC_ClockConfig+0xc8>
 8001034:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001038:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800103c:	6828      	ldr	r0, [r5, #0]
 800103e:	fa93 f3a3 	rbit	r3, r3
 8001042:	fab3 f383 	clz	r3, r3
 8001046:	f003 031f 	and.w	r3, r3, #31
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	4203      	tst	r3, r0
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001050:	d0e2      	beq.n	8001018 <HAL_RCC_ClockConfig+0x5c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001052:	686b      	ldr	r3, [r5, #4]
 8001054:	f023 0303 	bic.w	r3, r3, #3
 8001058:	431a      	orrs	r2, r3
 800105a:	606a      	str	r2, [r5, #4]
    tickstart = HAL_GetTick();
 800105c:	f7ff fd38 	bl	8000ad0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001060:	6863      	ldr	r3, [r4, #4]
 8001062:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8001064:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001066:	f241 3788 	movw	r7, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800106a:	d11e      	bne.n	80010aa <HAL_RCC_ClockConfig+0xee>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800106c:	686b      	ldr	r3, [r5, #4]
 800106e:	f003 030c 	and.w	r3, r3, #12
 8001072:	2b04      	cmp	r3, #4
 8001074:	d0af      	beq.n	8000fd6 <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001076:	f7ff fd2b 	bl	8000ad0 <HAL_GetTick>
 800107a:	1b80      	subs	r0, r0, r6
 800107c:	42b8      	cmp	r0, r7
 800107e:	d9f5      	bls.n	800106c <HAL_RCC_ClockConfig+0xb0>
          return HAL_TIMEOUT;
 8001080:	2003      	movs	r0, #3
 8001082:	e7ca      	b.n	800101a <HAL_RCC_ClockConfig+0x5e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001084:	2a02      	cmp	r2, #2
 8001086:	bf0c      	ite	eq
 8001088:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 800108c:	2302      	movne	r3, #2
 800108e:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001092:	682e      	ldr	r6, [r5, #0]
 8001094:	fa93 f3a3 	rbit	r3, r3
 8001098:	fab3 f383 	clz	r3, r3
 800109c:	f003 031f 	and.w	r3, r3, #31
 80010a0:	2001      	movs	r0, #1
 80010a2:	fa00 f303 	lsl.w	r3, r0, r3
 80010a6:	4233      	tst	r3, r6
 80010a8:	e7d2      	b.n	8001050 <HAL_RCC_ClockConfig+0x94>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010aa:	2b02      	cmp	r3, #2
 80010ac:	d10f      	bne.n	80010ce <HAL_RCC_ClockConfig+0x112>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010ae:	686b      	ldr	r3, [r5, #4]
 80010b0:	f003 030c 	and.w	r3, r3, #12
 80010b4:	2b08      	cmp	r3, #8
 80010b6:	d08e      	beq.n	8000fd6 <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010b8:	f7ff fd0a 	bl	8000ad0 <HAL_GetTick>
 80010bc:	1b80      	subs	r0, r0, r6
 80010be:	42b8      	cmp	r0, r7
 80010c0:	d9f5      	bls.n	80010ae <HAL_RCC_ClockConfig+0xf2>
 80010c2:	e7dd      	b.n	8001080 <HAL_RCC_ClockConfig+0xc4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010c4:	f7ff fd04 	bl	8000ad0 <HAL_GetTick>
 80010c8:	1b80      	subs	r0, r0, r6
 80010ca:	42b8      	cmp	r0, r7
 80010cc:	d8d8      	bhi.n	8001080 <HAL_RCC_ClockConfig+0xc4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80010ce:	686b      	ldr	r3, [r5, #4]
 80010d0:	f013 0f0c 	tst.w	r3, #12
 80010d4:	d1f6      	bne.n	80010c4 <HAL_RCC_ClockConfig+0x108>
 80010d6:	e77e      	b.n	8000fd6 <HAL_RCC_ClockConfig+0x1a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010d8:	6813      	ldr	r3, [r2, #0]
 80010da:	f023 0307 	bic.w	r3, r3, #7
 80010de:	430b      	orrs	r3, r1
 80010e0:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80010e2:	6813      	ldr	r3, [r2, #0]
 80010e4:	f003 0307 	and.w	r3, r3, #7
 80010e8:	428b      	cmp	r3, r1
 80010ea:	d195      	bne.n	8001018 <HAL_RCC_ClockConfig+0x5c>
 80010ec:	e779      	b.n	8000fe2 <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80010ee:	4905      	ldr	r1, [pc, #20]	; (8001104 <HAL_RCC_ClockConfig+0x148>)
 80010f0:	68e3      	ldr	r3, [r4, #12]
 80010f2:	684a      	ldr	r2, [r1, #4]
 80010f4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80010f8:	431a      	orrs	r2, r3
 80010fa:	604a      	str	r2, [r1, #4]
 80010fc:	e775      	b.n	8000fea <HAL_RCC_ClockConfig+0x2e>
 80010fe:	bf00      	nop
 8001100:	40022000 	.word	0x40022000
 8001104:	40021000 	.word	0x40021000

08001108 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001108:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800110c:	f8df 8174 	ldr.w	r8, [pc, #372]	; 8001284 <HAL_GPIO_Init+0x17c>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001110:	4c5d      	ldr	r4, [pc, #372]	; (8001288 <HAL_GPIO_Init+0x180>)
  uint32_t position = 0x00U;
 8001112:	2300      	movs	r3, #0
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001114:	f04f 0901 	mov.w	r9, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001118:	680a      	ldr	r2, [r1, #0]
 800111a:	fa32 f503 	lsrs.w	r5, r2, r3
 800111e:	d102      	bne.n	8001126 <HAL_GPIO_Init+0x1e>
      }
    }
    
    position++;
  }
}
 8001120:	b003      	add	sp, #12
 8001122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001126:	fa09 fa03 	lsl.w	sl, r9, r3
    if(iocurrent)
 800112a:	ea1a 0202 	ands.w	r2, sl, r2
 800112e:	f000 809e 	beq.w	800126e <HAL_GPIO_Init+0x166>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001132:	684d      	ldr	r5, [r1, #4]
 8001134:	f025 0e10 	bic.w	lr, r5, #16
 8001138:	f1be 0f02 	cmp.w	lr, #2
 800113c:	d114      	bne.n	8001168 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3];
 800113e:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8001142:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001146:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 800114a:	f8dc 6020 	ldr.w	r6, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800114e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001152:	270f      	movs	r7, #15
 8001154:	fa07 f70b 	lsl.w	r7, r7, fp
 8001158:	ea26 0707 	bic.w	r7, r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800115c:	690e      	ldr	r6, [r1, #16]
 800115e:	fa06 f60b 	lsl.w	r6, r6, fp
 8001162:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3] = temp;
 8001164:	f8cc 6020 	str.w	r6, [ip, #32]
      temp = GPIOx->MODER;
 8001168:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800116c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8001170:	2603      	movs	r6, #3
 8001172:	fa06 f70c 	lsl.w	r7, r6, ip
 8001176:	ea2b 0b07 	bic.w	fp, fp, r7
 800117a:	43fe      	mvns	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800117c:	f005 0703 	and.w	r7, r5, #3
 8001180:	fa07 f70c 	lsl.w	r7, r7, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001184:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001188:	ea47 070b 	orr.w	r7, r7, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800118c:	f1be 0f01 	cmp.w	lr, #1
      GPIOx->MODER = temp;
 8001190:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001192:	d811      	bhi.n	80011b8 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR;
 8001194:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001196:	ea06 0e07 	and.w	lr, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 800119a:	68cf      	ldr	r7, [r1, #12]
 800119c:	fa07 f70c 	lsl.w	r7, r7, ip
 80011a0:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 80011a4:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80011a6:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011a8:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80011ac:	f3c5 1700 	ubfx	r7, r5, #4, #1
 80011b0:	409f      	lsls	r7, r3
 80011b2:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 80011b6:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80011b8:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011ba:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011bc:	688e      	ldr	r6, [r1, #8]
 80011be:	fa06 f60c 	lsl.w	r6, r6, ip
 80011c2:	433e      	orrs	r6, r7
      GPIOx->PUPDR = temp;
 80011c4:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011c6:	00ee      	lsls	r6, r5, #3
 80011c8:	d551      	bpl.n	800126e <HAL_GPIO_Init+0x166>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ca:	f8d8 6018 	ldr.w	r6, [r8, #24]
 80011ce:	f046 0601 	orr.w	r6, r6, #1
 80011d2:	f8c8 6018 	str.w	r6, [r8, #24]
 80011d6:	f8d8 6018 	ldr.w	r6, [r8, #24]
 80011da:	f023 0703 	bic.w	r7, r3, #3
 80011de:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80011e2:	f006 0601 	and.w	r6, r6, #1
 80011e6:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80011ea:	9601      	str	r6, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80011ec:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f0:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 80011f2:	68be      	ldr	r6, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80011f4:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80011f8:	f04f 0c0f 	mov.w	ip, #15
 80011fc:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001200:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001204:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001208:	d033      	beq.n	8001272 <HAL_GPIO_Init+0x16a>
 800120a:	4e20      	ldr	r6, [pc, #128]	; (800128c <HAL_GPIO_Init+0x184>)
 800120c:	42b0      	cmp	r0, r6
 800120e:	d032      	beq.n	8001276 <HAL_GPIO_Init+0x16e>
 8001210:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001214:	42b0      	cmp	r0, r6
 8001216:	d030      	beq.n	800127a <HAL_GPIO_Init+0x172>
 8001218:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800121c:	42b0      	cmp	r0, r6
 800121e:	d02e      	beq.n	800127e <HAL_GPIO_Init+0x176>
 8001220:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001224:	42b0      	cmp	r0, r6
 8001226:	bf0c      	ite	eq
 8001228:	2604      	moveq	r6, #4
 800122a:	2605      	movne	r6, #5
 800122c:	fa06 f60e 	lsl.w	r6, r6, lr
 8001230:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8001234:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8001236:	6826      	ldr	r6, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8001238:	43d7      	mvns	r7, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800123a:	f415 3f80 	tst.w	r5, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800123e:	bf0c      	ite	eq
 8001240:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001242:	4316      	orrne	r6, r2
        EXTI->IMR = temp;
 8001244:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 8001246:	6866      	ldr	r6, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001248:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800124c:	bf0c      	ite	eq
 800124e:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001250:	4316      	orrne	r6, r2
        EXTI->EMR = temp;
 8001252:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 8001254:	68a6      	ldr	r6, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001256:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800125a:	bf0c      	ite	eq
 800125c:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800125e:	4316      	orrne	r6, r2
        EXTI->RTSR = temp;
 8001260:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 8001262:	68e6      	ldr	r6, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001264:	02ad      	lsls	r5, r5, #10
        temp &= ~((uint32_t)iocurrent);
 8001266:	bf54      	ite	pl
 8001268:	403e      	andpl	r6, r7
          temp |= iocurrent;
 800126a:	4316      	orrmi	r6, r2
        EXTI->FTSR = temp;
 800126c:	60e6      	str	r6, [r4, #12]
    position++;
 800126e:	3301      	adds	r3, #1
 8001270:	e752      	b.n	8001118 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001272:	2600      	movs	r6, #0
 8001274:	e7da      	b.n	800122c <HAL_GPIO_Init+0x124>
 8001276:	2601      	movs	r6, #1
 8001278:	e7d8      	b.n	800122c <HAL_GPIO_Init+0x124>
 800127a:	2602      	movs	r6, #2
 800127c:	e7d6      	b.n	800122c <HAL_GPIO_Init+0x124>
 800127e:	2603      	movs	r6, #3
 8001280:	e7d4      	b.n	800122c <HAL_GPIO_Init+0x124>
 8001282:	bf00      	nop
 8001284:	40021000 	.word	0x40021000
 8001288:	40010400 	.word	0x40010400
 800128c:	48000400 	.word	0x48000400

08001290 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001290:	b10a      	cbz	r2, 8001296 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001292:	6181      	str	r1, [r0, #24]
 8001294:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001296:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8001298:	4770      	bx	lr
 800129a:	0000      	movs	r0, r0

0800129c <UART_SetConfig>:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800129c:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800129e:	6881      	ldr	r1, [r0, #8]
 80012a0:	69c3      	ldr	r3, [r0, #28]
{
 80012a2:	b530      	push	{r4, r5, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80012a4:	6905      	ldr	r5, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80012a6:	6814      	ldr	r4, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80012a8:	4329      	orrs	r1, r5
 80012aa:	6945      	ldr	r5, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80012ac:	f424 4416 	bic.w	r4, r4, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80012b0:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80012b2:	f024 040c 	bic.w	r4, r4, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80012b6:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80012b8:	4321      	orrs	r1, r4
 80012ba:	6011      	str	r1, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80012bc:	6851      	ldr	r1, [r2, #4]
 80012be:	68c4      	ldr	r4, [r0, #12]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80012c0:	6a05      	ldr	r5, [r0, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80012c2:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 80012c6:	4321      	orrs	r1, r4
 80012c8:	6051      	str	r1, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80012ca:	6894      	ldr	r4, [r2, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80012cc:	6981      	ldr	r1, [r0, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80012ce:	f424 6430 	bic.w	r4, r4, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80012d2:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80012d4:	4321      	orrs	r1, r4
 80012d6:	6091      	str	r1, [r2, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80012d8:	4962      	ldr	r1, [pc, #392]	; (8001464 <UART_SetConfig+0x1c8>)
 80012da:	428a      	cmp	r2, r1
 80012dc:	d116      	bne.n	800130c <UART_SetConfig+0x70>
 80012de:	f501 4158 	add.w	r1, r1, #55296	; 0xd800
 80012e2:	6b09      	ldr	r1, [r1, #48]	; 0x30
 80012e4:	f001 0103 	and.w	r1, r1, #3
 80012e8:	3901      	subs	r1, #1
 80012ea:	2902      	cmp	r1, #2
 80012ec:	f200 80b2 	bhi.w	8001454 <UART_SetConfig+0x1b8>
 80012f0:	4c5d      	ldr	r4, [pc, #372]	; (8001468 <UART_SetConfig+0x1cc>)

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80012f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80012f6:	5c61      	ldrb	r1, [r4, r1]
 80012f8:	d177      	bne.n	80013ea <UART_SetConfig+0x14e>
  {
    switch (clocksource)
 80012fa:	2908      	cmp	r1, #8
 80012fc:	d872      	bhi.n	80013e4 <UART_SetConfig+0x148>
 80012fe:	e8df f001 	tbb	[pc, r1]
 8001302:	acac      	.short	0xacac
 8001304:	71ac7124 	.word	0x71ac7124
 8001308:	7171      	.short	0x7171
 800130a:	a4          	.byte	0xa4
 800130b:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 800130c:	4957      	ldr	r1, [pc, #348]	; (800146c <UART_SetConfig+0x1d0>)
 800130e:	428a      	cmp	r2, r1
 8001310:	d12c      	bne.n	800136c <UART_SetConfig+0xd0>
 8001312:	f501 31e6 	add.w	r1, r1, #117760	; 0x1cc00
 8001316:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8001318:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
 800131c:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8001320:	f000 8090 	beq.w	8001444 <UART_SetConfig+0x1a8>
 8001324:	d80b      	bhi.n	800133e <UART_SetConfig+0xa2>
 8001326:	2900      	cmp	r1, #0
 8001328:	f000 8094 	beq.w	8001454 <UART_SetConfig+0x1b8>
 800132c:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8001330:	f000 8090 	beq.w	8001454 <UART_SetConfig+0x1b8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001334:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001338:	d054      	beq.n	80013e4 <UART_SetConfig+0x148>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800133a:	2001      	movs	r0, #1
        break;
    }
  }

  return ret;
 800133c:	e015      	b.n	800136a <UART_SetConfig+0xce>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800133e:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 8001342:	d1f7      	bne.n	8001334 <UART_SetConfig+0x98>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001344:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001348:	d166      	bne.n	8001418 <UART_SetConfig+0x17c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800134a:	6841      	ldr	r1, [r0, #4]
 800134c:	084b      	lsrs	r3, r1, #1
 800134e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8001352:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001356:	fbb3 f3f1 	udiv	r3, r3, r1
  HAL_StatusTypeDef ret               = HAL_OK;
 800135a:	2000      	movs	r0, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800135c:	b29b      	uxth	r3, r3
    brrtemp = usartdiv & 0xFFF0U;
 800135e:	f023 010f 	bic.w	r1, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001362:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8001366:	430b      	orrs	r3, r1
 8001368:	60d3      	str	r3, [r2, #12]

}
 800136a:	bd30      	pop	{r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800136c:	4940      	ldr	r1, [pc, #256]	; (8001470 <UART_SetConfig+0x1d4>)
 800136e:	428a      	cmp	r2, r1
 8001370:	d110      	bne.n	8001394 <UART_SetConfig+0xf8>
 8001372:	f501 31e4 	add.w	r1, r1, #116736	; 0x1c800
 8001376:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8001378:	f401 2140 	and.w	r1, r1, #786432	; 0xc0000
 800137c:	f5b1 2f00 	cmp.w	r1, #524288	; 0x80000
 8001380:	d060      	beq.n	8001444 <UART_SetConfig+0x1a8>
 8001382:	d804      	bhi.n	800138e <UART_SetConfig+0xf2>
 8001384:	2900      	cmp	r1, #0
 8001386:	d065      	beq.n	8001454 <UART_SetConfig+0x1b8>
 8001388:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 800138c:	e7d0      	b.n	8001330 <UART_SetConfig+0x94>
 800138e:	f5b1 2f40 	cmp.w	r1, #786432	; 0xc0000
 8001392:	e7d6      	b.n	8001342 <UART_SetConfig+0xa6>
 8001394:	4937      	ldr	r1, [pc, #220]	; (8001474 <UART_SetConfig+0x1d8>)
 8001396:	428a      	cmp	r2, r1
 8001398:	d110      	bne.n	80013bc <UART_SetConfig+0x120>
 800139a:	f501 31e2 	add.w	r1, r1, #115712	; 0x1c400
 800139e:	6b09      	ldr	r1, [r1, #48]	; 0x30
 80013a0:	f401 1140 	and.w	r1, r1, #3145728	; 0x300000
 80013a4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80013a8:	d04c      	beq.n	8001444 <UART_SetConfig+0x1a8>
 80013aa:	d804      	bhi.n	80013b6 <UART_SetConfig+0x11a>
 80013ac:	2900      	cmp	r1, #0
 80013ae:	d051      	beq.n	8001454 <UART_SetConfig+0x1b8>
 80013b0:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80013b4:	e7bc      	b.n	8001330 <UART_SetConfig+0x94>
 80013b6:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 80013ba:	e7c2      	b.n	8001342 <UART_SetConfig+0xa6>
 80013bc:	492e      	ldr	r1, [pc, #184]	; (8001478 <UART_SetConfig+0x1dc>)
 80013be:	428a      	cmp	r2, r1
 80013c0:	d1b8      	bne.n	8001334 <UART_SetConfig+0x98>
 80013c2:	f501 31e0 	add.w	r1, r1, #114688	; 0x1c000
 80013c6:	6b09      	ldr	r1, [r1, #48]	; 0x30
 80013c8:	f401 0140 	and.w	r1, r1, #12582912	; 0xc00000
 80013cc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80013d0:	d038      	beq.n	8001444 <UART_SetConfig+0x1a8>
 80013d2:	d804      	bhi.n	80013de <UART_SetConfig+0x142>
 80013d4:	2900      	cmp	r1, #0
 80013d6:	d03d      	beq.n	8001454 <UART_SetConfig+0x1b8>
 80013d8:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 80013dc:	e7a8      	b.n	8001330 <UART_SetConfig+0x94>
 80013de:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 80013e2:	e7ae      	b.n	8001342 <UART_SetConfig+0xa6>
        ret = HAL_ERROR;
 80013e4:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 80013e6:	2300      	movs	r3, #0
 80013e8:	e7b9      	b.n	800135e <UART_SetConfig+0xc2>
    switch (clocksource)
 80013ea:	2908      	cmp	r1, #8
 80013ec:	d8a5      	bhi.n	800133a <UART_SetConfig+0x9e>
 80013ee:	a301      	add	r3, pc, #4	; (adr r3, 80013f4 <UART_SetConfig+0x158>)
 80013f0:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 80013f4:	08001431 	.word	0x08001431
 80013f8:	08001431 	.word	0x08001431
 80013fc:	08001419 	.word	0x08001419
 8001400:	0800133b 	.word	0x0800133b
 8001404:	08001431 	.word	0x08001431
 8001408:	0800133b 	.word	0x0800133b
 800140c:	0800133b 	.word	0x0800133b
 8001410:	0800133b 	.word	0x0800133b
 8001414:	0800143b 	.word	0x0800143b
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001418:	6841      	ldr	r1, [r0, #4]
 800141a:	084b      	lsrs	r3, r1, #1
 800141c:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001420:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001424:	fbb3 f3f1 	udiv	r3, r3, r1
 8001428:	b29b      	uxth	r3, r3
 800142a:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800142c:	2000      	movs	r0, #0
        break;
 800142e:	e79c      	b.n	800136a <UART_SetConfig+0xce>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001430:	6841      	ldr	r1, [r0, #4]
 8001432:	084b      	lsrs	r3, r1, #1
 8001434:	f503 03e1 	add.w	r3, r3, #7372800	; 0x708000
 8001438:	e7f4      	b.n	8001424 <UART_SetConfig+0x188>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800143a:	6841      	ldr	r1, [r0, #4]
 800143c:	084b      	lsrs	r3, r1, #1
 800143e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001442:	e7ef      	b.n	8001424 <UART_SetConfig+0x188>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001444:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001448:	d1f7      	bne.n	800143a <UART_SetConfig+0x19e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800144a:	6841      	ldr	r1, [r0, #4]
 800144c:	084b      	lsrs	r3, r1, #1
 800144e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001452:	e780      	b.n	8001356 <UART_SetConfig+0xba>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001454:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001458:	d1ea      	bne.n	8001430 <UART_SetConfig+0x194>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800145a:	6841      	ldr	r1, [r0, #4]
 800145c:	084b      	lsrs	r3, r1, #1
 800145e:	f503 0361 	add.w	r3, r3, #14745600	; 0xe10000
 8001462:	e778      	b.n	8001356 <UART_SetConfig+0xba>
 8001464:	40013800 	.word	0x40013800
 8001468:	080017a4 	.word	0x080017a4
 800146c:	40004400 	.word	0x40004400
 8001470:	40004800 	.word	0x40004800
 8001474:	40004c00 	.word	0x40004c00
 8001478:	40005000 	.word	0x40005000

0800147c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800147c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800147e:	9f06      	ldr	r7, [sp, #24]
 8001480:	4604      	mov	r4, r0
 8001482:	4615      	mov	r5, r2
 8001484:	461e      	mov	r6, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001486:	6822      	ldr	r2, [r4, #0]
 8001488:	69d3      	ldr	r3, [r2, #28]
 800148a:	ea31 0303 	bics.w	r3, r1, r3
 800148e:	bf0c      	ite	eq
 8001490:	2301      	moveq	r3, #1
 8001492:	2300      	movne	r3, #0
 8001494:	42ab      	cmp	r3, r5
 8001496:	d001      	beq.n	800149c <UART_WaitOnFlagUntilTimeout+0x20>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001498:	2000      	movs	r0, #0
 800149a:	e014      	b.n	80014c6 <UART_WaitOnFlagUntilTimeout+0x4a>
    if(Timeout != HAL_MAX_DELAY)
 800149c:	1c7b      	adds	r3, r7, #1
 800149e:	d0f3      	beq.n	8001488 <UART_WaitOnFlagUntilTimeout+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80014a0:	b997      	cbnz	r7, 80014c8 <UART_WaitOnFlagUntilTimeout+0x4c>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80014a2:	6823      	ldr	r3, [r4, #0]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80014aa:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80014ac:	689a      	ldr	r2, [r3, #8]
 80014ae:	f022 0201 	bic.w	r2, r2, #1
 80014b2:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 80014b4:	2320      	movs	r3, #32
 80014b6:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 80014ba:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 80014be:	2300      	movs	r3, #0
 80014c0:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 80014c4:	2003      	movs	r0, #3
}
 80014c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80014c8:	f7ff fb02 	bl	8000ad0 <HAL_GetTick>
 80014cc:	1b80      	subs	r0, r0, r6
 80014ce:	42b8      	cmp	r0, r7
 80014d0:	d9d9      	bls.n	8001486 <UART_WaitOnFlagUntilTimeout+0xa>
 80014d2:	e7e6      	b.n	80014a2 <UART_WaitOnFlagUntilTimeout+0x26>

080014d4 <UART_CheckIdleState>:
{
 80014d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80014d6:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014d8:	2100      	movs	r1, #0
 80014da:	66c1      	str	r1, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 80014dc:	f7ff faf8 	bl	8000ad0 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80014e0:	6823      	ldr	r3, [r4, #0]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 80014e6:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80014e8:	d417      	bmi.n	800151a <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80014ea:	6823      	ldr	r3, [r4, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	075b      	lsls	r3, r3, #29
 80014f0:	d50a      	bpl.n	8001508 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80014f2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80014f6:	9300      	str	r3, [sp, #0]
 80014f8:	2200      	movs	r2, #0
 80014fa:	462b      	mov	r3, r5
 80014fc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001500:	4620      	mov	r0, r4
 8001502:	f7ff ffbb 	bl	800147c <UART_WaitOnFlagUntilTimeout>
 8001506:	b9a0      	cbnz	r0, 8001532 <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 8001508:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800150a:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 800150c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8001510:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 8001514:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 8001518:	e00c      	b.n	8001534 <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800151a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800151e:	9300      	str	r3, [sp, #0]
 8001520:	460a      	mov	r2, r1
 8001522:	4603      	mov	r3, r0
 8001524:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001528:	4620      	mov	r0, r4
 800152a:	f7ff ffa7 	bl	800147c <UART_WaitOnFlagUntilTimeout>
 800152e:	2800      	cmp	r0, #0
 8001530:	d0db      	beq.n	80014ea <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8001532:	2003      	movs	r0, #3
}
 8001534:	b003      	add	sp, #12
 8001536:	bd30      	pop	{r4, r5, pc}

08001538 <HAL_UART_Init>:
{
 8001538:	b510      	push	{r4, lr}
  if(huart == NULL)
 800153a:	4604      	mov	r4, r0
 800153c:	b328      	cbz	r0, 800158a <HAL_UART_Init+0x52>
  if(huart->gState == HAL_UART_STATE_RESET)
 800153e:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8001542:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001546:	b90b      	cbnz	r3, 800154c <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 8001548:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
  __HAL_UART_DISABLE(huart);
 800154c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800154e:	2324      	movs	r3, #36	; 0x24
 8001550:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8001554:	6813      	ldr	r3, [r2, #0]
 8001556:	f023 0301 	bic.w	r3, r3, #1
 800155a:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800155c:	4620      	mov	r0, r4
 800155e:	f7ff fe9d 	bl	800129c <UART_SetConfig>
 8001562:	2801      	cmp	r0, #1
 8001564:	d011      	beq.n	800158a <HAL_UART_Init+0x52>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001566:	6823      	ldr	r3, [r4, #0]
 8001568:	685a      	ldr	r2, [r3, #4]
 800156a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800156e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001570:	689a      	ldr	r2, [r3, #8]
 8001572:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001576:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	f042 0201 	orr.w	r2, r2, #1
  return UART_CheckIdleState(huart);
 800157e:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8001580:	601a      	str	r2, [r3, #0]
}
 8001582:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return UART_CheckIdleState(huart);
 8001586:	f7ff bfa5 	b.w	80014d4 <UART_CheckIdleState>
}
 800158a:	2001      	movs	r0, #1
 800158c:	bd10      	pop	{r4, pc}

0800158e <HAL_UART_Transmit>:
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800158e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001590:	461e      	mov	r6, r3
  uint16_t* tmp;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8001592:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8001596:	2b20      	cmp	r3, #32
{
 8001598:	460d      	mov	r5, r1
 800159a:	4604      	mov	r4, r0
 800159c:	4611      	mov	r1, r2
  if(huart->gState == HAL_UART_STATE_READY)
 800159e:	d14a      	bne.n	8001636 <HAL_UART_Transmit+0xa8>
  {
    if((pData == NULL ) || (Size == 0U))
 80015a0:	2d00      	cmp	r5, #0
 80015a2:	d046      	beq.n	8001632 <HAL_UART_Transmit+0xa4>
 80015a4:	2a00      	cmp	r2, #0
 80015a6:	d044      	beq.n	8001632 <HAL_UART_Transmit+0xa4>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80015a8:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d042      	beq.n	8001636 <HAL_UART_Transmit+0xa8>
 80015b0:	2301      	movs	r3, #1
 80015b2:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015b6:	2300      	movs	r3, #0
 80015b8:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80015ba:	2321      	movs	r3, #33	; 0x21
 80015bc:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80015c0:	f7ff fa86 	bl	8000ad0 <HAL_GetTick>

    huart->TxXferSize = Size;
 80015c4:	f8a4 1050 	strh.w	r1, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 80015c8:	4607      	mov	r7, r0
    huart->TxXferCount = Size;
 80015ca:	f8a4 1052 	strh.w	r1, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 80015ce:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 80015d2:	b292      	uxth	r2, r2
 80015d4:	b962      	cbnz	r2, 80015f0 <HAL_UART_Transmit+0x62>
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80015d6:	9600      	str	r6, [sp, #0]
 80015d8:	463b      	mov	r3, r7
 80015da:	2140      	movs	r1, #64	; 0x40
 80015dc:	4620      	mov	r0, r4
 80015de:	f7ff ff4d 	bl	800147c <UART_WaitOnFlagUntilTimeout>
 80015e2:	b998      	cbnz	r0, 800160c <HAL_UART_Transmit+0x7e>
    {
      return HAL_TIMEOUT;
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80015e4:	2320      	movs	r3, #32
 80015e6:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80015ea:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68

    return HAL_OK;
 80015ee:	e00e      	b.n	800160e <HAL_UART_Transmit+0x80>
      huart->TxXferCount--;
 80015f0:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80015f4:	9600      	str	r6, [sp, #0]
      huart->TxXferCount--;
 80015f6:	3a01      	subs	r2, #1
 80015f8:	b292      	uxth	r2, r2
 80015fa:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80015fe:	463b      	mov	r3, r7
 8001600:	2200      	movs	r2, #0
 8001602:	2180      	movs	r1, #128	; 0x80
 8001604:	4620      	mov	r0, r4
 8001606:	f7ff ff39 	bl	800147c <UART_WaitOnFlagUntilTimeout>
 800160a:	b110      	cbz	r0, 8001612 <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 800160c:	2003      	movs	r0, #3
  }
  else
  {
    return HAL_BUSY;
  }
}
 800160e:	b003      	add	sp, #12
 8001610:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001612:	68a3      	ldr	r3, [r4, #8]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001614:	6822      	ldr	r2, [r4, #0]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001616:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800161a:	d107      	bne.n	800162c <HAL_UART_Transmit+0x9e>
 800161c:	6923      	ldr	r3, [r4, #16]
 800161e:	b92b      	cbnz	r3, 800162c <HAL_UART_Transmit+0x9e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001620:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001624:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8001628:	8513      	strh	r3, [r2, #40]	; 0x28
 800162a:	e7d0      	b.n	80015ce <HAL_UART_Transmit+0x40>
 800162c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001630:	e7fa      	b.n	8001628 <HAL_UART_Transmit+0x9a>
      return  HAL_ERROR;
 8001632:	2001      	movs	r0, #1
 8001634:	e7eb      	b.n	800160e <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 8001636:	2002      	movs	r0, #2
 8001638:	e7e9      	b.n	800160e <HAL_UART_Transmit+0x80>

0800163a <HAL_UART_Receive>:
  * @param Size: amount of data to be received.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800163a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800163e:	461e      	mov	r6, r3
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0U;

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8001640:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8001644:	2b20      	cmp	r3, #32
{
 8001646:	460d      	mov	r5, r1
 8001648:	4604      	mov	r4, r0
 800164a:	4611      	mov	r1, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 800164c:	d15c      	bne.n	8001708 <HAL_UART_Receive+0xce>
  {
    if((pData == NULL ) || (Size == 0U))
 800164e:	2d00      	cmp	r5, #0
 8001650:	d058      	beq.n	8001704 <HAL_UART_Receive+0xca>
 8001652:	2a00      	cmp	r2, #0
 8001654:	d056      	beq.n	8001704 <HAL_UART_Receive+0xca>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001656:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 800165a:	2b01      	cmp	r3, #1
 800165c:	d054      	beq.n	8001708 <HAL_UART_Receive+0xce>
 800165e:	2301      	movs	r3, #1
 8001660:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    huart->Instance->ICR = 0xFFFFFFFF;
 8001664:	6803      	ldr	r3, [r0, #0]
 8001666:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800166a:	621a      	str	r2, [r3, #32]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800166c:	2300      	movs	r3, #0
 800166e:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001670:	2322      	movs	r3, #34	; 0x22
 8001672:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8001676:	f7ff fa2b 	bl	8000ad0 <HAL_GetTick>

    huart->RxXferSize = Size;
    huart->RxXferCount = Size;

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800167a:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize = Size;
 800167c:	f8a4 1058 	strh.w	r1, [r4, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 8001680:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8001684:	4680      	mov	r8, r0
    huart->RxXferCount = Size;
 8001686:	f8a4 105a 	strh.w	r1, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 800168a:	d115      	bne.n	80016b8 <HAL_UART_Receive+0x7e>
 800168c:	6923      	ldr	r3, [r4, #16]
 800168e:	b98b      	cbnz	r3, 80016b4 <HAL_UART_Receive+0x7a>
 8001690:	f240 13ff 	movw	r3, #511	; 0x1ff
 8001694:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 8001698:	f8b4 705c 	ldrh.w	r7, [r4, #92]	; 0x5c

    /* as long as data have to be received */
    while(huart->RxXferCount > 0U)
 800169c:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 80016a0:	b280      	uxth	r0, r0
 80016a2:	b980      	cbnz	r0, 80016c6 <HAL_UART_Receive+0x8c>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80016a4:	2320      	movs	r3, #32
 80016a6:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80016aa:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  }
  else
  {
    return HAL_BUSY;
  }
}
 80016ae:	b002      	add	sp, #8
 80016b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    UART_MASK_COMPUTATION(huart);
 80016b4:	23ff      	movs	r3, #255	; 0xff
 80016b6:	e7ed      	b.n	8001694 <HAL_UART_Receive+0x5a>
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d1ed      	bne.n	8001698 <HAL_UART_Receive+0x5e>
 80016bc:	6923      	ldr	r3, [r4, #16]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d0f8      	beq.n	80016b4 <HAL_UART_Receive+0x7a>
 80016c2:	237f      	movs	r3, #127	; 0x7f
 80016c4:	e7e6      	b.n	8001694 <HAL_UART_Receive+0x5a>
      huart->RxXferCount--;
 80016c6:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80016ca:	9600      	str	r6, [sp, #0]
      huart->RxXferCount--;
 80016cc:	3a01      	subs	r2, #1
 80016ce:	b292      	uxth	r2, r2
 80016d0:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80016d4:	4643      	mov	r3, r8
 80016d6:	2200      	movs	r2, #0
 80016d8:	2120      	movs	r1, #32
 80016da:	4620      	mov	r0, r4
 80016dc:	f7ff fece 	bl	800147c <UART_WaitOnFlagUntilTimeout>
 80016e0:	b9a0      	cbnz	r0, 800170c <HAL_UART_Receive+0xd2>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80016e2:	68a2      	ldr	r2, [r4, #8]
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 80016e4:	6823      	ldr	r3, [r4, #0]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80016e6:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80016ea:	d106      	bne.n	80016fa <HAL_UART_Receive+0xc0>
 80016ec:	6922      	ldr	r2, [r4, #16]
 80016ee:	b922      	cbnz	r2, 80016fa <HAL_UART_Receive+0xc0>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 80016f0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80016f2:	403b      	ands	r3, r7
 80016f4:	f825 3b02 	strh.w	r3, [r5], #2
        pData +=2U;
 80016f8:	e7d0      	b.n	800169c <HAL_UART_Receive+0x62>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80016fa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80016fc:	403b      	ands	r3, r7
 80016fe:	f805 3b01 	strb.w	r3, [r5], #1
 8001702:	e7cb      	b.n	800169c <HAL_UART_Receive+0x62>
      return  HAL_ERROR;
 8001704:	2001      	movs	r0, #1
 8001706:	e7d2      	b.n	80016ae <HAL_UART_Receive+0x74>
    return HAL_BUSY;
 8001708:	2002      	movs	r0, #2
 800170a:	e7d0      	b.n	80016ae <HAL_UART_Receive+0x74>
        return HAL_TIMEOUT;
 800170c:	2003      	movs	r0, #3
 800170e:	e7ce      	b.n	80016ae <HAL_UART_Receive+0x74>

08001710 <Reset_Handler>:
 8001710:	2100      	movs	r1, #0
 8001712:	e003      	b.n	800171c <LoopCopyDataInit>

08001714 <CopyDataInit>:
 8001714:	4b0b      	ldr	r3, [pc, #44]	; (8001744 <LoopForever+0x2>)
 8001716:	585b      	ldr	r3, [r3, r1]
 8001718:	5043      	str	r3, [r0, r1]
 800171a:	3104      	adds	r1, #4

0800171c <LoopCopyDataInit>:
 800171c:	480a      	ldr	r0, [pc, #40]	; (8001748 <LoopForever+0x6>)
 800171e:	4b0b      	ldr	r3, [pc, #44]	; (800174c <LoopForever+0xa>)
 8001720:	1842      	adds	r2, r0, r1
 8001722:	429a      	cmp	r2, r3
 8001724:	d3f6      	bcc.n	8001714 <CopyDataInit>
 8001726:	4a0a      	ldr	r2, [pc, #40]	; (8001750 <LoopForever+0xe>)
 8001728:	e002      	b.n	8001730 <LoopFillZerobss>

0800172a <FillZerobss>:
 800172a:	2300      	movs	r3, #0
 800172c:	6013      	str	r3, [r2, #0]
 800172e:	3204      	adds	r2, #4

08001730 <LoopFillZerobss>:
 8001730:	4b08      	ldr	r3, [pc, #32]	; (8001754 <LoopForever+0x12>)
 8001732:	429a      	cmp	r2, r3
 8001734:	d3f9      	bcc.n	800172a <FillZerobss>
 8001736:	f3af 8000 	nop.w
 800173a:	f7fe fd69 	bl	8000210 <__libc_init_array>
 800173e:	f7fe ffad 	bl	800069c <main>

08001742 <LoopForever>:
 8001742:	e7fe      	b.n	8001742 <LoopForever>
 8001744:	080017f0 	.word	0x080017f0
 8001748:	20000000 	.word	0x20000000
 800174c:	20000000 	.word	0x20000000
 8001750:	20000000 	.word	0x20000000
 8001754:	20000198 	.word	0x20000198

08001758 <BusFault_Handler>:
 8001758:	e7fe      	b.n	8001758 <BusFault_Handler>
 800175a:	0000      	movs	r0, r0

0800175c <_init>:
 800175c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800175e:	bf00      	nop
 8001760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001762:	bc08      	pop	{r3}
 8001764:	469e      	mov	lr, r3
 8001766:	4770      	bx	lr

08001768 <_fini>:
 8001768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800176a:	bf00      	nop
 800176c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800176e:	bc08      	pop	{r3}
 8001770:	469e      	mov	lr, r3
 8001772:	4770      	bx	lr
