
ss-chacha20-shiffthq-CWNANO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001340  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  080014c8  080014c8  000114c8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800153c  0800153c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  0800153c  0800153c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800153c  0800153c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800153c  0800153c  0001153c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001540  08001540  00011540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08001544  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  20000004  08001548  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  20000198  08001548  00020198  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000059  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003a5a  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000e72  00000000  00000000  00023adf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00002450  00000000  00000000  00024951  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000278  00000000  00000000  00026da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000390  00000000  00000000  00027020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002408  00000000  00000000  000273b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00001138  00000000  00000000  000297b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000504  00000000  00000000  0002a8f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000144  00000000  00000000  0002adf4  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000034  00000000  00000000  0002af38  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_line_str 00000097  00000000  00000000  0002af6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <deregister_tm_clones>:
 8000188:	4804      	ldr	r0, [pc, #16]	; (800019c <deregister_tm_clones+0x14>)
 800018a:	4b05      	ldr	r3, [pc, #20]	; (80001a0 <deregister_tm_clones+0x18>)
 800018c:	b510      	push	{r4, lr}
 800018e:	4283      	cmp	r3, r0
 8000190:	d003      	beq.n	800019a <deregister_tm_clones+0x12>
 8000192:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <deregister_tm_clones+0x1c>)
 8000194:	2b00      	cmp	r3, #0
 8000196:	d000      	beq.n	800019a <deregister_tm_clones+0x12>
 8000198:	4798      	blx	r3
 800019a:	bd10      	pop	{r4, pc}
 800019c:	20000004 	.word	0x20000004
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000

080001a8 <register_tm_clones>:
 80001a8:	4806      	ldr	r0, [pc, #24]	; (80001c4 <register_tm_clones+0x1c>)
 80001aa:	4907      	ldr	r1, [pc, #28]	; (80001c8 <register_tm_clones+0x20>)
 80001ac:	1a09      	subs	r1, r1, r0
 80001ae:	108b      	asrs	r3, r1, #2
 80001b0:	0fc9      	lsrs	r1, r1, #31
 80001b2:	18c9      	adds	r1, r1, r3
 80001b4:	b510      	push	{r4, lr}
 80001b6:	1049      	asrs	r1, r1, #1
 80001b8:	d003      	beq.n	80001c2 <register_tm_clones+0x1a>
 80001ba:	4b04      	ldr	r3, [pc, #16]	; (80001cc <register_tm_clones+0x24>)
 80001bc:	2b00      	cmp	r3, #0
 80001be:	d000      	beq.n	80001c2 <register_tm_clones+0x1a>
 80001c0:	4798      	blx	r3
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000004 	.word	0x20000004
 80001c8:	20000004 	.word	0x20000004
 80001cc:	00000000 	.word	0x00000000

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c07      	ldr	r4, [pc, #28]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	d109      	bne.n	80001ee <__do_global_dtors_aux+0x1e>
 80001da:	f7ff ffd5 	bl	8000188 <deregister_tm_clones>
 80001de:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <__do_global_dtors_aux+0x24>)
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d002      	beq.n	80001ea <__do_global_dtors_aux+0x1a>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x28>)
 80001e6:	e000      	b.n	80001ea <__do_global_dtors_aux+0x1a>
 80001e8:	bf00      	nop
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000004 	.word	0x20000004
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080014b0 	.word	0x080014b0

080001fc <frame_dummy>:
 80001fc:	4b05      	ldr	r3, [pc, #20]	; (8000214 <frame_dummy+0x18>)
 80001fe:	b510      	push	{r4, lr}
 8000200:	2b00      	cmp	r3, #0
 8000202:	d003      	beq.n	800020c <frame_dummy+0x10>
 8000204:	4904      	ldr	r1, [pc, #16]	; (8000218 <frame_dummy+0x1c>)
 8000206:	4805      	ldr	r0, [pc, #20]	; (800021c <frame_dummy+0x20>)
 8000208:	e000      	b.n	800020c <frame_dummy+0x10>
 800020a:	bf00      	nop
 800020c:	f7ff ffcc 	bl	80001a8 <register_tm_clones>
 8000210:	bd10      	pop	{r4, pc}
 8000212:	46c0      	nop			; (mov r8, r8)
 8000214:	00000000 	.word	0x00000000
 8000218:	20000008 	.word	0x20000008
 800021c:	080014b0 	.word	0x080014b0

08000220 <__gnu_thumb1_case_sqi>:
 8000220:	b402      	push	{r1}
 8000222:	4671      	mov	r1, lr
 8000224:	0849      	lsrs	r1, r1, #1
 8000226:	0049      	lsls	r1, r1, #1
 8000228:	5609      	ldrsb	r1, [r1, r0]
 800022a:	0049      	lsls	r1, r1, #1
 800022c:	448e      	add	lr, r1
 800022e:	bc02      	pop	{r1}
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__gnu_thumb1_case_uqi>:
 8000234:	b402      	push	{r1}
 8000236:	4671      	mov	r1, lr
 8000238:	0849      	lsrs	r1, r1, #1
 800023a:	0049      	lsls	r1, r1, #1
 800023c:	5c09      	ldrb	r1, [r1, r0]
 800023e:	0049      	lsls	r1, r1, #1
 8000240:	448e      	add	lr, r1
 8000242:	bc02      	pop	{r1}
 8000244:	4770      	bx	lr
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__udivsi3>:
 8000248:	2200      	movs	r2, #0
 800024a:	0843      	lsrs	r3, r0, #1
 800024c:	428b      	cmp	r3, r1
 800024e:	d374      	bcc.n	800033a <__udivsi3+0xf2>
 8000250:	0903      	lsrs	r3, r0, #4
 8000252:	428b      	cmp	r3, r1
 8000254:	d35f      	bcc.n	8000316 <__udivsi3+0xce>
 8000256:	0a03      	lsrs	r3, r0, #8
 8000258:	428b      	cmp	r3, r1
 800025a:	d344      	bcc.n	80002e6 <__udivsi3+0x9e>
 800025c:	0b03      	lsrs	r3, r0, #12
 800025e:	428b      	cmp	r3, r1
 8000260:	d328      	bcc.n	80002b4 <__udivsi3+0x6c>
 8000262:	0c03      	lsrs	r3, r0, #16
 8000264:	428b      	cmp	r3, r1
 8000266:	d30d      	bcc.n	8000284 <__udivsi3+0x3c>
 8000268:	22ff      	movs	r2, #255	; 0xff
 800026a:	0209      	lsls	r1, r1, #8
 800026c:	ba12      	rev	r2, r2
 800026e:	0c03      	lsrs	r3, r0, #16
 8000270:	428b      	cmp	r3, r1
 8000272:	d302      	bcc.n	800027a <__udivsi3+0x32>
 8000274:	1212      	asrs	r2, r2, #8
 8000276:	0209      	lsls	r1, r1, #8
 8000278:	d065      	beq.n	8000346 <__udivsi3+0xfe>
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d319      	bcc.n	80002b4 <__udivsi3+0x6c>
 8000280:	e000      	b.n	8000284 <__udivsi3+0x3c>
 8000282:	0a09      	lsrs	r1, r1, #8
 8000284:	0bc3      	lsrs	r3, r0, #15
 8000286:	428b      	cmp	r3, r1
 8000288:	d301      	bcc.n	800028e <__udivsi3+0x46>
 800028a:	03cb      	lsls	r3, r1, #15
 800028c:	1ac0      	subs	r0, r0, r3
 800028e:	4152      	adcs	r2, r2
 8000290:	0b83      	lsrs	r3, r0, #14
 8000292:	428b      	cmp	r3, r1
 8000294:	d301      	bcc.n	800029a <__udivsi3+0x52>
 8000296:	038b      	lsls	r3, r1, #14
 8000298:	1ac0      	subs	r0, r0, r3
 800029a:	4152      	adcs	r2, r2
 800029c:	0b43      	lsrs	r3, r0, #13
 800029e:	428b      	cmp	r3, r1
 80002a0:	d301      	bcc.n	80002a6 <__udivsi3+0x5e>
 80002a2:	034b      	lsls	r3, r1, #13
 80002a4:	1ac0      	subs	r0, r0, r3
 80002a6:	4152      	adcs	r2, r2
 80002a8:	0b03      	lsrs	r3, r0, #12
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d301      	bcc.n	80002b2 <__udivsi3+0x6a>
 80002ae:	030b      	lsls	r3, r1, #12
 80002b0:	1ac0      	subs	r0, r0, r3
 80002b2:	4152      	adcs	r2, r2
 80002b4:	0ac3      	lsrs	r3, r0, #11
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d301      	bcc.n	80002be <__udivsi3+0x76>
 80002ba:	02cb      	lsls	r3, r1, #11
 80002bc:	1ac0      	subs	r0, r0, r3
 80002be:	4152      	adcs	r2, r2
 80002c0:	0a83      	lsrs	r3, r0, #10
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__udivsi3+0x82>
 80002c6:	028b      	lsls	r3, r1, #10
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0a43      	lsrs	r3, r0, #9
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__udivsi3+0x8e>
 80002d2:	024b      	lsls	r3, r1, #9
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0a03      	lsrs	r3, r0, #8
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__udivsi3+0x9a>
 80002de:	020b      	lsls	r3, r1, #8
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	d2cd      	bcs.n	8000282 <__udivsi3+0x3a>
 80002e6:	09c3      	lsrs	r3, r0, #7
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__udivsi3+0xa8>
 80002ec:	01cb      	lsls	r3, r1, #7
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	0983      	lsrs	r3, r0, #6
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d301      	bcc.n	80002fc <__udivsi3+0xb4>
 80002f8:	018b      	lsls	r3, r1, #6
 80002fa:	1ac0      	subs	r0, r0, r3
 80002fc:	4152      	adcs	r2, r2
 80002fe:	0943      	lsrs	r3, r0, #5
 8000300:	428b      	cmp	r3, r1
 8000302:	d301      	bcc.n	8000308 <__udivsi3+0xc0>
 8000304:	014b      	lsls	r3, r1, #5
 8000306:	1ac0      	subs	r0, r0, r3
 8000308:	4152      	adcs	r2, r2
 800030a:	0903      	lsrs	r3, r0, #4
 800030c:	428b      	cmp	r3, r1
 800030e:	d301      	bcc.n	8000314 <__udivsi3+0xcc>
 8000310:	010b      	lsls	r3, r1, #4
 8000312:	1ac0      	subs	r0, r0, r3
 8000314:	4152      	adcs	r2, r2
 8000316:	08c3      	lsrs	r3, r0, #3
 8000318:	428b      	cmp	r3, r1
 800031a:	d301      	bcc.n	8000320 <__udivsi3+0xd8>
 800031c:	00cb      	lsls	r3, r1, #3
 800031e:	1ac0      	subs	r0, r0, r3
 8000320:	4152      	adcs	r2, r2
 8000322:	0883      	lsrs	r3, r0, #2
 8000324:	428b      	cmp	r3, r1
 8000326:	d301      	bcc.n	800032c <__udivsi3+0xe4>
 8000328:	008b      	lsls	r3, r1, #2
 800032a:	1ac0      	subs	r0, r0, r3
 800032c:	4152      	adcs	r2, r2
 800032e:	0843      	lsrs	r3, r0, #1
 8000330:	428b      	cmp	r3, r1
 8000332:	d301      	bcc.n	8000338 <__udivsi3+0xf0>
 8000334:	004b      	lsls	r3, r1, #1
 8000336:	1ac0      	subs	r0, r0, r3
 8000338:	4152      	adcs	r2, r2
 800033a:	1a41      	subs	r1, r0, r1
 800033c:	d200      	bcs.n	8000340 <__udivsi3+0xf8>
 800033e:	4601      	mov	r1, r0
 8000340:	4152      	adcs	r2, r2
 8000342:	4610      	mov	r0, r2
 8000344:	4770      	bx	lr
 8000346:	e7ff      	b.n	8000348 <__udivsi3+0x100>
 8000348:	b501      	push	{r0, lr}
 800034a:	2000      	movs	r0, #0
 800034c:	f000 f806 	bl	800035c <__aeabi_idiv0>
 8000350:	bd02      	pop	{r1, pc}
 8000352:	46c0      	nop			; (mov r8, r8)

08000354 <__aeabi_uidivmod>:
 8000354:	2900      	cmp	r1, #0
 8000356:	d0f7      	beq.n	8000348 <__udivsi3+0x100>
 8000358:	e776      	b.n	8000248 <__udivsi3>
 800035a:	4770      	bx	lr

0800035c <__aeabi_idiv0>:
 800035c:	4770      	bx	lr
 800035e:	46c0      	nop			; (mov r8, r8)

08000360 <__libc_init_array>:
 8000360:	b570      	push	{r4, r5, r6, lr}
 8000362:	4d0c      	ldr	r5, [pc, #48]	; (8000394 <__libc_init_array+0x34>)
 8000364:	4e0c      	ldr	r6, [pc, #48]	; (8000398 <__libc_init_array+0x38>)
 8000366:	1b76      	subs	r6, r6, r5
 8000368:	10b6      	asrs	r6, r6, #2
 800036a:	d005      	beq.n	8000378 <__libc_init_array+0x18>
 800036c:	2400      	movs	r4, #0
 800036e:	cd08      	ldmia	r5!, {r3}
 8000370:	3401      	adds	r4, #1
 8000372:	4798      	blx	r3
 8000374:	42a6      	cmp	r6, r4
 8000376:	d1fa      	bne.n	800036e <__libc_init_array+0xe>
 8000378:	f001 f89a 	bl	80014b0 <_init>
 800037c:	4d07      	ldr	r5, [pc, #28]	; (800039c <__libc_init_array+0x3c>)
 800037e:	4e08      	ldr	r6, [pc, #32]	; (80003a0 <__libc_init_array+0x40>)
 8000380:	1b76      	subs	r6, r6, r5
 8000382:	10b6      	asrs	r6, r6, #2
 8000384:	d005      	beq.n	8000392 <__libc_init_array+0x32>
 8000386:	2400      	movs	r4, #0
 8000388:	cd08      	ldmia	r5!, {r3}
 800038a:	3401      	adds	r4, #1
 800038c:	4798      	blx	r3
 800038e:	42a6      	cmp	r6, r4
 8000390:	d1fa      	bne.n	8000388 <__libc_init_array+0x28>
 8000392:	bd70      	pop	{r4, r5, r6, pc}
 8000394:	0800153c 	.word	0x0800153c
 8000398:	0800153c 	.word	0x0800153c
 800039c:	0800153c 	.word	0x0800153c
 80003a0:	08001540 	.word	0x08001540

080003a4 <memcpy>:
 80003a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003a6:	46c6      	mov	lr, r8
 80003a8:	b500      	push	{lr}
 80003aa:	2a0f      	cmp	r2, #15
 80003ac:	d941      	bls.n	8000432 <memcpy+0x8e>
 80003ae:	2703      	movs	r7, #3
 80003b0:	000d      	movs	r5, r1
 80003b2:	003e      	movs	r6, r7
 80003b4:	4305      	orrs	r5, r0
 80003b6:	000c      	movs	r4, r1
 80003b8:	0003      	movs	r3, r0
 80003ba:	402e      	ands	r6, r5
 80003bc:	422f      	tst	r7, r5
 80003be:	d13d      	bne.n	800043c <memcpy+0x98>
 80003c0:	0015      	movs	r5, r2
 80003c2:	3d10      	subs	r5, #16
 80003c4:	092d      	lsrs	r5, r5, #4
 80003c6:	46a8      	mov	r8, r5
 80003c8:	012d      	lsls	r5, r5, #4
 80003ca:	46ac      	mov	ip, r5
 80003cc:	4484      	add	ip, r0
 80003ce:	6827      	ldr	r7, [r4, #0]
 80003d0:	001d      	movs	r5, r3
 80003d2:	601f      	str	r7, [r3, #0]
 80003d4:	6867      	ldr	r7, [r4, #4]
 80003d6:	605f      	str	r7, [r3, #4]
 80003d8:	68a7      	ldr	r7, [r4, #8]
 80003da:	609f      	str	r7, [r3, #8]
 80003dc:	68e7      	ldr	r7, [r4, #12]
 80003de:	3410      	adds	r4, #16
 80003e0:	60df      	str	r7, [r3, #12]
 80003e2:	3310      	adds	r3, #16
 80003e4:	4565      	cmp	r5, ip
 80003e6:	d1f2      	bne.n	80003ce <memcpy+0x2a>
 80003e8:	4645      	mov	r5, r8
 80003ea:	230f      	movs	r3, #15
 80003ec:	240c      	movs	r4, #12
 80003ee:	3501      	adds	r5, #1
 80003f0:	012d      	lsls	r5, r5, #4
 80003f2:	1949      	adds	r1, r1, r5
 80003f4:	4013      	ands	r3, r2
 80003f6:	1945      	adds	r5, r0, r5
 80003f8:	4214      	tst	r4, r2
 80003fa:	d022      	beq.n	8000442 <memcpy+0x9e>
 80003fc:	598c      	ldr	r4, [r1, r6]
 80003fe:	51ac      	str	r4, [r5, r6]
 8000400:	3604      	adds	r6, #4
 8000402:	1b9c      	subs	r4, r3, r6
 8000404:	2c03      	cmp	r4, #3
 8000406:	d8f9      	bhi.n	80003fc <memcpy+0x58>
 8000408:	3b04      	subs	r3, #4
 800040a:	089b      	lsrs	r3, r3, #2
 800040c:	3301      	adds	r3, #1
 800040e:	009b      	lsls	r3, r3, #2
 8000410:	18ed      	adds	r5, r5, r3
 8000412:	18c9      	adds	r1, r1, r3
 8000414:	2303      	movs	r3, #3
 8000416:	401a      	ands	r2, r3
 8000418:	1e56      	subs	r6, r2, #1
 800041a:	2a00      	cmp	r2, #0
 800041c:	d006      	beq.n	800042c <memcpy+0x88>
 800041e:	2300      	movs	r3, #0
 8000420:	5ccc      	ldrb	r4, [r1, r3]
 8000422:	001a      	movs	r2, r3
 8000424:	54ec      	strb	r4, [r5, r3]
 8000426:	3301      	adds	r3, #1
 8000428:	4296      	cmp	r6, r2
 800042a:	d1f9      	bne.n	8000420 <memcpy+0x7c>
 800042c:	bc80      	pop	{r7}
 800042e:	46b8      	mov	r8, r7
 8000430:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000432:	0005      	movs	r5, r0
 8000434:	1e56      	subs	r6, r2, #1
 8000436:	2a00      	cmp	r2, #0
 8000438:	d1f1      	bne.n	800041e <memcpy+0x7a>
 800043a:	e7f7      	b.n	800042c <memcpy+0x88>
 800043c:	0005      	movs	r5, r0
 800043e:	1e56      	subs	r6, r2, #1
 8000440:	e7ed      	b.n	800041e <memcpy+0x7a>
 8000442:	001a      	movs	r2, r3
 8000444:	e7f6      	b.n	8000434 <memcpy+0x90>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <chacha20_quarterround>:
    return x << n | (x >> (-n & 31));
}

// https://tools.ietf.org/html/rfc7539#section-2.1
static void chacha20_quarterround(uint32_t *x, int a, int b, int c, int d) {
    x[a] += x[b]; x[d] = rotl32(x[d] ^ x[a], 16);
 8000448:	0089      	lsls	r1, r1, #2
 800044a:	0092      	lsls	r2, r2, #2
static void chacha20_quarterround(uint32_t *x, int a, int b, int c, int d) {
 800044c:	b570      	push	{r4, r5, r6, lr}
    x[a] += x[b]; x[d] = rotl32(x[d] ^ x[a], 16);
 800044e:	1882      	adds	r2, r0, r2
 8000450:	1846      	adds	r6, r0, r1
 8000452:	6834      	ldr	r4, [r6, #0]
 8000454:	6811      	ldr	r1, [r2, #0]
    x[c] += x[d]; x[b] = rotl32(x[b] ^ x[c], 12);
 8000456:	009b      	lsls	r3, r3, #2
    x[a] += x[b]; x[d] = rotl32(x[d] ^ x[a], 16);
 8000458:	1864      	adds	r4, r4, r1
 800045a:	9904      	ldr	r1, [sp, #16]
 800045c:	6034      	str	r4, [r6, #0]
 800045e:	008d      	lsls	r5, r1, #2
 8000460:	1945      	adds	r5, r0, r5
 8000462:	6829      	ldr	r1, [r5, #0]
    x[c] += x[d]; x[b] = rotl32(x[b] ^ x[c], 12);
 8000464:	18c0      	adds	r0, r0, r3
    x[a] += x[b]; x[d] = rotl32(x[d] ^ x[a], 16);
 8000466:	404c      	eors	r4, r1
    return x << n | (x >> (-n & 31));
 8000468:	2110      	movs	r1, #16
 800046a:	41cc      	rors	r4, r1
    x[a] += x[b]; x[d] = rotl32(x[d] ^ x[a], 16);
 800046c:	602c      	str	r4, [r5, #0]
    x[c] += x[d]; x[b] = rotl32(x[b] ^ x[c], 12);
 800046e:	6801      	ldr	r1, [r0, #0]
 8000470:	1861      	adds	r1, r4, r1
 8000472:	6001      	str	r1, [r0, #0]
 8000474:	6813      	ldr	r3, [r2, #0]
 8000476:	4059      	eors	r1, r3
    return x << n | (x >> (-n & 31));
 8000478:	2314      	movs	r3, #20
 800047a:	41d9      	rors	r1, r3
    x[c] += x[d]; x[b] = rotl32(x[b] ^ x[c], 12);
 800047c:	6011      	str	r1, [r2, #0]
    x[a] += x[b]; x[d] = rotl32(x[d] ^ x[a],  8);
 800047e:	6833      	ldr	r3, [r6, #0]
 8000480:	18c9      	adds	r1, r1, r3
 8000482:	6031      	str	r1, [r6, #0]
 8000484:	682b      	ldr	r3, [r5, #0]
 8000486:	4059      	eors	r1, r3
    return x << n | (x >> (-n & 31));
 8000488:	2318      	movs	r3, #24
 800048a:	41d9      	rors	r1, r3
    x[a] += x[b]; x[d] = rotl32(x[d] ^ x[a],  8);
 800048c:	6029      	str	r1, [r5, #0]
    x[c] += x[d]; x[b] = rotl32(x[b] ^ x[c],  7);
 800048e:	6803      	ldr	r3, [r0, #0]
 8000490:	18c9      	adds	r1, r1, r3
 8000492:	6001      	str	r1, [r0, #0]
 8000494:	6813      	ldr	r3, [r2, #0]
 8000496:	4059      	eors	r1, r3
    return x << n | (x >> (-n & 31));
 8000498:	2319      	movs	r3, #25
 800049a:	41d9      	rors	r1, r3
    x[c] += x[d]; x[b] = rotl32(x[b] ^ x[c],  7);
 800049c:	6011      	str	r1, [r2, #0]
}
 800049e:	bd70      	pop	{r4, r5, r6, pc}

080004a0 <ChaCha20XOR>:
    for (i = 0; i < 3; i++) {
        s[13 + i] = u8t32le(nonce + i * 4);
    }
}

void ChaCha20XOR(uint8_t key[32], uint32_t counter, uint8_t nonce[12], uint8_t *in, uint8_t *out, int inlen) {
 80004a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004a2:	0014      	movs	r4, r2
 80004a4:	000d      	movs	r5, r1
 80004a6:	b0b5      	sub	sp, #212	; 0xd4
 80004a8:	9303      	str	r3, [sp, #12]
    s[0] = 0x61707865;
 80004aa:	4b47      	ldr	r3, [pc, #284]	; (80005c8 <ChaCha20XOR+0x128>)
        s[4 + i] = u8t32le(key + i * 4);
 80004ac:	0001      	movs	r1, r0
    s[0] = 0x61707865;
 80004ae:	9304      	str	r3, [sp, #16]
    s[1] = 0x3320646e;
 80004b0:	4b46      	ldr	r3, [pc, #280]	; (80005cc <ChaCha20XOR+0x12c>)
        s[4 + i] = u8t32le(key + i * 4);
 80004b2:	2220      	movs	r2, #32
    s[1] = 0x3320646e;
 80004b4:	9305      	str	r3, [sp, #20]
    s[2] = 0x79622d32;
 80004b6:	4b46      	ldr	r3, [pc, #280]	; (80005d0 <ChaCha20XOR+0x130>)
        s[4 + i] = u8t32le(key + i * 4);
 80004b8:	a808      	add	r0, sp, #32
    s[2] = 0x79622d32;
 80004ba:	9306      	str	r3, [sp, #24]
    s[3] = 0x6b206574;
 80004bc:	4b45      	ldr	r3, [pc, #276]	; (80005d4 <ChaCha20XOR+0x134>)
    uint32_t s[16];
    uint8_t block[64];

    chacha20_init_state(s, key, counter, nonce);

    for (i = 0; i < inlen; i += 64) {
 80004be:	2600      	movs	r6, #0
    s[3] = 0x6b206574;
 80004c0:	9307      	str	r3, [sp, #28]
        s[4 + i] = u8t32le(key + i * 4);
 80004c2:	f7ff ff6f 	bl	80003a4 <memcpy>
        s[13 + i] = u8t32le(nonce + i * 4);
 80004c6:	220c      	movs	r2, #12
 80004c8:	0021      	movs	r1, r4
 80004ca:	a811      	add	r0, sp, #68	; 0x44
    s[12] = counter;
 80004cc:	9510      	str	r5, [sp, #64]	; 0x40
        s[13 + i] = u8t32le(nonce + i * 4);
 80004ce:	f7ff ff69 	bl	80003a4 <memcpy>
    for (i = 0; i < inlen; i += 64) {
 80004d2:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 80004d4:	429e      	cmp	r6, r3
 80004d6:	db01      	blt.n	80004dc <ChaCha20XOR+0x3c>
                break;
            }
            out[j] = in[j] ^ block[j - i];
        }
    }
}
 80004d8:	b035      	add	sp, #212	; 0xd4
 80004da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    memcpy(x, in, sizeof(uint32_t) * 16);
 80004dc:	2240      	movs	r2, #64	; 0x40
 80004de:	a904      	add	r1, sp, #16
 80004e0:	a824      	add	r0, sp, #144	; 0x90
 80004e2:	f7ff ff5f 	bl	80003a4 <memcpy>
 80004e6:	250a      	movs	r5, #10
        chacha20_quarterround(x, 0, 4,  8, 12);
 80004e8:	230c      	movs	r3, #12
 80004ea:	ac24      	add	r4, sp, #144	; 0x90
 80004ec:	2204      	movs	r2, #4
 80004ee:	2100      	movs	r1, #0
 80004f0:	0020      	movs	r0, r4
 80004f2:	9300      	str	r3, [sp, #0]
 80004f4:	3b04      	subs	r3, #4
 80004f6:	f7ff ffa7 	bl	8000448 <chacha20_quarterround>
        chacha20_quarterround(x, 1, 5,  9, 13);
 80004fa:	220d      	movs	r2, #13
 80004fc:	2309      	movs	r3, #9
 80004fe:	2101      	movs	r1, #1
 8000500:	0020      	movs	r0, r4
 8000502:	9200      	str	r2, [sp, #0]
 8000504:	3a08      	subs	r2, #8
 8000506:	f7ff ff9f 	bl	8000448 <chacha20_quarterround>
        chacha20_quarterround(x, 2, 6, 10, 14);
 800050a:	210e      	movs	r1, #14
        chacha20_quarterround(x, 3, 7, 11, 15);
 800050c:	270f      	movs	r7, #15
        chacha20_quarterround(x, 2, 6, 10, 14);
 800050e:	230a      	movs	r3, #10
 8000510:	2206      	movs	r2, #6
 8000512:	0020      	movs	r0, r4
 8000514:	9100      	str	r1, [sp, #0]
 8000516:	390c      	subs	r1, #12
 8000518:	f7ff ff96 	bl	8000448 <chacha20_quarterround>
        chacha20_quarterround(x, 3, 7, 11, 15);
 800051c:	230b      	movs	r3, #11
 800051e:	2207      	movs	r2, #7
 8000520:	2103      	movs	r1, #3
 8000522:	0020      	movs	r0, r4
 8000524:	9700      	str	r7, [sp, #0]
 8000526:	f7ff ff8f 	bl	8000448 <chacha20_quarterround>
        chacha20_quarterround(x, 0, 5, 10, 15);
 800052a:	230a      	movs	r3, #10
 800052c:	2205      	movs	r2, #5
 800052e:	2100      	movs	r1, #0
 8000530:	0020      	movs	r0, r4
 8000532:	9700      	str	r7, [sp, #0]
 8000534:	f7ff ff88 	bl	8000448 <chacha20_quarterround>
        chacha20_quarterround(x, 1, 6, 11, 12);
 8000538:	230c      	movs	r3, #12
 800053a:	2206      	movs	r2, #6
 800053c:	2101      	movs	r1, #1
 800053e:	0020      	movs	r0, r4
 8000540:	9300      	str	r3, [sp, #0]
 8000542:	3b01      	subs	r3, #1
 8000544:	f7ff ff80 	bl	8000448 <chacha20_quarterround>
        chacha20_quarterround(x, 2, 7,  8, 13);
 8000548:	220d      	movs	r2, #13
 800054a:	2308      	movs	r3, #8
 800054c:	2102      	movs	r1, #2
 800054e:	0020      	movs	r0, r4
 8000550:	9200      	str	r2, [sp, #0]
 8000552:	3a06      	subs	r2, #6
 8000554:	f7ff ff78 	bl	8000448 <chacha20_quarterround>
        chacha20_quarterround(x, 3, 4,  9, 14);
 8000558:	210e      	movs	r1, #14
 800055a:	2309      	movs	r3, #9
 800055c:	9100      	str	r1, [sp, #0]
 800055e:	2204      	movs	r2, #4
 8000560:	0020      	movs	r0, r4
 8000562:	390b      	subs	r1, #11
    for (i = num_rounds; i > 0; i -= 2) {
 8000564:	3d01      	subs	r5, #1
        chacha20_quarterround(x, 3, 4,  9, 14);
 8000566:	f7ff ff6f 	bl	8000448 <chacha20_quarterround>
    for (i = num_rounds; i > 0; i -= 2) {
 800056a:	2d00      	cmp	r5, #0
 800056c:	d1bc      	bne.n	80004e8 <ChaCha20XOR+0x48>
 800056e:	0022      	movs	r2, r4
 8000570:	002b      	movs	r3, r5
        x[i] += in[i];
 8000572:	a804      	add	r0, sp, #16
 8000574:	6811      	ldr	r1, [r2, #0]
 8000576:	581f      	ldr	r7, [r3, r0]
    for (i = 0; i < 16; i++) {
 8000578:	3304      	adds	r3, #4
        x[i] += in[i];
 800057a:	19c9      	adds	r1, r1, r7
 800057c:	c202      	stmia	r2!, {r1}
    for (i = 0; i < 16; i++) {
 800057e:	2b40      	cmp	r3, #64	; 0x40
 8000580:	d1f8      	bne.n	8000574 <ChaCha20XOR+0xd4>
 8000582:	a914      	add	r1, sp, #80	; 0x50
 8000584:	000b      	movs	r3, r1
        u32t8le(in[i], output + (i << 2));
 8000586:	5962      	ldr	r2, [r4, r5]
    for (i = 0; i < 16; i++) {
 8000588:	3504      	adds	r5, #4
    p[1] = (v >> 8) & 0xff;
 800058a:	0a10      	lsrs	r0, r2, #8
    p[0] = v & 0xff;
 800058c:	701a      	strb	r2, [r3, #0]
    p[1] = (v >> 8) & 0xff;
 800058e:	7058      	strb	r0, [r3, #1]
    p[2] = (v >> 16) & 0xff;
 8000590:	0c10      	lsrs	r0, r2, #16
    p[3] = (v >> 24) & 0xff;
 8000592:	0e12      	lsrs	r2, r2, #24
    p[2] = (v >> 16) & 0xff;
 8000594:	7098      	strb	r0, [r3, #2]
    p[3] = (v >> 24) & 0xff;
 8000596:	70da      	strb	r2, [r3, #3]
    for (i = 0; i < 16; i++) {
 8000598:	3304      	adds	r3, #4
 800059a:	2d40      	cmp	r5, #64	; 0x40
 800059c:	d1f3      	bne.n	8000586 <ChaCha20XOR+0xe6>
        s[12]++;
 800059e:	9b10      	ldr	r3, [sp, #64]	; 0x40
        for (j = i; j < i + 64; j++) {
 80005a0:	0030      	movs	r0, r6
        s[12]++;
 80005a2:	3301      	adds	r3, #1
 80005a4:	9310      	str	r3, [sp, #64]	; 0x40
 80005a6:	0033      	movs	r3, r6
            out[j] = in[j] ^ block[j - i];
 80005a8:	1b89      	subs	r1, r1, r6
        for (j = i; j < i + 64; j++) {
 80005aa:	303f      	adds	r0, #63	; 0x3f
            out[j] = in[j] ^ block[j - i];
 80005ac:	9c03      	ldr	r4, [sp, #12]
 80005ae:	5cca      	ldrb	r2, [r1, r3]
 80005b0:	5ce4      	ldrb	r4, [r4, r3]
 80005b2:	4062      	eors	r2, r4
 80005b4:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80005b6:	54e2      	strb	r2, [r4, r3]
        for (j = i; j < i + 64; j++) {
 80005b8:	3301      	adds	r3, #1
 80005ba:	4283      	cmp	r3, r0
 80005bc:	dc02      	bgt.n	80005c4 <ChaCha20XOR+0x124>
            if (j >= inlen) {
 80005be:	9a3b      	ldr	r2, [sp, #236]	; 0xec
 80005c0:	429a      	cmp	r2, r3
 80005c2:	d1f3      	bne.n	80005ac <ChaCha20XOR+0x10c>
    for (i = 0; i < inlen; i += 64) {
 80005c4:	3640      	adds	r6, #64	; 0x40
 80005c6:	e784      	b.n	80004d2 <ChaCha20XOR+0x32>
 80005c8:	61707865 	.word	0x61707865
 80005cc:	3320646e 	.word	0x3320646e
 80005d0:	79622d32 	.word	0x79622d32
 80005d4:	6b206574 	.word	0x6b206574

080005d8 <set_nonce>:
#define INPUT_SIZE 64
#define KEY_SIZE 32
#define NONCE_SIZE 12
#define COUNT_SIZE 4

uint8_t set_nonce(uint8_t* nc, uint8_t len){
 80005d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005da:	0004      	movs	r4, r0
 80005dc:	b0af      	sub	sp, #188	; 0xbc
    if (len != NONCE_SIZE+COUNT_SIZE) return 1;
 80005de:	2001      	movs	r0, #1
 80005e0:	2910      	cmp	r1, #16
 80005e2:	d13c      	bne.n	800065e <set_nonce+0x86>
    // https://forum.arduino.cc/t/convert-4-uint8_t-into-one-uint32_t/577243
    //uint32_t counter = nc[12] | (nc[13] << 8) | (nc[14] << 16) | (nc[15] << 24);
    uint32_t counter = nc[0] | (nc[1] << 8) | (nc[2] << 16) | (nc[3] << 24);

    // Hello from Chipwhispererer, I'm only here to get encrypted and yo(u?)
    uint8_t input[INPUT_SIZE] = {
 80005e4:	2640      	movs	r6, #64	; 0x40
    uint8_t key[KEY_SIZE] = {
 80005e6:	2220      	movs	r2, #32
 80005e8:	491e      	ldr	r1, [pc, #120]	; (8000664 <set_nonce+0x8c>)
 80005ea:	a806      	add	r0, sp, #24
 80005ec:	f7ff feda 	bl	80003a4 <memcpy>
    uint8_t nonce[NONCE_SIZE] = {
 80005f0:	7923      	ldrb	r3, [r4, #4]
 80005f2:	ad03      	add	r5, sp, #12
 80005f4:	702b      	strb	r3, [r5, #0]
 80005f6:	7963      	ldrb	r3, [r4, #5]
 80005f8:	7862      	ldrb	r2, [r4, #1]
 80005fa:	706b      	strb	r3, [r5, #1]
 80005fc:	79a3      	ldrb	r3, [r4, #6]
 80005fe:	0212      	lsls	r2, r2, #8
 8000600:	70ab      	strb	r3, [r5, #2]
 8000602:	79e3      	ldrb	r3, [r4, #7]
    uint8_t input[INPUT_SIZE] = {
 8000604:	4918      	ldr	r1, [pc, #96]	; (8000668 <set_nonce+0x90>)
    uint8_t nonce[NONCE_SIZE] = {
 8000606:	70eb      	strb	r3, [r5, #3]
 8000608:	7a23      	ldrb	r3, [r4, #8]
            0x64, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x79, 0x6f,
            //0x75, 0x3f
    };

    // encrypt
    ChaCha20XOR(key, counter, nonce, input, encrypt, INPUT_SIZE);
 800060a:	af0e      	add	r7, sp, #56	; 0x38
    uint8_t nonce[NONCE_SIZE] = {
 800060c:	712b      	strb	r3, [r5, #4]
 800060e:	7a63      	ldrb	r3, [r4, #9]
    uint8_t input[INPUT_SIZE] = {
 8000610:	a81e      	add	r0, sp, #120	; 0x78
    uint8_t nonce[NONCE_SIZE] = {
 8000612:	716b      	strb	r3, [r5, #5]
 8000614:	7aa3      	ldrb	r3, [r4, #10]
 8000616:	71ab      	strb	r3, [r5, #6]
 8000618:	7ae3      	ldrb	r3, [r4, #11]
 800061a:	71eb      	strb	r3, [r5, #7]
 800061c:	7b23      	ldrb	r3, [r4, #12]
 800061e:	722b      	strb	r3, [r5, #8]
 8000620:	7b63      	ldrb	r3, [r4, #13]
 8000622:	726b      	strb	r3, [r5, #9]
 8000624:	7ba3      	ldrb	r3, [r4, #14]
 8000626:	72ab      	strb	r3, [r5, #10]
 8000628:	7be3      	ldrb	r3, [r4, #15]
 800062a:	72eb      	strb	r3, [r5, #11]
    uint32_t counter = nc[0] | (nc[1] << 8) | (nc[2] << 16) | (nc[3] << 24);
 800062c:	7823      	ldrb	r3, [r4, #0]
 800062e:	431a      	orrs	r2, r3
 8000630:	78a3      	ldrb	r3, [r4, #2]
 8000632:	78e4      	ldrb	r4, [r4, #3]
 8000634:	041b      	lsls	r3, r3, #16
 8000636:	4313      	orrs	r3, r2
 8000638:	0624      	lsls	r4, r4, #24
 800063a:	431c      	orrs	r4, r3
    uint8_t input[INPUT_SIZE] = {
 800063c:	0032      	movs	r2, r6
 800063e:	f7ff feb1 	bl	80003a4 <memcpy>
    ChaCha20XOR(key, counter, nonce, input, encrypt, INPUT_SIZE);
 8000642:	002a      	movs	r2, r5
 8000644:	0021      	movs	r1, r4
 8000646:	ab1e      	add	r3, sp, #120	; 0x78
 8000648:	a806      	add	r0, sp, #24
 800064a:	9601      	str	r6, [sp, #4]
 800064c:	9700      	str	r7, [sp, #0]
 800064e:	f7ff ff27 	bl	80004a0 <ChaCha20XOR>

    // put encrypted/decrypted to simple serial
    simpleserial_put('r', INPUT_SIZE, encrypt);
 8000652:	2072      	movs	r0, #114	; 0x72
 8000654:	003a      	movs	r2, r7
 8000656:	0031      	movs	r1, r6
 8000658:	f000 f88e 	bl	8000778 <simpleserial_put>
    
    return 0;
 800065c:	2000      	movs	r0, #0
}
 800065e:	b02f      	add	sp, #188	; 0xbc
 8000660:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	080014c8 	.word	0x080014c8
 8000668:	080014fb 	.word	0x080014fb

0800066c <main>:


int main(void) {
 800066c:	b510      	push	{r4, lr}
    platform_init();
 800066e:	f000 f93d 	bl	80008ec <platform_init>
    init_uart();
 8000672:	f000 f967 	bl	8000944 <init_uart>
    trigger_setup();
 8000676:	f000 f9a5 	bl	80009c4 <trigger_setup>

    simpleserial_init();
 800067a:	f000 f865 	bl	8000748 <simpleserial_init>
    // 12 Bytes for nonce, 4 Bytes for counter
    simpleserial_addcmd('p', 16, set_nonce);
 800067e:	2110      	movs	r1, #16
 8000680:	2070      	movs	r0, #112	; 0x70
 8000682:	4a03      	ldr	r2, [pc, #12]	; (8000690 <main+0x24>)
 8000684:	f000 f85a 	bl	800073c <simpleserial_addcmd>

    while(1)
        simpleserial_get();
 8000688:	f000 f8c8 	bl	800081c <simpleserial_get>
    while(1)
 800068c:	e7fc      	b.n	8000688 <main+0x1c>
 800068e:	46c0      	nop			; (mov r8, r8)
 8000690:	080005d9 	.word	0x080005d9

08000694 <check_version>:
// Callback function for "v" command.
// This can exist in v1.0 as long as we don't actually send back an ack ("z")
uint8_t check_version(uint8_t *v, uint8_t len)
{
	return SS_VER;
}
 8000694:	2001      	movs	r0, #1
 8000696:	4770      	bx	lr

08000698 <hex_decode>:
	'0', '1', '2', '3', '4', '5', '6', '7',
	'8', '9', 'A', 'B', 'C', 'D', 'E', 'F'
};

int hex_decode(int len, char* ascii_buf, uint8_t* data_buf)
{
 8000698:	b570      	push	{r4, r5, r6, lr}
	for(int i = 0; i < len; i++)
 800069a:	0014      	movs	r4, r2
 800069c:	1aa3      	subs	r3, r4, r2
 800069e:	4298      	cmp	r0, r3
 80006a0:	dc01      	bgt.n	80006a6 <hex_decode+0xe>
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
		else
			return 1;
	}

	return 0;
 80006a2:	2000      	movs	r0, #0
 80006a4:	e01f      	b.n	80006e6 <hex_decode+0x4e>
		char n_lo = ascii_buf[2*i+1];
 80006a6:	784d      	ldrb	r5, [r1, #1]
		char n_hi = ascii_buf[2*i];
 80006a8:	780b      	ldrb	r3, [r1, #0]
		if(n_lo >= '0' && n_lo <= '9')
 80006aa:	002e      	movs	r6, r5
 80006ac:	3e30      	subs	r6, #48	; 0x30
 80006ae:	b2f6      	uxtb	r6, r6
 80006b0:	2e09      	cmp	r6, #9
 80006b2:	d80c      	bhi.n	80006ce <hex_decode+0x36>
			data_buf[i] = n_lo - '0';
 80006b4:	7026      	strb	r6, [r4, #0]
		if(n_hi >= '0' && n_hi <= '9')
 80006b6:	001d      	movs	r5, r3
 80006b8:	3d30      	subs	r5, #48	; 0x30
 80006ba:	b2ee      	uxtb	r6, r5
 80006bc:	2e09      	cmp	r6, #9
 80006be:	d815      	bhi.n	80006ec <hex_decode+0x54>
			data_buf[i] |= (n_hi - '0') << 4;
 80006c0:	7823      	ldrb	r3, [r4, #0]
 80006c2:	012d      	lsls	r5, r5, #4
 80006c4:	431d      	orrs	r5, r3
 80006c6:	7025      	strb	r5, [r4, #0]
	for(int i = 0; i < len; i++)
 80006c8:	3401      	adds	r4, #1
 80006ca:	3102      	adds	r1, #2
 80006cc:	e7e6      	b.n	800069c <hex_decode+0x4>
		else if(n_lo >= 'A' && n_lo <= 'F')
 80006ce:	002e      	movs	r6, r5
 80006d0:	3e41      	subs	r6, #65	; 0x41
 80006d2:	2e05      	cmp	r6, #5
 80006d4:	d802      	bhi.n	80006dc <hex_decode+0x44>
			data_buf[i] = n_lo - 'A' + 10;
 80006d6:	3d37      	subs	r5, #55	; 0x37
			data_buf[i] = n_lo - 'a' + 10;
 80006d8:	7025      	strb	r5, [r4, #0]
 80006da:	e7ec      	b.n	80006b6 <hex_decode+0x1e>
		else if(n_lo >= 'a' && n_lo <= 'f')
 80006dc:	002e      	movs	r6, r5
 80006de:	3e61      	subs	r6, #97	; 0x61
 80006e0:	2e05      	cmp	r6, #5
 80006e2:	d901      	bls.n	80006e8 <hex_decode+0x50>
			return 1;
 80006e4:	2001      	movs	r0, #1
}
 80006e6:	bd70      	pop	{r4, r5, r6, pc}
			data_buf[i] = n_lo - 'a' + 10;
 80006e8:	3d57      	subs	r5, #87	; 0x57
 80006ea:	e7f5      	b.n	80006d8 <hex_decode+0x40>
		else if(n_hi >= 'A' && n_hi <= 'F')
 80006ec:	001d      	movs	r5, r3
 80006ee:	3d41      	subs	r5, #65	; 0x41
 80006f0:	2d05      	cmp	r5, #5
 80006f2:	d805      	bhi.n	8000700 <hex_decode+0x68>
			data_buf[i] |= (n_hi - 'A' + 10) << 4;
 80006f4:	3b37      	subs	r3, #55	; 0x37
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
 80006f6:	7825      	ldrb	r5, [r4, #0]
 80006f8:	011b      	lsls	r3, r3, #4
 80006fa:	432b      	orrs	r3, r5
 80006fc:	7023      	strb	r3, [r4, #0]
 80006fe:	e7e3      	b.n	80006c8 <hex_decode+0x30>
		else if(n_hi >= 'a' && n_hi <= 'f')
 8000700:	001d      	movs	r5, r3
 8000702:	3d61      	subs	r5, #97	; 0x61
 8000704:	2d05      	cmp	r5, #5
 8000706:	d8ed      	bhi.n	80006e4 <hex_decode+0x4c>
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
 8000708:	3b57      	subs	r3, #87	; 0x57
 800070a:	e7f4      	b.n	80006f6 <hex_decode+0x5e>

0800070c <simpleserial_addcmd_flags>:
{
	return simpleserial_addcmd_flags(c, len, fp, CMD_FLAG_NONE);
}

int simpleserial_addcmd_flags(char c, unsigned int len, uint8_t (*fp)(uint8_t*, uint8_t), uint8_t fl)
{
 800070c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(num_commands >= MAX_SS_CMDS)
 800070e:	4f09      	ldr	r7, [pc, #36]	; (8000734 <simpleserial_addcmd_flags+0x28>)
{
 8000710:	0006      	movs	r6, r0
	if(num_commands >= MAX_SS_CMDS)
 8000712:	683d      	ldr	r5, [r7, #0]
		return 1;
 8000714:	2001      	movs	r0, #1
	if(num_commands >= MAX_SS_CMDS)
 8000716:	2d0f      	cmp	r5, #15
 8000718:	dc0b      	bgt.n	8000732 <simpleserial_addcmd_flags+0x26>

	if(len >= MAX_SS_LEN)
 800071a:	29ff      	cmp	r1, #255	; 0xff
 800071c:	d809      	bhi.n	8000732 <simpleserial_addcmd_flags+0x26>
		return 1;

	commands[num_commands].c   = c;
 800071e:	4c06      	ldr	r4, [pc, #24]	; (8000738 <simpleserial_addcmd_flags+0x2c>)
 8000720:	0128      	lsls	r0, r5, #4
 8000722:	5506      	strb	r6, [r0, r4]
	commands[num_commands].len = len;
 8000724:	1820      	adds	r0, r4, r0
 8000726:	6041      	str	r1, [r0, #4]
	commands[num_commands].fp  = fp;
 8000728:	6082      	str	r2, [r0, #8]
	commands[num_commands].flags = fl;
 800072a:	7303      	strb	r3, [r0, #12]
	num_commands++;

	return 0;
 800072c:	2000      	movs	r0, #0
	num_commands++;
 800072e:	3501      	adds	r5, #1
 8000730:	603d      	str	r5, [r7, #0]
}
 8000732:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000734:	20000020 	.word	0x20000020
 8000738:	20000024 	.word	0x20000024

0800073c <simpleserial_addcmd>:
{
 800073c:	b510      	push	{r4, lr}
	return simpleserial_addcmd_flags(c, len, fp, CMD_FLAG_NONE);
 800073e:	2300      	movs	r3, #0
 8000740:	f7ff ffe4 	bl	800070c <simpleserial_addcmd_flags>
}
 8000744:	bd10      	pop	{r4, pc}
 8000746:	0000      	movs	r0, r0

08000748 <simpleserial_init>:
{
 8000748:	b510      	push	{r4, lr}
	simpleserial_addcmd('v', 0, check_version);
 800074a:	2100      	movs	r1, #0
 800074c:	4a07      	ldr	r2, [pc, #28]	; (800076c <simpleserial_init+0x24>)
 800074e:	2076      	movs	r0, #118	; 0x76
 8000750:	f7ff fff4 	bl	800073c <simpleserial_addcmd>
    simpleserial_addcmd('w', 0, ss_get_commands);
 8000754:	2100      	movs	r1, #0
 8000756:	4a06      	ldr	r2, [pc, #24]	; (8000770 <simpleserial_init+0x28>)
 8000758:	2077      	movs	r0, #119	; 0x77
 800075a:	f7ff ffef 	bl	800073c <simpleserial_addcmd>
    simpleserial_addcmd('y', 0, ss_num_commands);
 800075e:	2100      	movs	r1, #0
 8000760:	2079      	movs	r0, #121	; 0x79
 8000762:	4a04      	ldr	r2, [pc, #16]	; (8000774 <simpleserial_init+0x2c>)
 8000764:	f7ff ffea 	bl	800073c <simpleserial_addcmd>
}
 8000768:	bd10      	pop	{r4, pc}
 800076a:	46c0      	nop			; (mov r8, r8)
 800076c:	08000695 	.word	0x08000695
 8000770:	080007cd 	.word	0x080007cd
 8000774:	080007b1 	.word	0x080007b1

08000778 <simpleserial_put>:
	simpleserial_put('z', 1, ret);
#endif
}

void simpleserial_put(char c, uint8_t size, uint8_t* output)
{
 8000778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800077a:	000d      	movs	r5, r1
 800077c:	0014      	movs	r4, r2

	// Write each byte as two nibbles
	for(int i = 0; i < size; i++)
	{
		putch(hex_lookup[output[i] >> 4 ]);
		putch(hex_lookup[output[i] & 0xF]);
 800077e:	270f      	movs	r7, #15
	putch(c);
 8000780:	f000 f978 	bl	8000a74 <putch>
	for(int i = 0; i < size; i++)
 8000784:	1965      	adds	r5, r4, r5
 8000786:	42ac      	cmp	r4, r5
 8000788:	d103      	bne.n	8000792 <simpleserial_put+0x1a>
	}

	// Write trailing '\n'
	putch('\n');
 800078a:	200a      	movs	r0, #10
 800078c:	f000 f972 	bl	8000a74 <putch>
}
 8000790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		putch(hex_lookup[output[i] >> 4 ]);
 8000792:	7823      	ldrb	r3, [r4, #0]
 8000794:	4e05      	ldr	r6, [pc, #20]	; (80007ac <simpleserial_put+0x34>)
 8000796:	091b      	lsrs	r3, r3, #4
 8000798:	5cf0      	ldrb	r0, [r6, r3]
 800079a:	f000 f96b 	bl	8000a74 <putch>
		putch(hex_lookup[output[i] & 0xF]);
 800079e:	7823      	ldrb	r3, [r4, #0]
 80007a0:	3401      	adds	r4, #1
 80007a2:	403b      	ands	r3, r7
 80007a4:	5cf0      	ldrb	r0, [r6, r3]
 80007a6:	f000 f965 	bl	8000a74 <putch>
	for(int i = 0; i < size; i++)
 80007aa:	e7ec      	b.n	8000786 <simpleserial_put+0xe>
 80007ac:	080014e8 	.word	0x080014e8

080007b0 <ss_num_commands>:
{
 80007b0:	b507      	push	{r0, r1, r2, lr}
    uint8_t ncmds = num_commands & 0xFF;
 80007b2:	466b      	mov	r3, sp
 80007b4:	1dda      	adds	r2, r3, #7
 80007b6:	4b04      	ldr	r3, [pc, #16]	; (80007c8 <ss_num_commands+0x18>)
    simpleserial_put('r', 0x01, &ncmds);
 80007b8:	2072      	movs	r0, #114	; 0x72
    uint8_t ncmds = num_commands & 0xFF;
 80007ba:	681b      	ldr	r3, [r3, #0]
    simpleserial_put('r', 0x01, &ncmds);
 80007bc:	2101      	movs	r1, #1
    uint8_t ncmds = num_commands & 0xFF;
 80007be:	7013      	strb	r3, [r2, #0]
    simpleserial_put('r', 0x01, &ncmds);
 80007c0:	f7ff ffda 	bl	8000778 <simpleserial_put>
}
 80007c4:	2000      	movs	r0, #0
 80007c6:	bd0e      	pop	{r1, r2, r3, pc}
 80007c8:	20000020 	.word	0x20000020

080007cc <ss_get_commands>:
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 80007cc:	2203      	movs	r2, #3
 80007ce:	4b11      	ldr	r3, [pc, #68]	; (8000814 <ss_get_commands+0x48>)
 80007d0:	4694      	mov	ip, r2
 80007d2:	6818      	ldr	r0, [r3, #0]
 80007d4:	2300      	movs	r3, #0
{
 80007d6:	b5f0      	push	{r4, r5, r6, r7, lr}
        repr_cmd_buf[i].c = commands[i].c;
 80007d8:	4c0f      	ldr	r4, [pc, #60]	; (8000818 <ss_get_commands+0x4c>)
{
 80007da:	b08d      	sub	sp, #52	; 0x34
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 80007dc:	b2c6      	uxtb	r6, r0
 80007de:	42b3      	cmp	r3, r6
 80007e0:	db09      	blt.n	80007f6 <ss_get_commands+0x2a>
    simpleserial_put('r', num_commands * 0x03, (void *) repr_cmd_buf);
 80007e2:	4661      	mov	r1, ip
 80007e4:	4341      	muls	r1, r0
 80007e6:	466a      	mov	r2, sp
 80007e8:	2072      	movs	r0, #114	; 0x72
 80007ea:	b2c9      	uxtb	r1, r1
 80007ec:	f7ff ffc4 	bl	8000778 <simpleserial_put>
}
 80007f0:	2000      	movs	r0, #0
 80007f2:	b00d      	add	sp, #52	; 0x34
 80007f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        repr_cmd_buf[i].c = commands[i].c;
 80007f6:	4665      	mov	r5, ip
 80007f8:	4669      	mov	r1, sp
 80007fa:	435d      	muls	r5, r3
 80007fc:	011a      	lsls	r2, r3, #4
 80007fe:	5d17      	ldrb	r7, [r2, r4]
        repr_cmd_buf[i].len = commands[i].len;
 8000800:	18a2      	adds	r2, r4, r2
        repr_cmd_buf[i].c = commands[i].c;
 8000802:	554f      	strb	r7, [r1, r5]
        repr_cmd_buf[i].len = commands[i].len;
 8000804:	6857      	ldr	r7, [r2, #4]
        repr_cmd_buf[i].flags = commands[i].flags;
 8000806:	7b12      	ldrb	r2, [r2, #12]
        repr_cmd_buf[i].len = commands[i].len;
 8000808:	446d      	add	r5, sp
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 800080a:	3301      	adds	r3, #1
        repr_cmd_buf[i].len = commands[i].len;
 800080c:	706f      	strb	r7, [r5, #1]
        repr_cmd_buf[i].flags = commands[i].flags;
 800080e:	70aa      	strb	r2, [r5, #2]
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8000810:	b2db      	uxtb	r3, r3
 8000812:	e7e4      	b.n	80007de <ss_get_commands+0x12>
 8000814:	20000020 	.word	0x20000020
 8000818:	20000024 	.word	0x20000024

0800081c <simpleserial_get>:
{
 800081c:	b5f0      	push	{r4, r5, r6, r7, lr}
	for(cmd = 0; cmd < num_commands; cmd++)
 800081e:	2500      	movs	r5, #0
{
 8000820:	4c2f      	ldr	r4, [pc, #188]	; (80008e0 <simpleserial_get+0xc4>)
 8000822:	44a5      	add	sp, r4
	c = getch();
 8000824:	f000 f90e 	bl	8000a44 <getch>
	for(cmd = 0; cmd < num_commands; cmd++)
 8000828:	4b2e      	ldr	r3, [pc, #184]	; (80008e4 <simpleserial_get+0xc8>)
		if(commands[cmd].c == c)
 800082a:	492f      	ldr	r1, [pc, #188]	; (80008e8 <simpleserial_get+0xcc>)
	for(cmd = 0; cmd < num_commands; cmd++)
 800082c:	681a      	ldr	r2, [r3, #0]
 800082e:	42aa      	cmp	r2, r5
 8000830:	dc45      	bgt.n	80008be <simpleserial_get+0xa2>
	if(cmd == num_commands)
 8000832:	d040      	beq.n	80008b6 <simpleserial_get+0x9a>
	if ((commands[cmd].flags & CMD_FLAG_LEN) != 0)
 8000834:	2701      	movs	r7, #1
 8000836:	4c2c      	ldr	r4, [pc, #176]	; (80008e8 <simpleserial_get+0xcc>)
 8000838:	012d      	lsls	r5, r5, #4
 800083a:	1966      	adds	r6, r4, r5
 800083c:	7b33      	ldrb	r3, [r6, #12]
 800083e:	423b      	tst	r3, r7
 8000840:	d01a      	beq.n	8000878 <simpleserial_get+0x5c>
		uint8_t l = 0;
 8000842:	2300      	movs	r3, #0
 8000844:	466a      	mov	r2, sp
 8000846:	7213      	strb	r3, [r2, #8]
		buff[0] = getch();
 8000848:	f000 f8fc 	bl	8000a44 <getch>
 800084c:	2284      	movs	r2, #132	; 0x84
 800084e:	466b      	mov	r3, sp
 8000850:	0052      	lsls	r2, r2, #1
 8000852:	189b      	adds	r3, r3, r2
 8000854:	7018      	strb	r0, [r3, #0]
		buff[1] = getch();
 8000856:	f000 f8f5 	bl	8000a44 <getch>
 800085a:	220a      	movs	r2, #10
 800085c:	466b      	mov	r3, sp
 800085e:	32ff      	adds	r2, #255	; 0xff
 8000860:	189b      	adds	r3, r3, r2
 8000862:	7018      	strb	r0, [r3, #0]
		if (hex_decode(1, buff, &l))
 8000864:	aa02      	add	r2, sp, #8
 8000866:	0038      	movs	r0, r7
 8000868:	a942      	add	r1, sp, #264	; 0x108
 800086a:	f7ff ff15 	bl	8000698 <hex_decode>
 800086e:	2800      	cmp	r0, #0
 8000870:	d121      	bne.n	80008b6 <simpleserial_get+0x9a>
		commands[cmd].len = l;
 8000872:	466b      	mov	r3, sp
 8000874:	7a1b      	ldrb	r3, [r3, #8]
 8000876:	6073      	str	r3, [r6, #4]
	for(cmd = 0; cmd < num_commands; cmd++)
 8000878:	2600      	movs	r6, #0
	for(int i = 0; i < 2*commands[cmd].len; i++)
 800087a:	1963      	adds	r3, r4, r5
 800087c:	685b      	ldr	r3, [r3, #4]
 800087e:	005b      	lsls	r3, r3, #1
 8000880:	42b3      	cmp	r3, r6
 8000882:	d822      	bhi.n	80008ca <simpleserial_get+0xae>
	c = getch();
 8000884:	f000 f8de 	bl	8000a44 <getch>
	if(c != '\n' && c != '\r')
 8000888:	280a      	cmp	r0, #10
 800088a:	d001      	beq.n	8000890 <simpleserial_get+0x74>
 800088c:	280d      	cmp	r0, #13
 800088e:	d112      	bne.n	80008b6 <simpleserial_get+0x9a>
	if(hex_decode(commands[cmd].len, ascii_buf, data_buf))
 8000890:	1964      	adds	r4, r4, r5
 8000892:	6865      	ldr	r5, [r4, #4]
 8000894:	aa02      	add	r2, sp, #8
 8000896:	0028      	movs	r0, r5
 8000898:	a942      	add	r1, sp, #264	; 0x108
 800089a:	f7ff fefd 	bl	8000698 <hex_decode>
 800089e:	2800      	cmp	r0, #0
 80008a0:	d109      	bne.n	80008b6 <simpleserial_get+0x9a>
	ret[0] = commands[cmd].fp(data_buf, commands[cmd].len);
 80008a2:	b2e9      	uxtb	r1, r5
 80008a4:	68a3      	ldr	r3, [r4, #8]
 80008a6:	a802      	add	r0, sp, #8
 80008a8:	4798      	blx	r3
 80008aa:	aa01      	add	r2, sp, #4
 80008ac:	7010      	strb	r0, [r2, #0]
	simpleserial_put('z', 1, ret);
 80008ae:	2101      	movs	r1, #1
 80008b0:	207a      	movs	r0, #122	; 0x7a
 80008b2:	f7ff ff61 	bl	8000778 <simpleserial_put>
}
 80008b6:	23c3      	movs	r3, #195	; 0xc3
 80008b8:	009b      	lsls	r3, r3, #2
 80008ba:	449d      	add	sp, r3
 80008bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(commands[cmd].c == c)
 80008be:	012c      	lsls	r4, r5, #4
 80008c0:	5d0c      	ldrb	r4, [r1, r4]
 80008c2:	4284      	cmp	r4, r0
 80008c4:	d0b6      	beq.n	8000834 <simpleserial_get+0x18>
	for(cmd = 0; cmd < num_commands; cmd++)
 80008c6:	3501      	adds	r5, #1
 80008c8:	e7b1      	b.n	800082e <simpleserial_get+0x12>
		c = getch();
 80008ca:	f000 f8bb 	bl	8000a44 <getch>
		if(c == '\n' || c == '\r')
 80008ce:	280a      	cmp	r0, #10
 80008d0:	d0f1      	beq.n	80008b6 <simpleserial_get+0x9a>
 80008d2:	280d      	cmp	r0, #13
 80008d4:	d0ef      	beq.n	80008b6 <simpleserial_get+0x9a>
		ascii_buf[i] = c;
 80008d6:	ab42      	add	r3, sp, #264	; 0x108
 80008d8:	54f0      	strb	r0, [r6, r3]
	for(int i = 0; i < 2*commands[cmd].len; i++)
 80008da:	3601      	adds	r6, #1
 80008dc:	e7cd      	b.n	800087a <simpleserial_get+0x5e>
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	fffffcf4 	.word	0xfffffcf4
 80008e4:	20000020 	.word	0x20000020
 80008e8:	20000024 	.word	0x20000024

080008ec <platform_init>:

UART_HandleTypeDef UartHandle;


void platform_init(void)
{
 80008ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    GPIO_InitTypeDef GpioInit;
	GpioInit.Pin       = GPIO_PIN_2;
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
	GpioInit.Pull      = GPIO_NOPULL;
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOA, &GpioInit);
 80008ee:	2790      	movs	r7, #144	; 0x90
	GpioInit.Pull      = GPIO_NOPULL;
 80008f0:	2400      	movs	r4, #0
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 80008f2:	2501      	movs	r5, #1
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 80008f4:	2603      	movs	r6, #3
	GpioInit.Pin       = GPIO_PIN_2;
 80008f6:	2304      	movs	r3, #4
{
 80008f8:	b097      	sub	sp, #92	; 0x5c
	HAL_GPIO_Init(GPIOA, &GpioInit);
 80008fa:	05ff      	lsls	r7, r7, #23
 80008fc:	0038      	movs	r0, r7
 80008fe:	a905      	add	r1, sp, #20
	GpioInit.Pin       = GPIO_PIN_2;
 8000900:	9305      	str	r3, [sp, #20]
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8000902:	9506      	str	r5, [sp, #24]
	GpioInit.Pull      = GPIO_NOPULL;
 8000904:	9407      	str	r4, [sp, #28]
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000906:	9608      	str	r6, [sp, #32]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8000908:	f000 fb32 	bl	8000f70 <HAL_GPIO_Init>
    
	GpioInit.Pin       = GPIO_PIN_4;
 800090c:	2310      	movs	r3, #16
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
	GpioInit.Pull      = GPIO_NOPULL;
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOA, &GpioInit);
 800090e:	a905      	add	r1, sp, #20
 8000910:	0038      	movs	r0, r7
	GpioInit.Pin       = GPIO_PIN_4;
 8000912:	9305      	str	r3, [sp, #20]
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8000914:	9506      	str	r5, [sp, #24]
	GpioInit.Pull      = GPIO_NOPULL;
 8000916:	9407      	str	r4, [sp, #28]
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000918:	9608      	str	r6, [sp, #32]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 800091a:	f000 fb29 	bl	8000f70 <HAL_GPIO_Init>
  uint32_t flash_latency = 0;
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
#else
	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 800091e:	2305      	movs	r3, #5
	RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
	RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000920:	a80a      	add	r0, sp, #40	; 0x28
	RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 8000922:	930b      	str	r3, [sp, #44]	; 0x2c
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
 8000924:	960a      	str	r6, [sp, #40]	; 0x28
	RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 8000926:	940d      	str	r4, [sp, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
 8000928:	9413      	str	r4, [sp, #76]	; 0x4c
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800092a:	f000 f8b9 	bl	8000aa0 <HAL_RCC_OscConfig>

	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 800092e:	2307      	movs	r3, #7
	RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
	RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);
 8000930:	0021      	movs	r1, r4
 8000932:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 8000934:	9301      	str	r3, [sp, #4]
	RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 8000936:	9502      	str	r5, [sp, #8]
	RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 8000938:	9403      	str	r4, [sp, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800093a:	9404      	str	r4, [sp, #16]
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);
 800093c:	f000 fa8e 	bl	8000e5c <HAL_RCC_ClockConfig>
#endif
}
 8000940:	b017      	add	sp, #92	; 0x5c
 8000942:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000944 <init_uart>:

void init_uart(void)
{
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000944:	2280      	movs	r2, #128	; 0x80
{
 8000946:	b570      	push	{r4, r5, r6, lr}
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000948:	4c1b      	ldr	r4, [pc, #108]	; (80009b8 <init_uart+0x74>)
 800094a:	0292      	lsls	r2, r2, #10
 800094c:	6963      	ldr	r3, [r4, #20]
{
 800094e:	b088      	sub	sp, #32
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000950:	4313      	orrs	r3, r2
 8000952:	6163      	str	r3, [r4, #20]
 8000954:	6963      	ldr	r3, [r4, #20]
	GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
	GpioInit.Mode      = GPIO_MODE_AF_PP;
	GpioInit.Pull      = GPIO_PULLUP;
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
	GpioInit.Alternate = GPIO_AF1_USART1;
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8000956:	2090      	movs	r0, #144	; 0x90
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000958:	4013      	ands	r3, r2
 800095a:	9301      	str	r3, [sp, #4]
 800095c:	9b01      	ldr	r3, [sp, #4]
	GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
 800095e:	23c0      	movs	r3, #192	; 0xc0
 8000960:	00db      	lsls	r3, r3, #3
	GpioInit.Pull      = GPIO_PULLUP;
 8000962:	2501      	movs	r5, #1
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000964:	2603      	movs	r6, #3
	GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
 8000966:	9303      	str	r3, [sp, #12]
	GpioInit.Mode      = GPIO_MODE_AF_PP;
 8000968:	2302      	movs	r3, #2
	HAL_GPIO_Init(GPIOA, &GpioInit);
 800096a:	a903      	add	r1, sp, #12
 800096c:	05c0      	lsls	r0, r0, #23
	GpioInit.Mode      = GPIO_MODE_AF_PP;
 800096e:	9304      	str	r3, [sp, #16]
	GpioInit.Pull      = GPIO_PULLUP;
 8000970:	9505      	str	r5, [sp, #20]
	GpioInit.Alternate = GPIO_AF1_USART1;
 8000972:	9507      	str	r5, [sp, #28]
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000974:	9606      	str	r6, [sp, #24]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8000976:	f000 fafb 	bl	8000f70 <HAL_GPIO_Init>

	__HAL_RCC_USART1_CLK_ENABLE();
 800097a:	2280      	movs	r2, #128	; 0x80
 800097c:	69a3      	ldr	r3, [r4, #24]
 800097e:	01d2      	lsls	r2, r2, #7
 8000980:	4313      	orrs	r3, r2
 8000982:	61a3      	str	r3, [r4, #24]
 8000984:	69a3      	ldr	r3, [r4, #24]
	__HAL_RCC_USART1_CONFIG(RCC_USART1CLKSOURCE_SYSCLK);
	UartHandle.Instance        = USART1;
 8000986:	480d      	ldr	r0, [pc, #52]	; (80009bc <init_uart+0x78>)
	__HAL_RCC_USART1_CLK_ENABLE();
 8000988:	4013      	ands	r3, r2
 800098a:	9302      	str	r3, [sp, #8]
 800098c:	9b02      	ldr	r3, [sp, #8]
	__HAL_RCC_USART1_CONFIG(RCC_USART1CLKSOURCE_SYSCLK);
 800098e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000990:	43b3      	bics	r3, r6
 8000992:	431d      	orrs	r5, r3
	UartHandle.Instance        = USART1;
 8000994:	4b0a      	ldr	r3, [pc, #40]	; (80009c0 <init_uart+0x7c>)
	__HAL_RCC_USART1_CONFIG(RCC_USART1CLKSOURCE_SYSCLK);
 8000996:	6325      	str	r5, [r4, #48]	; 0x30
	UartHandle.Instance        = USART1;
 8000998:	6003      	str	r3, [r0, #0]
  #if SS_VER==SS_VER_2_1
  UartHandle.Init.BaudRate   = 230400;
  #else
  UartHandle.Init.BaudRate   = 38400;
 800099a:	2396      	movs	r3, #150	; 0x96
 800099c:	021b      	lsls	r3, r3, #8
 800099e:	6043      	str	r3, [r0, #4]
  #endif
	UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 80009a0:	2300      	movs	r3, #0
 80009a2:	6083      	str	r3, [r0, #8]
	UartHandle.Init.StopBits   = UART_STOPBITS_1;
 80009a4:	60c3      	str	r3, [r0, #12]
	UartHandle.Init.Parity     = UART_PARITY_NONE;
 80009a6:	6103      	str	r3, [r0, #16]
	UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 80009a8:	6183      	str	r3, [r0, #24]
	UartHandle.Init.Mode       = UART_MODE_TX_RX;
 80009aa:	330c      	adds	r3, #12
 80009ac:	6143      	str	r3, [r0, #20]
	HAL_UART_Init(&UartHandle);
 80009ae:	f000 fc4b 	bl	8001248 <HAL_UART_Init>
}
 80009b2:	b008      	add	sp, #32
 80009b4:	bd70      	pop	{r4, r5, r6, pc}
 80009b6:	46c0      	nop			; (mov r8, r8)
 80009b8:	40021000 	.word	0x40021000
 80009bc:	20000124 	.word	0x20000124
 80009c0:	40013800 	.word	0x40013800

080009c4 <trigger_setup>:

void trigger_setup(void)
{
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80009c4:	2180      	movs	r1, #128	; 0x80
 80009c6:	4b1e      	ldr	r3, [pc, #120]	; (8000a40 <trigger_setup+0x7c>)
{
 80009c8:	b5f0      	push	{r4, r5, r6, r7, lr}
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80009ca:	695a      	ldr	r2, [r3, #20]
 80009cc:	0289      	lsls	r1, r1, #10
 80009ce:	430a      	orrs	r2, r1
 80009d0:	615a      	str	r2, [r3, #20]
 80009d2:	695b      	ldr	r3, [r3, #20]
{
 80009d4:	b087      	sub	sp, #28
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80009d6:	400b      	ands	r3, r1
	GPIO_InitTypeDef GpioInit;
	GpioInit.Pin       = GPIO_PIN_7;
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
	GpioInit.Pull      = GPIO_NOPULL;
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOA, &GpioInit);
 80009d8:	2490      	movs	r4, #144	; 0x90
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80009da:	9300      	str	r3, [sp, #0]
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 80009dc:	2501      	movs	r5, #1
	GpioInit.Pull      = GPIO_NOPULL;
 80009de:	2600      	movs	r6, #0
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 80009e0:	2703      	movs	r7, #3
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80009e2:	9b00      	ldr	r3, [sp, #0]
	GpioInit.Pin       = GPIO_PIN_7;
 80009e4:	2380      	movs	r3, #128	; 0x80
	HAL_GPIO_Init(GPIOA, &GpioInit);
 80009e6:	05e4      	lsls	r4, r4, #23
 80009e8:	0020      	movs	r0, r4
 80009ea:	a901      	add	r1, sp, #4
	GpioInit.Pin       = GPIO_PIN_7;
 80009ec:	9301      	str	r3, [sp, #4]
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 80009ee:	9502      	str	r5, [sp, #8]
	GpioInit.Pull      = GPIO_NOPULL;
 80009f0:	9603      	str	r6, [sp, #12]
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 80009f2:	9704      	str	r7, [sp, #16]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 80009f4:	f000 fabc 	bl	8000f70 <HAL_GPIO_Init>

	GpioInit.Pin       = GPIO_PIN_4;
 80009f8:	2310      	movs	r3, #16
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
	GpioInit.Pull      = GPIO_NOPULL;
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOA, &GpioInit);
 80009fa:	0020      	movs	r0, r4
 80009fc:	a901      	add	r1, sp, #4
	GpioInit.Pin       = GPIO_PIN_4;
 80009fe:	9301      	str	r3, [sp, #4]
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8000a00:	9502      	str	r5, [sp, #8]
	GpioInit.Pull      = GPIO_NOPULL;
 8000a02:	9603      	str	r6, [sp, #12]
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000a04:	9704      	str	r7, [sp, #16]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8000a06:	f000 fab3 	bl	8000f70 <HAL_GPIO_Init>

	GpioInit.Pin       = GPIO_PIN_2;
 8000a0a:	2304      	movs	r3, #4
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
	GpioInit.Pull      = GPIO_NOPULL;
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8000a0c:	0020      	movs	r0, r4
 8000a0e:	a901      	add	r1, sp, #4
	GpioInit.Pin       = GPIO_PIN_2;
 8000a10:	9301      	str	r3, [sp, #4]
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8000a12:	9502      	str	r5, [sp, #8]
	GpioInit.Pull      = GPIO_NOPULL;
 8000a14:	9603      	str	r6, [sp, #12]
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000a16:	9704      	str	r7, [sp, #16]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8000a18:	f000 faaa 	bl	8000f70 <HAL_GPIO_Init>
	
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 8000a1c:	0032      	movs	r2, r6
 8000a1e:	0020      	movs	r0, r4
 8000a20:	2180      	movs	r1, #128	; 0x80
 8000a22:	f000 fb59 	bl	80010d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, SET);
 8000a26:	002a      	movs	r2, r5
 8000a28:	0020      	movs	r0, r4
 8000a2a:	2110      	movs	r1, #16
 8000a2c:	f000 fb54 	bl	80010d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, SET);
 8000a30:	002a      	movs	r2, r5
 8000a32:	2104      	movs	r1, #4
 8000a34:	0020      	movs	r0, r4
 8000a36:	f000 fb4f 	bl	80010d8 <HAL_GPIO_WritePin>
}
 8000a3a:	b007      	add	sp, #28
 8000a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a3e:	46c0      	nop			; (mov r8, r8)
 8000a40:	40021000 	.word	0x40021000

08000a44 <getch>:
{
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
}   

char getch(void)
{
 8000a44:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t d;
	while(HAL_UART_Receive(&UartHandle, &d, 1, 50) != HAL_OK)
		USART1->ICR |= (1 << 3); // make sure overrun error is cleared, otherwise can stall here
 8000a46:	2408      	movs	r4, #8
	while(HAL_UART_Receive(&UartHandle, &d, 1, 50) != HAL_OK)
 8000a48:	466b      	mov	r3, sp
 8000a4a:	1ddd      	adds	r5, r3, #7
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	2332      	movs	r3, #50	; 0x32
 8000a50:	0029      	movs	r1, r5
 8000a52:	4806      	ldr	r0, [pc, #24]	; (8000a6c <getch+0x28>)
 8000a54:	f000 fc2a 	bl	80012ac <HAL_UART_Receive>
 8000a58:	2800      	cmp	r0, #0
 8000a5a:	d101      	bne.n	8000a60 <getch+0x1c>
	return d;
 8000a5c:	7828      	ldrb	r0, [r5, #0]
}
 8000a5e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
		USART1->ICR |= (1 << 3); // make sure overrun error is cleared, otherwise can stall here
 8000a60:	4a03      	ldr	r2, [pc, #12]	; (8000a70 <getch+0x2c>)
 8000a62:	6a13      	ldr	r3, [r2, #32]
 8000a64:	4323      	orrs	r3, r4
 8000a66:	6213      	str	r3, [r2, #32]
 8000a68:	e7ee      	b.n	8000a48 <getch+0x4>
 8000a6a:	46c0      	nop			; (mov r8, r8)
 8000a6c:	20000124 	.word	0x20000124
 8000a70:	40013800 	.word	0x40013800

08000a74 <putch>:

void putch(char c)
{
 8000a74:	b507      	push	{r0, r1, r2, lr}
	uint8_t d  = c;
 8000a76:	466b      	mov	r3, sp
 8000a78:	1dd9      	adds	r1, r3, #7
 8000a7a:	7008      	strb	r0, [r1, #0]
	HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	4802      	ldr	r0, [pc, #8]	; (8000a88 <putch+0x14>)
 8000a80:	4b02      	ldr	r3, [pc, #8]	; (8000a8c <putch+0x18>)
 8000a82:	f000 fc89 	bl	8001398 <HAL_UART_Transmit>
}
 8000a86:	bd07      	pop	{r0, r1, r2, pc}
 8000a88:	20000124 	.word	0x20000124
 8000a8c:	00001388 	.word	0x00001388

08000a90 <HAL_GetTick>:
#define assert_param(expr) ((void)0U)

uint32_t HAL_GetTick(void)
{
	static uint32_t tick;
	return tick++;;
 8000a90:	4b02      	ldr	r3, [pc, #8]	; (8000a9c <HAL_GetTick+0xc>)
 8000a92:	6818      	ldr	r0, [r3, #0]
 8000a94:	1c42      	adds	r2, r0, #1
 8000a96:	601a      	str	r2, [r3, #0]
}
 8000a98:	4770      	bx	lr
 8000a9a:	46c0      	nop			; (mov r8, r8)
 8000a9c:	20000194 	.word	0x20000194

08000aa0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000aa2:	6803      	ldr	r3, [r0, #0]
{
 8000aa4:	0004      	movs	r4, r0
 8000aa6:	b085      	sub	sp, #20
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000aa8:	07db      	lsls	r3, r3, #31
 8000aaa:	d42f      	bmi.n	8000b0c <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000aac:	6823      	ldr	r3, [r4, #0]
 8000aae:	079b      	lsls	r3, r3, #30
 8000ab0:	d500      	bpl.n	8000ab4 <HAL_RCC_OscConfig+0x14>
 8000ab2:	e081      	b.n	8000bb8 <HAL_RCC_OscConfig+0x118>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ab4:	6823      	ldr	r3, [r4, #0]
 8000ab6:	071b      	lsls	r3, r3, #28
 8000ab8:	d500      	bpl.n	8000abc <HAL_RCC_OscConfig+0x1c>
 8000aba:	e0bc      	b.n	8000c36 <HAL_RCC_OscConfig+0x196>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000abc:	6823      	ldr	r3, [r4, #0]
 8000abe:	075b      	lsls	r3, r3, #29
 8000ac0:	d500      	bpl.n	8000ac4 <HAL_RCC_OscConfig+0x24>
 8000ac2:	e0df      	b.n	8000c84 <HAL_RCC_OscConfig+0x1e4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000ac4:	6823      	ldr	r3, [r4, #0]
 8000ac6:	06db      	lsls	r3, r3, #27
 8000ac8:	d51a      	bpl.n	8000b00 <HAL_RCC_OscConfig+0x60>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000aca:	6962      	ldr	r2, [r4, #20]
 8000acc:	2304      	movs	r3, #4
 8000ace:	4db4      	ldr	r5, [pc, #720]	; (8000da0 <HAL_RCC_OscConfig+0x300>)
 8000ad0:	2a01      	cmp	r2, #1
 8000ad2:	d000      	beq.n	8000ad6 <HAL_RCC_OscConfig+0x36>
 8000ad4:	e148      	b.n	8000d68 <HAL_RCC_OscConfig+0x2c8>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000ad6:	6b69      	ldr	r1, [r5, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000ad8:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000ada:	430b      	orrs	r3, r1
 8000adc:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8000ade:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000ae0:	431a      	orrs	r2, r3
 8000ae2:	636a      	str	r2, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000ae4:	f7ff ffd4 	bl	8000a90 <HAL_GetTick>
 8000ae8:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000aea:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000aec:	423b      	tst	r3, r7
 8000aee:	d100      	bne.n	8000af2 <HAL_RCC_OscConfig+0x52>
 8000af0:	e133      	b.n	8000d5a <HAL_RCC_OscConfig+0x2ba>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000af2:	21f8      	movs	r1, #248	; 0xf8
 8000af4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000af6:	69a3      	ldr	r3, [r4, #24]
 8000af8:	438a      	bics	r2, r1
 8000afa:	00db      	lsls	r3, r3, #3
 8000afc:	4313      	orrs	r3, r2
 8000afe:	636b      	str	r3, [r5, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000b00:	6a21      	ldr	r1, [r4, #32]
 8000b02:	2900      	cmp	r1, #0
 8000b04:	d000      	beq.n	8000b08 <HAL_RCC_OscConfig+0x68>
 8000b06:	e157      	b.n	8000db8 <HAL_RCC_OscConfig+0x318>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000b08:	2000      	movs	r0, #0
 8000b0a:	e02a      	b.n	8000b62 <HAL_RCC_OscConfig+0xc2>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000b0c:	220c      	movs	r2, #12
 8000b0e:	4da4      	ldr	r5, [pc, #656]	; (8000da0 <HAL_RCC_OscConfig+0x300>)
 8000b10:	686b      	ldr	r3, [r5, #4]
 8000b12:	4013      	ands	r3, r2
 8000b14:	2b04      	cmp	r3, #4
 8000b16:	d006      	beq.n	8000b26 <HAL_RCC_OscConfig+0x86>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b18:	686b      	ldr	r3, [r5, #4]
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	2b08      	cmp	r3, #8
 8000b1e:	d10a      	bne.n	8000b36 <HAL_RCC_OscConfig+0x96>
 8000b20:	686b      	ldr	r3, [r5, #4]
 8000b22:	03db      	lsls	r3, r3, #15
 8000b24:	d507      	bpl.n	8000b36 <HAL_RCC_OscConfig+0x96>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b26:	682b      	ldr	r3, [r5, #0]
 8000b28:	039b      	lsls	r3, r3, #14
 8000b2a:	d5bf      	bpl.n	8000aac <HAL_RCC_OscConfig+0xc>
 8000b2c:	6863      	ldr	r3, [r4, #4]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d1bc      	bne.n	8000aac <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000b32:	2001      	movs	r0, #1
 8000b34:	e015      	b.n	8000b62 <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b36:	6863      	ldr	r3, [r4, #4]
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d114      	bne.n	8000b66 <HAL_RCC_OscConfig+0xc6>
 8000b3c:	2380      	movs	r3, #128	; 0x80
 8000b3e:	682a      	ldr	r2, [r5, #0]
 8000b40:	025b      	lsls	r3, r3, #9
 8000b42:	4313      	orrs	r3, r2
 8000b44:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000b46:	f7ff ffa3 	bl	8000a90 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b4a:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8000b4c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b4e:	02bf      	lsls	r7, r7, #10
 8000b50:	682b      	ldr	r3, [r5, #0]
 8000b52:	423b      	tst	r3, r7
 8000b54:	d1aa      	bne.n	8000aac <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b56:	f7ff ff9b 	bl	8000a90 <HAL_GetTick>
 8000b5a:	1b80      	subs	r0, r0, r6
 8000b5c:	2864      	cmp	r0, #100	; 0x64
 8000b5e:	d9f7      	bls.n	8000b50 <HAL_RCC_OscConfig+0xb0>
            return HAL_TIMEOUT;
 8000b60:	2003      	movs	r0, #3
}
 8000b62:	b005      	add	sp, #20
 8000b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d116      	bne.n	8000b98 <HAL_RCC_OscConfig+0xf8>
 8000b6a:	682b      	ldr	r3, [r5, #0]
 8000b6c:	4a8d      	ldr	r2, [pc, #564]	; (8000da4 <HAL_RCC_OscConfig+0x304>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b6e:	2780      	movs	r7, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b70:	4013      	ands	r3, r2
 8000b72:	602b      	str	r3, [r5, #0]
 8000b74:	682b      	ldr	r3, [r5, #0]
 8000b76:	4a8c      	ldr	r2, [pc, #560]	; (8000da8 <HAL_RCC_OscConfig+0x308>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b78:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000b7e:	f7ff ff87 	bl	8000a90 <HAL_GetTick>
 8000b82:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b84:	682b      	ldr	r3, [r5, #0]
 8000b86:	423b      	tst	r3, r7
 8000b88:	d100      	bne.n	8000b8c <HAL_RCC_OscConfig+0xec>
 8000b8a:	e78f      	b.n	8000aac <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b8c:	f7ff ff80 	bl	8000a90 <HAL_GetTick>
 8000b90:	1b80      	subs	r0, r0, r6
 8000b92:	2864      	cmp	r0, #100	; 0x64
 8000b94:	d9f6      	bls.n	8000b84 <HAL_RCC_OscConfig+0xe4>
 8000b96:	e7e3      	b.n	8000b60 <HAL_RCC_OscConfig+0xc0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b98:	2b05      	cmp	r3, #5
 8000b9a:	d105      	bne.n	8000ba8 <HAL_RCC_OscConfig+0x108>
 8000b9c:	2380      	movs	r3, #128	; 0x80
 8000b9e:	682a      	ldr	r2, [r5, #0]
 8000ba0:	02db      	lsls	r3, r3, #11
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	602b      	str	r3, [r5, #0]
 8000ba6:	e7c9      	b.n	8000b3c <HAL_RCC_OscConfig+0x9c>
 8000ba8:	682b      	ldr	r3, [r5, #0]
 8000baa:	4a7e      	ldr	r2, [pc, #504]	; (8000da4 <HAL_RCC_OscConfig+0x304>)
 8000bac:	4013      	ands	r3, r2
 8000bae:	602b      	str	r3, [r5, #0]
 8000bb0:	682b      	ldr	r3, [r5, #0]
 8000bb2:	4a7d      	ldr	r2, [pc, #500]	; (8000da8 <HAL_RCC_OscConfig+0x308>)
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	e7c5      	b.n	8000b44 <HAL_RCC_OscConfig+0xa4>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000bb8:	220c      	movs	r2, #12
 8000bba:	4d79      	ldr	r5, [pc, #484]	; (8000da0 <HAL_RCC_OscConfig+0x300>)
 8000bbc:	686b      	ldr	r3, [r5, #4]
 8000bbe:	4213      	tst	r3, r2
 8000bc0:	d006      	beq.n	8000bd0 <HAL_RCC_OscConfig+0x130>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000bc2:	686b      	ldr	r3, [r5, #4]
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	2b08      	cmp	r3, #8
 8000bc8:	d110      	bne.n	8000bec <HAL_RCC_OscConfig+0x14c>
 8000bca:	686b      	ldr	r3, [r5, #4]
 8000bcc:	03db      	lsls	r3, r3, #15
 8000bce:	d40d      	bmi.n	8000bec <HAL_RCC_OscConfig+0x14c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bd0:	682b      	ldr	r3, [r5, #0]
 8000bd2:	079b      	lsls	r3, r3, #30
 8000bd4:	d502      	bpl.n	8000bdc <HAL_RCC_OscConfig+0x13c>
 8000bd6:	68e3      	ldr	r3, [r4, #12]
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d1aa      	bne.n	8000b32 <HAL_RCC_OscConfig+0x92>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bdc:	21f8      	movs	r1, #248	; 0xf8
 8000bde:	682a      	ldr	r2, [r5, #0]
 8000be0:	6923      	ldr	r3, [r4, #16]
 8000be2:	438a      	bics	r2, r1
 8000be4:	00db      	lsls	r3, r3, #3
 8000be6:	4313      	orrs	r3, r2
 8000be8:	602b      	str	r3, [r5, #0]
 8000bea:	e763      	b.n	8000ab4 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000bec:	68e2      	ldr	r2, [r4, #12]
 8000bee:	2301      	movs	r3, #1
 8000bf0:	2a00      	cmp	r2, #0
 8000bf2:	d00f      	beq.n	8000c14 <HAL_RCC_OscConfig+0x174>
        __HAL_RCC_HSI_ENABLE();
 8000bf4:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bf6:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000bfc:	f7ff ff48 	bl	8000a90 <HAL_GetTick>
 8000c00:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c02:	682b      	ldr	r3, [r5, #0]
 8000c04:	423b      	tst	r3, r7
 8000c06:	d1e9      	bne.n	8000bdc <HAL_RCC_OscConfig+0x13c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c08:	f7ff ff42 	bl	8000a90 <HAL_GetTick>
 8000c0c:	1b80      	subs	r0, r0, r6
 8000c0e:	2802      	cmp	r0, #2
 8000c10:	d9f7      	bls.n	8000c02 <HAL_RCC_OscConfig+0x162>
 8000c12:	e7a5      	b.n	8000b60 <HAL_RCC_OscConfig+0xc0>
        __HAL_RCC_HSI_DISABLE();
 8000c14:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c16:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 8000c18:	439a      	bics	r2, r3
 8000c1a:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 8000c1c:	f7ff ff38 	bl	8000a90 <HAL_GetTick>
 8000c20:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c22:	682b      	ldr	r3, [r5, #0]
 8000c24:	423b      	tst	r3, r7
 8000c26:	d100      	bne.n	8000c2a <HAL_RCC_OscConfig+0x18a>
 8000c28:	e744      	b.n	8000ab4 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c2a:	f7ff ff31 	bl	8000a90 <HAL_GetTick>
 8000c2e:	1b80      	subs	r0, r0, r6
 8000c30:	2802      	cmp	r0, #2
 8000c32:	d9f6      	bls.n	8000c22 <HAL_RCC_OscConfig+0x182>
 8000c34:	e794      	b.n	8000b60 <HAL_RCC_OscConfig+0xc0>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000c36:	69e2      	ldr	r2, [r4, #28]
 8000c38:	2301      	movs	r3, #1
 8000c3a:	4d59      	ldr	r5, [pc, #356]	; (8000da0 <HAL_RCC_OscConfig+0x300>)
 8000c3c:	2a00      	cmp	r2, #0
 8000c3e:	d010      	beq.n	8000c62 <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_ENABLE();
 8000c40:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c42:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 8000c44:	4313      	orrs	r3, r2
 8000c46:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000c48:	f7ff ff22 	bl	8000a90 <HAL_GetTick>
 8000c4c:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c4e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000c50:	423b      	tst	r3, r7
 8000c52:	d000      	beq.n	8000c56 <HAL_RCC_OscConfig+0x1b6>
 8000c54:	e732      	b.n	8000abc <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c56:	f7ff ff1b 	bl	8000a90 <HAL_GetTick>
 8000c5a:	1b80      	subs	r0, r0, r6
 8000c5c:	2802      	cmp	r0, #2
 8000c5e:	d9f6      	bls.n	8000c4e <HAL_RCC_OscConfig+0x1ae>
 8000c60:	e77e      	b.n	8000b60 <HAL_RCC_OscConfig+0xc0>
      __HAL_RCC_LSI_DISABLE();
 8000c62:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c64:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 8000c66:	439a      	bics	r2, r3
 8000c68:	626a      	str	r2, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000c6a:	f7ff ff11 	bl	8000a90 <HAL_GetTick>
 8000c6e:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c70:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000c72:	423b      	tst	r3, r7
 8000c74:	d100      	bne.n	8000c78 <HAL_RCC_OscConfig+0x1d8>
 8000c76:	e721      	b.n	8000abc <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c78:	f7ff ff0a 	bl	8000a90 <HAL_GetTick>
 8000c7c:	1b80      	subs	r0, r0, r6
 8000c7e:	2802      	cmp	r0, #2
 8000c80:	d9f6      	bls.n	8000c70 <HAL_RCC_OscConfig+0x1d0>
 8000c82:	e76d      	b.n	8000b60 <HAL_RCC_OscConfig+0xc0>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c84:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000c86:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c88:	4d45      	ldr	r5, [pc, #276]	; (8000da0 <HAL_RCC_OscConfig+0x300>)
 8000c8a:	0552      	lsls	r2, r2, #21
 8000c8c:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000c8e:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c90:	4213      	tst	r3, r2
 8000c92:	d108      	bne.n	8000ca6 <HAL_RCC_OscConfig+0x206>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c94:	69eb      	ldr	r3, [r5, #28]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	61eb      	str	r3, [r5, #28]
 8000c9a:	69eb      	ldr	r3, [r5, #28]
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	9303      	str	r3, [sp, #12]
 8000ca0:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ca6:	2780      	movs	r7, #128	; 0x80
 8000ca8:	4e40      	ldr	r6, [pc, #256]	; (8000dac <HAL_RCC_OscConfig+0x30c>)
 8000caa:	007f      	lsls	r7, r7, #1
 8000cac:	6833      	ldr	r3, [r6, #0]
 8000cae:	423b      	tst	r3, r7
 8000cb0:	d015      	beq.n	8000cde <HAL_RCC_OscConfig+0x23e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cb2:	68a3      	ldr	r3, [r4, #8]
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d122      	bne.n	8000cfe <HAL_RCC_OscConfig+0x25e>
 8000cb8:	6a2a      	ldr	r2, [r5, #32]
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8000cbe:	f7ff fee7 	bl	8000a90 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000cc2:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8000cc4:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000cc6:	6a2b      	ldr	r3, [r5, #32]
 8000cc8:	423b      	tst	r3, r7
 8000cca:	d03f      	beq.n	8000d4c <HAL_RCC_OscConfig+0x2ac>
    if(pwrclkchanged == SET)
 8000ccc:	9b00      	ldr	r3, [sp, #0]
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	d000      	beq.n	8000cd4 <HAL_RCC_OscConfig+0x234>
 8000cd2:	e6f7      	b.n	8000ac4 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000cd4:	69eb      	ldr	r3, [r5, #28]
 8000cd6:	4a36      	ldr	r2, [pc, #216]	; (8000db0 <HAL_RCC_OscConfig+0x310>)
 8000cd8:	4013      	ands	r3, r2
 8000cda:	61eb      	str	r3, [r5, #28]
 8000cdc:	e6f2      	b.n	8000ac4 <HAL_RCC_OscConfig+0x24>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000cde:	6833      	ldr	r3, [r6, #0]
 8000ce0:	433b      	orrs	r3, r7
 8000ce2:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000ce4:	f7ff fed4 	bl	8000a90 <HAL_GetTick>
 8000ce8:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cea:	6833      	ldr	r3, [r6, #0]
 8000cec:	423b      	tst	r3, r7
 8000cee:	d1e0      	bne.n	8000cb2 <HAL_RCC_OscConfig+0x212>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000cf0:	f7ff fece 	bl	8000a90 <HAL_GetTick>
 8000cf4:	9b01      	ldr	r3, [sp, #4]
 8000cf6:	1ac0      	subs	r0, r0, r3
 8000cf8:	2864      	cmp	r0, #100	; 0x64
 8000cfa:	d9f6      	bls.n	8000cea <HAL_RCC_OscConfig+0x24a>
 8000cfc:	e730      	b.n	8000b60 <HAL_RCC_OscConfig+0xc0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cfe:	2201      	movs	r2, #1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d114      	bne.n	8000d2e <HAL_RCC_OscConfig+0x28e>
 8000d04:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d06:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d08:	4393      	bics	r3, r2
 8000d0a:	622b      	str	r3, [r5, #32]
 8000d0c:	6a2b      	ldr	r3, [r5, #32]
 8000d0e:	3203      	adds	r2, #3
 8000d10:	4393      	bics	r3, r2
 8000d12:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8000d14:	f7ff febc 	bl	8000a90 <HAL_GetTick>
 8000d18:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d1a:	6a2b      	ldr	r3, [r5, #32]
 8000d1c:	423b      	tst	r3, r7
 8000d1e:	d0d5      	beq.n	8000ccc <HAL_RCC_OscConfig+0x22c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d20:	f7ff feb6 	bl	8000a90 <HAL_GetTick>
 8000d24:	4b23      	ldr	r3, [pc, #140]	; (8000db4 <HAL_RCC_OscConfig+0x314>)
 8000d26:	1b80      	subs	r0, r0, r6
 8000d28:	4298      	cmp	r0, r3
 8000d2a:	d9f6      	bls.n	8000d1a <HAL_RCC_OscConfig+0x27a>
 8000d2c:	e718      	b.n	8000b60 <HAL_RCC_OscConfig+0xc0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d2e:	2b05      	cmp	r3, #5
 8000d30:	d105      	bne.n	8000d3e <HAL_RCC_OscConfig+0x29e>
 8000d32:	6a29      	ldr	r1, [r5, #32]
 8000d34:	3b01      	subs	r3, #1
 8000d36:	430b      	orrs	r3, r1
 8000d38:	622b      	str	r3, [r5, #32]
 8000d3a:	6a2b      	ldr	r3, [r5, #32]
 8000d3c:	e7bd      	b.n	8000cba <HAL_RCC_OscConfig+0x21a>
 8000d3e:	6a2b      	ldr	r3, [r5, #32]
 8000d40:	4393      	bics	r3, r2
 8000d42:	2204      	movs	r2, #4
 8000d44:	622b      	str	r3, [r5, #32]
 8000d46:	6a2b      	ldr	r3, [r5, #32]
 8000d48:	4393      	bics	r3, r2
 8000d4a:	e7b7      	b.n	8000cbc <HAL_RCC_OscConfig+0x21c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d4c:	f7ff fea0 	bl	8000a90 <HAL_GetTick>
 8000d50:	4b18      	ldr	r3, [pc, #96]	; (8000db4 <HAL_RCC_OscConfig+0x314>)
 8000d52:	1b80      	subs	r0, r0, r6
 8000d54:	4298      	cmp	r0, r3
 8000d56:	d9b6      	bls.n	8000cc6 <HAL_RCC_OscConfig+0x226>
 8000d58:	e702      	b.n	8000b60 <HAL_RCC_OscConfig+0xc0>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000d5a:	f7ff fe99 	bl	8000a90 <HAL_GetTick>
 8000d5e:	1b80      	subs	r0, r0, r6
 8000d60:	2802      	cmp	r0, #2
 8000d62:	d800      	bhi.n	8000d66 <HAL_RCC_OscConfig+0x2c6>
 8000d64:	e6c1      	b.n	8000aea <HAL_RCC_OscConfig+0x4a>
 8000d66:	e6fb      	b.n	8000b60 <HAL_RCC_OscConfig+0xc0>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000d68:	3205      	adds	r2, #5
 8000d6a:	d103      	bne.n	8000d74 <HAL_RCC_OscConfig+0x2d4>
      __HAL_RCC_HSI14ADC_ENABLE();
 8000d6c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000d6e:	439a      	bics	r2, r3
 8000d70:	636a      	str	r2, [r5, #52]	; 0x34
 8000d72:	e6be      	b.n	8000af2 <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000d74:	6b6a      	ldr	r2, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000d76:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000d78:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8000d7a:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8000d7c:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8000d7e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000d80:	4393      	bics	r3, r2
 8000d82:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000d84:	f7ff fe84 	bl	8000a90 <HAL_GetTick>
 8000d88:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000d8a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000d8c:	423b      	tst	r3, r7
 8000d8e:	d100      	bne.n	8000d92 <HAL_RCC_OscConfig+0x2f2>
 8000d90:	e6b6      	b.n	8000b00 <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000d92:	f7ff fe7d 	bl	8000a90 <HAL_GetTick>
 8000d96:	1b80      	subs	r0, r0, r6
 8000d98:	2802      	cmp	r0, #2
 8000d9a:	d9f6      	bls.n	8000d8a <HAL_RCC_OscConfig+0x2ea>
 8000d9c:	e6e0      	b.n	8000b60 <HAL_RCC_OscConfig+0xc0>
 8000d9e:	46c0      	nop			; (mov r8, r8)
 8000da0:	40021000 	.word	0x40021000
 8000da4:	fffeffff 	.word	0xfffeffff
 8000da8:	fffbffff 	.word	0xfffbffff
 8000dac:	40007000 	.word	0x40007000
 8000db0:	efffffff 	.word	0xefffffff
 8000db4:	00001388 	.word	0x00001388
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000db8:	220c      	movs	r2, #12
 8000dba:	4d25      	ldr	r5, [pc, #148]	; (8000e50 <HAL_RCC_OscConfig+0x3b0>)
 8000dbc:	686b      	ldr	r3, [r5, #4]
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	2b08      	cmp	r3, #8
 8000dc2:	d100      	bne.n	8000dc6 <HAL_RCC_OscConfig+0x326>
 8000dc4:	e6b5      	b.n	8000b32 <HAL_RCC_OscConfig+0x92>
        __HAL_RCC_PLL_DISABLE();
 8000dc6:	682b      	ldr	r3, [r5, #0]
 8000dc8:	4a22      	ldr	r2, [pc, #136]	; (8000e54 <HAL_RCC_OscConfig+0x3b4>)
 8000dca:	4013      	ands	r3, r2
 8000dcc:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000dce:	2902      	cmp	r1, #2
 8000dd0:	d12f      	bne.n	8000e32 <HAL_RCC_OscConfig+0x392>
        tickstart = HAL_GetTick();
 8000dd2:	f7ff fe5d 	bl	8000a90 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000dd6:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8000dd8:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000dda:	04bf      	lsls	r7, r7, #18
 8000ddc:	682b      	ldr	r3, [r5, #0]
 8000dde:	423b      	tst	r3, r7
 8000de0:	d121      	bne.n	8000e26 <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000de2:	220f      	movs	r2, #15
 8000de4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000de6:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000de8:	4393      	bics	r3, r2
 8000dea:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000dec:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000dee:	4313      	orrs	r3, r2
 8000df0:	62eb      	str	r3, [r5, #44]	; 0x2c
 8000df2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000df4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000df6:	686a      	ldr	r2, [r5, #4]
 8000df8:	430b      	orrs	r3, r1
 8000dfa:	4917      	ldr	r1, [pc, #92]	; (8000e58 <HAL_RCC_OscConfig+0x3b8>)
 8000dfc:	400a      	ands	r2, r1
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000e02:	2380      	movs	r3, #128	; 0x80
 8000e04:	682a      	ldr	r2, [r5, #0]
 8000e06:	045b      	lsls	r3, r3, #17
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000e0c:	f7ff fe40 	bl	8000a90 <HAL_GetTick>
 8000e10:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e12:	682b      	ldr	r3, [r5, #0]
 8000e14:	4233      	tst	r3, r6
 8000e16:	d000      	beq.n	8000e1a <HAL_RCC_OscConfig+0x37a>
 8000e18:	e676      	b.n	8000b08 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e1a:	f7ff fe39 	bl	8000a90 <HAL_GetTick>
 8000e1e:	1b00      	subs	r0, r0, r4
 8000e20:	2802      	cmp	r0, #2
 8000e22:	d9f6      	bls.n	8000e12 <HAL_RCC_OscConfig+0x372>
 8000e24:	e69c      	b.n	8000b60 <HAL_RCC_OscConfig+0xc0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e26:	f7ff fe33 	bl	8000a90 <HAL_GetTick>
 8000e2a:	1b80      	subs	r0, r0, r6
 8000e2c:	2802      	cmp	r0, #2
 8000e2e:	d9d5      	bls.n	8000ddc <HAL_RCC_OscConfig+0x33c>
 8000e30:	e696      	b.n	8000b60 <HAL_RCC_OscConfig+0xc0>
        tickstart = HAL_GetTick();
 8000e32:	f7ff fe2d 	bl	8000a90 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e36:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000e38:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e3a:	04b6      	lsls	r6, r6, #18
 8000e3c:	682b      	ldr	r3, [r5, #0]
 8000e3e:	4233      	tst	r3, r6
 8000e40:	d100      	bne.n	8000e44 <HAL_RCC_OscConfig+0x3a4>
 8000e42:	e661      	b.n	8000b08 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e44:	f7ff fe24 	bl	8000a90 <HAL_GetTick>
 8000e48:	1b00      	subs	r0, r0, r4
 8000e4a:	2802      	cmp	r0, #2
 8000e4c:	d9f6      	bls.n	8000e3c <HAL_RCC_OscConfig+0x39c>
 8000e4e:	e687      	b.n	8000b60 <HAL_RCC_OscConfig+0xc0>
 8000e50:	40021000 	.word	0x40021000
 8000e54:	feffffff 	.word	0xfeffffff
 8000e58:	ffc2ffff 	.word	0xffc2ffff

08000e5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000e5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000e5e:	2201      	movs	r2, #1
 8000e60:	4d3e      	ldr	r5, [pc, #248]	; (8000f5c <HAL_RCC_ClockConfig+0x100>)
{
 8000e62:	0004      	movs	r4, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000e64:	682b      	ldr	r3, [r5, #0]
{
 8000e66:	000f      	movs	r7, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000e68:	4013      	ands	r3, r2
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d312      	bcc.n	8000e94 <HAL_RCC_ClockConfig+0x38>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000e6e:	6822      	ldr	r2, [r4, #0]
 8000e70:	0793      	lsls	r3, r2, #30
 8000e72:	d419      	bmi.n	8000ea8 <HAL_RCC_ClockConfig+0x4c>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000e74:	07d2      	lsls	r2, r2, #31
 8000e76:	d41f      	bmi.n	8000eb8 <HAL_RCC_ClockConfig+0x5c>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000e78:	2301      	movs	r3, #1
 8000e7a:	682a      	ldr	r2, [r5, #0]
 8000e7c:	401a      	ands	r2, r3
 8000e7e:	42ba      	cmp	r2, r7
 8000e80:	d85d      	bhi.n	8000f3e <HAL_RCC_ClockConfig+0xe2>
      return HAL_ERROR;
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e82:	6823      	ldr	r3, [r4, #0]
 8000e84:	075b      	lsls	r3, r3, #29
 8000e86:	d461      	bmi.n	8000f4c <HAL_RCC_ClockConfig+0xf0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
  }
  
  /* Update the SystemCoreClock global variable */
  //SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
  SystemCoreClock = 7372800;
 8000e88:	22e1      	movs	r2, #225	; 0xe1
 8000e8a:	4b35      	ldr	r3, [pc, #212]	; (8000f60 <HAL_RCC_ClockConfig+0x104>)
 8000e8c:	03d2      	lsls	r2, r2, #15
  
  /* Configure the source of time base considering new system clocks settings*/
  //HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
 8000e8e:	2000      	movs	r0, #0
  SystemCoreClock = 7372800;
 8000e90:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8000e92:	e008      	b.n	8000ea6 <HAL_RCC_ClockConfig+0x4a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e94:	682b      	ldr	r3, [r5, #0]
 8000e96:	4393      	bics	r3, r2
 8000e98:	430b      	orrs	r3, r1
 8000e9a:	602b      	str	r3, [r5, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000e9c:	682b      	ldr	r3, [r5, #0]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	428b      	cmp	r3, r1
 8000ea2:	d0e4      	beq.n	8000e6e <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 8000ea4:	2001      	movs	r0, #1
}
 8000ea6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ea8:	20f0      	movs	r0, #240	; 0xf0
 8000eaa:	492e      	ldr	r1, [pc, #184]	; (8000f64 <HAL_RCC_ClockConfig+0x108>)
 8000eac:	684b      	ldr	r3, [r1, #4]
 8000eae:	4383      	bics	r3, r0
 8000eb0:	68a0      	ldr	r0, [r4, #8]
 8000eb2:	4303      	orrs	r3, r0
 8000eb4:	604b      	str	r3, [r1, #4]
 8000eb6:	e7dd      	b.n	8000e74 <HAL_RCC_ClockConfig+0x18>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000eb8:	4e2a      	ldr	r6, [pc, #168]	; (8000f64 <HAL_RCC_ClockConfig+0x108>)
 8000eba:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ebc:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ebe:	2a01      	cmp	r2, #1
 8000ec0:	d11a      	bne.n	8000ef8 <HAL_RCC_ClockConfig+0x9c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ec2:	039b      	lsls	r3, r3, #14
 8000ec4:	d5ee      	bpl.n	8000ea4 <HAL_RCC_ClockConfig+0x48>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000ec6:	2103      	movs	r1, #3
 8000ec8:	6873      	ldr	r3, [r6, #4]
 8000eca:	438b      	bics	r3, r1
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000ed0:	f7ff fdde 	bl	8000a90 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ed4:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8000ed6:	9001      	str	r0, [sp, #4]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d115      	bne.n	8000f08 <HAL_RCC_ClockConfig+0xac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000edc:	220c      	movs	r2, #12
 8000ede:	6873      	ldr	r3, [r6, #4]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	2b04      	cmp	r3, #4
 8000ee4:	d0c8      	beq.n	8000e78 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ee6:	f7ff fdd3 	bl	8000a90 <HAL_GetTick>
 8000eea:	9b01      	ldr	r3, [sp, #4]
 8000eec:	1ac0      	subs	r0, r0, r3
 8000eee:	4b1e      	ldr	r3, [pc, #120]	; (8000f68 <HAL_RCC_ClockConfig+0x10c>)
 8000ef0:	4298      	cmp	r0, r3
 8000ef2:	d9f3      	bls.n	8000edc <HAL_RCC_ClockConfig+0x80>
          return HAL_TIMEOUT;
 8000ef4:	2003      	movs	r0, #3
 8000ef6:	e7d6      	b.n	8000ea6 <HAL_RCC_ClockConfig+0x4a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000ef8:	2a02      	cmp	r2, #2
 8000efa:	d102      	bne.n	8000f02 <HAL_RCC_ClockConfig+0xa6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000efc:	019b      	lsls	r3, r3, #6
 8000efe:	d4e2      	bmi.n	8000ec6 <HAL_RCC_ClockConfig+0x6a>
 8000f00:	e7d0      	b.n	8000ea4 <HAL_RCC_ClockConfig+0x48>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f02:	079b      	lsls	r3, r3, #30
 8000f04:	d4df      	bmi.n	8000ec6 <HAL_RCC_ClockConfig+0x6a>
 8000f06:	e7cd      	b.n	8000ea4 <HAL_RCC_ClockConfig+0x48>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f08:	2b02      	cmp	r3, #2
 8000f0a:	d012      	beq.n	8000f32 <HAL_RCC_ClockConfig+0xd6>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f0c:	220c      	movs	r2, #12
 8000f0e:	6873      	ldr	r3, [r6, #4]
 8000f10:	4213      	tst	r3, r2
 8000f12:	d0b1      	beq.n	8000e78 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f14:	f7ff fdbc 	bl	8000a90 <HAL_GetTick>
 8000f18:	9b01      	ldr	r3, [sp, #4]
 8000f1a:	1ac0      	subs	r0, r0, r3
 8000f1c:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <HAL_RCC_ClockConfig+0x10c>)
 8000f1e:	4298      	cmp	r0, r3
 8000f20:	d9f4      	bls.n	8000f0c <HAL_RCC_ClockConfig+0xb0>
 8000f22:	e7e7      	b.n	8000ef4 <HAL_RCC_ClockConfig+0x98>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f24:	f7ff fdb4 	bl	8000a90 <HAL_GetTick>
 8000f28:	9b01      	ldr	r3, [sp, #4]
 8000f2a:	1ac0      	subs	r0, r0, r3
 8000f2c:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <HAL_RCC_ClockConfig+0x10c>)
 8000f2e:	4298      	cmp	r0, r3
 8000f30:	d8e0      	bhi.n	8000ef4 <HAL_RCC_ClockConfig+0x98>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f32:	220c      	movs	r2, #12
 8000f34:	6873      	ldr	r3, [r6, #4]
 8000f36:	4013      	ands	r3, r2
 8000f38:	2b08      	cmp	r3, #8
 8000f3a:	d1f3      	bne.n	8000f24 <HAL_RCC_ClockConfig+0xc8>
 8000f3c:	e79c      	b.n	8000e78 <HAL_RCC_ClockConfig+0x1c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f3e:	682a      	ldr	r2, [r5, #0]
 8000f40:	439a      	bics	r2, r3
 8000f42:	602a      	str	r2, [r5, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000f44:	682a      	ldr	r2, [r5, #0]
 8000f46:	421a      	tst	r2, r3
 8000f48:	d09b      	beq.n	8000e82 <HAL_RCC_ClockConfig+0x26>
 8000f4a:	e7ab      	b.n	8000ea4 <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000f4c:	4a05      	ldr	r2, [pc, #20]	; (8000f64 <HAL_RCC_ClockConfig+0x108>)
 8000f4e:	4907      	ldr	r1, [pc, #28]	; (8000f6c <HAL_RCC_ClockConfig+0x110>)
 8000f50:	6853      	ldr	r3, [r2, #4]
 8000f52:	400b      	ands	r3, r1
 8000f54:	68e1      	ldr	r1, [r4, #12]
 8000f56:	430b      	orrs	r3, r1
 8000f58:	6053      	str	r3, [r2, #4]
 8000f5a:	e795      	b.n	8000e88 <HAL_RCC_ClockConfig+0x2c>
 8000f5c:	40022000 	.word	0x40022000
 8000f60:	20000000 	.word	0x20000000
 8000f64:	40021000 	.word	0x40021000
 8000f68:	00001388 	.word	0x00001388
 8000f6c:	fffff8ff 	.word	0xfffff8ff

08000f70 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
  uint32_t position = 0x00U;
 8000f70:	2300      	movs	r3, #0
{ 
 8000f72:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f74:	b087      	sub	sp, #28
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000f76:	680a      	ldr	r2, [r1, #0]
 8000f78:	0014      	movs	r4, r2
 8000f7a:	40dc      	lsrs	r4, r3
 8000f7c:	d101      	bne.n	8000f82 <HAL_GPIO_Init+0x12>
      }
    }
    
    position++;
  } 
}
 8000f7e:	b007      	add	sp, #28
 8000f80:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000f82:	2601      	movs	r6, #1
 8000f84:	0014      	movs	r4, r2
 8000f86:	409e      	lsls	r6, r3
 8000f88:	4034      	ands	r4, r6
 8000f8a:	9402      	str	r4, [sp, #8]
    if(iocurrent)
 8000f8c:	4232      	tst	r2, r6
 8000f8e:	d100      	bne.n	8000f92 <HAL_GPIO_Init+0x22>
 8000f90:	e094      	b.n	80010bc <HAL_GPIO_Init+0x14c>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000f92:	684a      	ldr	r2, [r1, #4]
 8000f94:	0015      	movs	r5, r2
 8000f96:	9201      	str	r2, [sp, #4]
 8000f98:	2210      	movs	r2, #16
 8000f9a:	4395      	bics	r5, r2
 8000f9c:	9503      	str	r5, [sp, #12]
 8000f9e:	2d02      	cmp	r5, #2
 8000fa0:	d10f      	bne.n	8000fc2 <HAL_GPIO_Init+0x52>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000fa2:	2407      	movs	r4, #7
 8000fa4:	250f      	movs	r5, #15
 8000fa6:	401c      	ands	r4, r3
 8000fa8:	00a4      	lsls	r4, r4, #2
 8000faa:	40a5      	lsls	r5, r4
        temp = GPIOx->AFR[position >> 3];
 8000fac:	08da      	lsrs	r2, r3, #3
 8000fae:	0092      	lsls	r2, r2, #2
 8000fb0:	1882      	adds	r2, r0, r2
 8000fb2:	6a17      	ldr	r7, [r2, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000fb4:	43af      	bics	r7, r5
 8000fb6:	46bc      	mov	ip, r7
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8000fb8:	690f      	ldr	r7, [r1, #16]
 8000fba:	40a7      	lsls	r7, r4
 8000fbc:	4664      	mov	r4, ip
 8000fbe:	4327      	orrs	r7, r4
        GPIOx->AFR[position >> 3U] = temp;
 8000fc0:	6217      	str	r7, [r2, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000fc2:	2203      	movs	r2, #3
 8000fc4:	005c      	lsls	r4, r3, #1
 8000fc6:	40a2      	lsls	r2, r4
 8000fc8:	43d5      	mvns	r5, r2
 8000fca:	46ac      	mov	ip, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fcc:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000fce:	6807      	ldr	r7, [r0, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000fd0:	4397      	bics	r7, r2
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fd2:	9a01      	ldr	r2, [sp, #4]
 8000fd4:	402a      	ands	r2, r5
 8000fd6:	40a2      	lsls	r2, r4
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fd8:	9d03      	ldr	r5, [sp, #12]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fda:	433a      	orrs	r2, r7
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fdc:	3d01      	subs	r5, #1
      GPIOx->MODER = temp;
 8000fde:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fe0:	2d01      	cmp	r5, #1
 8000fe2:	d80f      	bhi.n	8001004 <HAL_GPIO_Init+0x94>
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fe4:	4662      	mov	r2, ip
        temp = GPIOx->OSPEEDR; 
 8000fe6:	6885      	ldr	r5, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fe8:	4015      	ands	r5, r2
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000fea:	68ca      	ldr	r2, [r1, #12]
 8000fec:	40a2      	lsls	r2, r4
 8000fee:	432a      	orrs	r2, r5
        GPIOx->OSPEEDR = temp;
 8000ff0:	6082      	str	r2, [r0, #8]
        temp = GPIOx->OTYPER;
 8000ff2:	6845      	ldr	r5, [r0, #4]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ff4:	9a01      	ldr	r2, [sp, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000ff6:	43b5      	bics	r5, r6
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ff8:	2601      	movs	r6, #1
 8000ffa:	0912      	lsrs	r2, r2, #4
 8000ffc:	4032      	ands	r2, r6
 8000ffe:	409a      	lsls	r2, r3
 8001000:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 8001002:	6042      	str	r2, [r0, #4]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001004:	4662      	mov	r2, ip
      temp = GPIOx->PUPDR;
 8001006:	68c5      	ldr	r5, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001008:	4015      	ands	r5, r2
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800100a:	688a      	ldr	r2, [r1, #8]
 800100c:	40a2      	lsls	r2, r4
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800100e:	2480      	movs	r4, #128	; 0x80
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8001010:	432a      	orrs	r2, r5
      GPIOx->PUPDR = temp;
 8001012:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001014:	9a01      	ldr	r2, [sp, #4]
 8001016:	0564      	lsls	r4, r4, #21
 8001018:	4222      	tst	r2, r4
 800101a:	d04f      	beq.n	80010bc <HAL_GPIO_Init+0x14c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101c:	2501      	movs	r5, #1
 800101e:	4a28      	ldr	r2, [pc, #160]	; (80010c0 <HAL_GPIO_Init+0x150>)
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001020:	2790      	movs	r7, #144	; 0x90
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001022:	6994      	ldr	r4, [r2, #24]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001024:	05ff      	lsls	r7, r7, #23
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001026:	432c      	orrs	r4, r5
 8001028:	6194      	str	r4, [r2, #24]
 800102a:	6992      	ldr	r2, [r2, #24]
        temp = SYSCFG->EXTICR[position >> 2];
 800102c:	089c      	lsrs	r4, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800102e:	402a      	ands	r2, r5
 8001030:	9205      	str	r2, [sp, #20]
 8001032:	9a05      	ldr	r2, [sp, #20]
        temp = SYSCFG->EXTICR[position >> 2];
 8001034:	4a23      	ldr	r2, [pc, #140]	; (80010c4 <HAL_GPIO_Init+0x154>)
 8001036:	00a4      	lsls	r4, r4, #2
 8001038:	18a4      	adds	r4, r4, r2
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800103a:	220f      	movs	r2, #15
 800103c:	3502      	adds	r5, #2
 800103e:	401d      	ands	r5, r3
 8001040:	00ad      	lsls	r5, r5, #2
 8001042:	40aa      	lsls	r2, r5
        temp = SYSCFG->EXTICR[position >> 2];
 8001044:	68a6      	ldr	r6, [r4, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001046:	4396      	bics	r6, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001048:	2200      	movs	r2, #0
 800104a:	42b8      	cmp	r0, r7
 800104c:	d00c      	beq.n	8001068 <HAL_GPIO_Init+0xf8>
 800104e:	4f1e      	ldr	r7, [pc, #120]	; (80010c8 <HAL_GPIO_Init+0x158>)
 8001050:	3201      	adds	r2, #1
 8001052:	42b8      	cmp	r0, r7
 8001054:	d008      	beq.n	8001068 <HAL_GPIO_Init+0xf8>
 8001056:	4f1d      	ldr	r7, [pc, #116]	; (80010cc <HAL_GPIO_Init+0x15c>)
 8001058:	3201      	adds	r2, #1
 800105a:	42b8      	cmp	r0, r7
 800105c:	d004      	beq.n	8001068 <HAL_GPIO_Init+0xf8>
 800105e:	4f1c      	ldr	r7, [pc, #112]	; (80010d0 <HAL_GPIO_Init+0x160>)
 8001060:	3203      	adds	r2, #3
 8001062:	42b8      	cmp	r0, r7
 8001064:	d100      	bne.n	8001068 <HAL_GPIO_Init+0xf8>
 8001066:	3a02      	subs	r2, #2
 8001068:	40aa      	lsls	r2, r5
 800106a:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 800106c:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 800106e:	4a19      	ldr	r2, [pc, #100]	; (80010d4 <HAL_GPIO_Init+0x164>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001070:	9c02      	ldr	r4, [sp, #8]
        temp = EXTI->IMR;
 8001072:	6816      	ldr	r6, [r2, #0]
          SET_BIT(temp, iocurrent); 
 8001074:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001076:	9f01      	ldr	r7, [sp, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001078:	43e4      	mvns	r4, r4
          SET_BIT(temp, iocurrent); 
 800107a:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800107c:	03ff      	lsls	r7, r7, #15
 800107e:	d401      	bmi.n	8001084 <HAL_GPIO_Init+0x114>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001080:	0035      	movs	r5, r6
 8001082:	4025      	ands	r5, r4
        EXTI->IMR = temp;
 8001084:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8001086:	6856      	ldr	r6, [r2, #4]
          SET_BIT(temp, iocurrent); 
 8001088:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800108a:	9f01      	ldr	r7, [sp, #4]
          SET_BIT(temp, iocurrent); 
 800108c:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800108e:	03bf      	lsls	r7, r7, #14
 8001090:	d401      	bmi.n	8001096 <HAL_GPIO_Init+0x126>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8001092:	0035      	movs	r5, r6
 8001094:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 8001096:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8001098:	6896      	ldr	r6, [r2, #8]
          SET_BIT(temp, iocurrent); 
 800109a:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800109c:	9f01      	ldr	r7, [sp, #4]
          SET_BIT(temp, iocurrent); 
 800109e:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010a0:	02ff      	lsls	r7, r7, #11
 80010a2:	d401      	bmi.n	80010a8 <HAL_GPIO_Init+0x138>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80010a4:	0035      	movs	r5, r6
 80010a6:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 80010a8:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 80010aa:	68d5      	ldr	r5, [r2, #12]
          SET_BIT(temp, iocurrent); 
 80010ac:	9e02      	ldr	r6, [sp, #8]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010ae:	9f01      	ldr	r7, [sp, #4]
          SET_BIT(temp, iocurrent); 
 80010b0:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010b2:	02bf      	lsls	r7, r7, #10
 80010b4:	d401      	bmi.n	80010ba <HAL_GPIO_Init+0x14a>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80010b6:	4025      	ands	r5, r4
 80010b8:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 80010ba:	60d6      	str	r6, [r2, #12]
    position++;
 80010bc:	3301      	adds	r3, #1
 80010be:	e75a      	b.n	8000f76 <HAL_GPIO_Init+0x6>
 80010c0:	40021000 	.word	0x40021000
 80010c4:	40010000 	.word	0x40010000
 80010c8:	48000400 	.word	0x48000400
 80010cc:	48000800 	.word	0x48000800
 80010d0:	48000c00 	.word	0x48000c00
 80010d4:	40010400 	.word	0x40010400

080010d8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010d8:	2a00      	cmp	r2, #0
 80010da:	d001      	beq.n	80010e0 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010dc:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}										  
 80010de:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010e0:	6281      	str	r1, [r0, #40]	; 0x28
}										  
 80010e2:	e7fc      	b.n	80010de <HAL_GPIO_WritePin+0x6>

080010e4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80010e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80010e6:	0004      	movs	r4, r0
 80010e8:	000e      	movs	r6, r1
 80010ea:	0017      	movs	r7, r2
 80010ec:	9301      	str	r3, [sp, #4]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80010ee:	6825      	ldr	r5, [r4, #0]
 80010f0:	69eb      	ldr	r3, [r5, #28]
 80010f2:	4033      	ands	r3, r6
 80010f4:	1b9b      	subs	r3, r3, r6
 80010f6:	425a      	negs	r2, r3
 80010f8:	4153      	adcs	r3, r2
 80010fa:	42bb      	cmp	r3, r7
 80010fc:	d001      	beq.n	8001102 <UART_WaitOnFlagUntilTimeout+0x1e>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80010fe:	2000      	movs	r0, #0
 8001100:	e017      	b.n	8001132 <UART_WaitOnFlagUntilTimeout+0x4e>
    if(Timeout != HAL_MAX_DELAY)
 8001102:	9b08      	ldr	r3, [sp, #32]
 8001104:	3301      	adds	r3, #1
 8001106:	d0f3      	beq.n	80010f0 <UART_WaitOnFlagUntilTimeout+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001108:	9b08      	ldr	r3, [sp, #32]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d112      	bne.n	8001134 <UART_WaitOnFlagUntilTimeout+0x50>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800110e:	682b      	ldr	r3, [r5, #0]
 8001110:	4a0c      	ldr	r2, [pc, #48]	; (8001144 <UART_WaitOnFlagUntilTimeout+0x60>)
        return HAL_TIMEOUT;
 8001112:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001114:	4013      	ands	r3, r2
 8001116:	602b      	str	r3, [r5, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001118:	68ab      	ldr	r3, [r5, #8]
 800111a:	32a3      	adds	r2, #163	; 0xa3
 800111c:	32ff      	adds	r2, #255	; 0xff
 800111e:	4393      	bics	r3, r2
        huart->gState  = HAL_UART_STATE_READY;
 8001120:	0022      	movs	r2, r4
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001122:	60ab      	str	r3, [r5, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8001124:	2320      	movs	r3, #32
 8001126:	3269      	adds	r2, #105	; 0x69
 8001128:	7013      	strb	r3, [r2, #0]
        huart->RxState = HAL_UART_STATE_READY;
 800112a:	7053      	strb	r3, [r2, #1]
        __HAL_UNLOCK(huart);
 800112c:	2300      	movs	r3, #0
 800112e:	3468      	adds	r4, #104	; 0x68
 8001130:	7023      	strb	r3, [r4, #0]
}
 8001132:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001134:	f7ff fcac 	bl	8000a90 <HAL_GetTick>
 8001138:	9b01      	ldr	r3, [sp, #4]
 800113a:	1ac0      	subs	r0, r0, r3
 800113c:	9b08      	ldr	r3, [sp, #32]
 800113e:	4298      	cmp	r0, r3
 8001140:	d9d5      	bls.n	80010ee <UART_WaitOnFlagUntilTimeout+0xa>
 8001142:	e7e4      	b.n	800110e <UART_WaitOnFlagUntilTimeout+0x2a>
 8001144:	fffffe5f 	.word	0xfffffe5f

08001148 <UART_SetConfig>:

  return HAL_OK;
}

HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001148:	0003      	movs	r3, r0
 800114a:	b570      	push	{r4, r5, r6, lr}
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800114c:	689a      	ldr	r2, [r3, #8]
 800114e:	691d      	ldr	r5, [r3, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001150:	6804      	ldr	r4, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001152:	432a      	orrs	r2, r5
 8001154:	695d      	ldr	r5, [r3, #20]
 8001156:	69c1      	ldr	r1, [r0, #28]
 8001158:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800115a:	6820      	ldr	r0, [r4, #0]
 800115c:	4d33      	ldr	r5, [pc, #204]	; (800122c <UART_SetConfig+0xe4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800115e:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001160:	4028      	ands	r0, r5
 8001162:	4302      	orrs	r2, r0
 8001164:	6022      	str	r2, [r4, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001166:	6862      	ldr	r2, [r4, #4]
 8001168:	4831      	ldr	r0, [pc, #196]	; (8001230 <UART_SetConfig+0xe8>)
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800116a:	6a1d      	ldr	r5, [r3, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800116c:	4002      	ands	r2, r0
 800116e:	68d8      	ldr	r0, [r3, #12]
 8001170:	4302      	orrs	r2, r0
 8001172:	6062      	str	r2, [r4, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001174:	699a      	ldr	r2, [r3, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001176:	68a0      	ldr	r0, [r4, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001178:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800117a:	4d2e      	ldr	r5, [pc, #184]	; (8001234 <UART_SetConfig+0xec>)
 800117c:	4028      	ands	r0, r5
 800117e:	4302      	orrs	r2, r0

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001180:	2003      	movs	r0, #3
 8001182:	2580      	movs	r5, #128	; 0x80
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001184:	60a2      	str	r2, [r4, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001186:	4a2c      	ldr	r2, [pc, #176]	; (8001238 <UART_SetConfig+0xf0>)
 8001188:	022d      	lsls	r5, r5, #8
 800118a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800118c:	4002      	ands	r2, r0
 800118e:	3a01      	subs	r2, #1
 8001190:	2a02      	cmp	r2, #2
 8001192:	d906      	bls.n	80011a2 <UART_SetConfig+0x5a>
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001194:	42a9      	cmp	r1, r5
 8001196:	d13c      	bne.n	8001212 <UART_SetConfig+0xca>
        break;
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001198:	6859      	ldr	r1, [r3, #4]
 800119a:	23e1      	movs	r3, #225	; 0xe1
 800119c:	0848      	lsrs	r0, r1, #1
 800119e:	041b      	lsls	r3, r3, #16
 80011a0:	e00f      	b.n	80011c2 <UART_SetConfig+0x7a>
 80011a2:	4826      	ldr	r0, [pc, #152]	; (800123c <UART_SetConfig+0xf4>)
 80011a4:	5c80      	ldrb	r0, [r0, r2]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80011a6:	42a9      	cmp	r1, r5
 80011a8:	d120      	bne.n	80011ec <UART_SetConfig+0xa4>
    switch (clocksource)
 80011aa:	2808      	cmp	r0, #8
 80011ac:	d81b      	bhi.n	80011e6 <UART_SetConfig+0x9e>
 80011ae:	f7ff f837 	bl	8000220 <__gnu_thumb1_case_sqi>
 80011b2:	1af3      	.short	0x1af3
 80011b4:	1af31a05 	.word	0x1af31a05
 80011b8:	1a1a      	.short	0x1a1a
 80011ba:	15          	.byte	0x15
 80011bb:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80011bc:	6859      	ldr	r1, [r3, #4]
 80011be:	4b20      	ldr	r3, [pc, #128]	; (8001240 <UART_SetConfig+0xf8>)
 80011c0:	0848      	lsrs	r0, r1, #1
        break;
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80011c2:	18c0      	adds	r0, r0, r3
 80011c4:	f7ff f840 	bl	8000248 <__udivsi3>
 80011c8:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80011ca:	2000      	movs	r0, #0
      default:
        ret = HAL_ERROR;
        break;
    }

    brrtemp = usartdiv & 0xFFF0U;
 80011cc:	0019      	movs	r1, r3
 80011ce:	220f      	movs	r2, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80011d0:	071b      	lsls	r3, r3, #28
    brrtemp = usartdiv & 0xFFF0U;
 80011d2:	4391      	bics	r1, r2
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80011d4:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 80011d6:	430b      	orrs	r3, r1
 80011d8:	60e3      	str	r3, [r4, #12]
    }
  }

  return ret;

}
 80011da:	bd70      	pop	{r4, r5, r6, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80011dc:	6859      	ldr	r1, [r3, #4]
 80011de:	2380      	movs	r3, #128	; 0x80
 80011e0:	0848      	lsrs	r0, r1, #1
 80011e2:	025b      	lsls	r3, r3, #9
 80011e4:	e7ed      	b.n	80011c2 <UART_SetConfig+0x7a>
    switch (clocksource)
 80011e6:	2001      	movs	r0, #1
 80011e8:	2300      	movs	r3, #0
 80011ea:	e7ef      	b.n	80011cc <UART_SetConfig+0x84>
    switch (clocksource)
 80011ec:	2808      	cmp	r0, #8
 80011ee:	d81a      	bhi.n	8001226 <UART_SetConfig+0xde>
 80011f0:	f7ff f820 	bl	8000234 <__gnu_thumb1_case_uqi>
 80011f4:	1905190f 	.word	0x1905190f
 80011f8:	1919190f 	.word	0x1919190f
 80011fc:	14          	.byte	0x14
 80011fd:	00          	.byte	0x00
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80011fe:	6859      	ldr	r1, [r3, #4]
 8001200:	4b10      	ldr	r3, [pc, #64]	; (8001244 <UART_SetConfig+0xfc>)
 8001202:	0848      	lsrs	r0, r1, #1
 8001204:	18c0      	adds	r0, r0, r3
 8001206:	f7ff f81f 	bl	8000248 <__udivsi3>
 800120a:	b280      	uxth	r0, r0
 800120c:	60e0      	str	r0, [r4, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800120e:	2000      	movs	r0, #0
 8001210:	e7e3      	b.n	80011da <UART_SetConfig+0x92>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001212:	6859      	ldr	r1, [r3, #4]
 8001214:	23e1      	movs	r3, #225	; 0xe1
 8001216:	0848      	lsrs	r0, r1, #1
 8001218:	03db      	lsls	r3, r3, #15
 800121a:	e7f3      	b.n	8001204 <UART_SetConfig+0xbc>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800121c:	6859      	ldr	r1, [r3, #4]
 800121e:	2380      	movs	r3, #128	; 0x80
 8001220:	0848      	lsrs	r0, r1, #1
 8001222:	021b      	lsls	r3, r3, #8
 8001224:	e7ee      	b.n	8001204 <UART_SetConfig+0xbc>
    switch (clocksource)
 8001226:	2001      	movs	r0, #1
 8001228:	e7d7      	b.n	80011da <UART_SetConfig+0x92>
 800122a:	46c0      	nop			; (mov r8, r8)
 800122c:	ffff69f3 	.word	0xffff69f3
 8001230:	ffffcfff 	.word	0xffffcfff
 8001234:	fffff4ff 	.word	0xfffff4ff
 8001238:	40021000 	.word	0x40021000
 800123c:	080014f8 	.word	0x080014f8
 8001240:	01e84800 	.word	0x01e84800
 8001244:	00f42400 	.word	0x00f42400

08001248 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800124a:	1e04      	subs	r4, r0, #0
  /* Check the UART handle allocation */
  if(huart == NULL)
 800124c:	d101      	bne.n	8001252 <HAL_UART_Init+0xa>
  {
    return HAL_ERROR;
 800124e:	2001      	movs	r0, #1
  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
}
 8001250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(huart->gState == HAL_UART_STATE_RESET)
 8001252:	0006      	movs	r6, r0
 8001254:	3669      	adds	r6, #105	; 0x69
 8001256:	7833      	ldrb	r3, [r6, #0]
 8001258:	b2da      	uxtb	r2, r3
 800125a:	2b00      	cmp	r3, #0
 800125c:	d102      	bne.n	8001264 <HAL_UART_Init+0x1c>
    huart->Lock = HAL_UNLOCKED;
 800125e:	0003      	movs	r3, r0
 8001260:	3368      	adds	r3, #104	; 0x68
 8001262:	701a      	strb	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001264:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001266:	2701      	movs	r7, #1
  huart->gState = HAL_UART_STATE_BUSY;
 8001268:	7033      	strb	r3, [r6, #0]
  __HAL_UART_DISABLE(huart);
 800126a:	6825      	ldr	r5, [r4, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800126c:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 800126e:	682b      	ldr	r3, [r5, #0]
 8001270:	43bb      	bics	r3, r7
 8001272:	602b      	str	r3, [r5, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001274:	f7ff ff68 	bl	8001148 <UART_SetConfig>
 8001278:	42b8      	cmp	r0, r7
 800127a:	d0e8      	beq.n	800124e <HAL_UART_Init+0x6>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800127c:	686b      	ldr	r3, [r5, #4]
 800127e:	4a0a      	ldr	r2, [pc, #40]	; (80012a8 <HAL_UART_Init+0x60>)
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001280:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001282:	4013      	ands	r3, r2
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001284:	2208      	movs	r2, #8
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001286:	606b      	str	r3, [r5, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001288:	68ab      	ldr	r3, [r5, #8]
 800128a:	4393      	bics	r3, r2
 800128c:	60ab      	str	r3, [r5, #8]
  __HAL_UART_ENABLE(huart);
 800128e:	682b      	ldr	r3, [r5, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8001290:	0022      	movs	r2, r4
  __HAL_UART_ENABLE(huart);
 8001292:	431f      	orrs	r7, r3
  huart->gState  = HAL_UART_STATE_READY;
 8001294:	2320      	movs	r3, #32
  __HAL_UART_ENABLE(huart);
 8001296:	602f      	str	r7, [r5, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8001298:	326a      	adds	r2, #106	; 0x6a
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800129a:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 800129c:	3468      	adds	r4, #104	; 0x68
  huart->gState  = HAL_UART_STATE_READY;
 800129e:	7033      	strb	r3, [r6, #0]
  huart->RxState = HAL_UART_STATE_READY;
 80012a0:	7013      	strb	r3, [r2, #0]
  __HAL_UNLOCK(huart);
 80012a2:	7020      	strb	r0, [r4, #0]
  return (UART_CheckIdleState(huart));
 80012a4:	e7d4      	b.n	8001250 <HAL_UART_Init+0x8>
 80012a6:	46c0      	nop			; (mov r8, r8)
 80012a8:	fffff7ff 	.word	0xfffff7ff

080012ac <HAL_UART_Receive>:
  *         (as received data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80012ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012ae:	b085      	sub	sp, #20
 80012b0:	9303      	str	r3, [sp, #12]
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0;

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 80012b2:	0003      	movs	r3, r0
 80012b4:	336a      	adds	r3, #106	; 0x6a
{
 80012b6:	0016      	movs	r6, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 80012b8:	781a      	ldrb	r2, [r3, #0]
{
 80012ba:	0004      	movs	r4, r0
 80012bc:	000d      	movs	r5, r1
        return  HAL_ERROR;
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80012be:	2002      	movs	r0, #2
  if(huart->RxState == HAL_UART_STATE_READY)
 80012c0:	2a20      	cmp	r2, #32
 80012c2:	d13b      	bne.n	800133c <HAL_UART_Receive+0x90>
      return  HAL_ERROR;
 80012c4:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 80012c6:	2900      	cmp	r1, #0
 80012c8:	d038      	beq.n	800133c <HAL_UART_Receive+0x90>
 80012ca:	2e00      	cmp	r6, #0
 80012cc:	d036      	beq.n	800133c <HAL_UART_Receive+0x90>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80012ce:	2280      	movs	r2, #128	; 0x80
 80012d0:	68a1      	ldr	r1, [r4, #8]
 80012d2:	0152      	lsls	r2, r2, #5
 80012d4:	4291      	cmp	r1, r2
 80012d6:	d104      	bne.n	80012e2 <HAL_UART_Receive+0x36>
 80012d8:	6922      	ldr	r2, [r4, #16]
 80012da:	2a00      	cmp	r2, #0
 80012dc:	d101      	bne.n	80012e2 <HAL_UART_Receive+0x36>
      if((((uint32_t)pData)&1U) != 0U)
 80012de:	4205      	tst	r5, r0
 80012e0:	d12c      	bne.n	800133c <HAL_UART_Receive+0x90>
    __HAL_LOCK(huart);
 80012e2:	0022      	movs	r2, r4
 80012e4:	3268      	adds	r2, #104	; 0x68
 80012e6:	7811      	ldrb	r1, [r2, #0]
 80012e8:	2002      	movs	r0, #2
 80012ea:	2901      	cmp	r1, #1
 80012ec:	d026      	beq.n	800133c <HAL_UART_Receive+0x90>
 80012ee:	2101      	movs	r1, #1
 80012f0:	7011      	strb	r1, [r2, #0]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80012f2:	2200      	movs	r2, #0
 80012f4:	66e2      	str	r2, [r4, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80012f6:	3222      	adds	r2, #34	; 0x22
 80012f8:	701a      	strb	r2, [r3, #0]

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80012fa:	f7ff fbc9 	bl	8000a90 <HAL_GetTick>

    huart->RxXferSize = Size;
 80012fe:	0023      	movs	r3, r4
    huart->RxXferCount = Size;

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8001300:	2180      	movs	r1, #128	; 0x80
 8001302:	68a2      	ldr	r2, [r4, #8]
    huart->RxXferSize = Size;
 8001304:	3358      	adds	r3, #88	; 0x58
 8001306:	801e      	strh	r6, [r3, #0]
    huart->RxXferCount = Size;
 8001308:	805e      	strh	r6, [r3, #2]
    tickstart = HAL_GetTick();
 800130a:	9002      	str	r0, [sp, #8]
    UART_MASK_COMPUTATION(huart);
 800130c:	0149      	lsls	r1, r1, #5
 800130e:	3304      	adds	r3, #4
 8001310:	428a      	cmp	r2, r1
 8001312:	d117      	bne.n	8001344 <HAL_UART_Receive+0x98>
 8001314:	6922      	ldr	r2, [r4, #16]
 8001316:	2a00      	cmp	r2, #0
 8001318:	d112      	bne.n	8001340 <HAL_UART_Receive+0x94>
 800131a:	4a1e      	ldr	r2, [pc, #120]	; (8001394 <HAL_UART_Receive+0xe8>)
 800131c:	801a      	strh	r2, [r3, #0]
      huart->RxXferCount--;
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
      {
        return HAL_TIMEOUT;
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800131e:	2780      	movs	r7, #128	; 0x80
    uhMask = huart->Mask;
 8001320:	881e      	ldrh	r6, [r3, #0]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001322:	017f      	lsls	r7, r7, #5
    while(huart->RxXferCount > 0U)
 8001324:	0022      	movs	r2, r4
 8001326:	325a      	adds	r2, #90	; 0x5a
 8001328:	8813      	ldrh	r3, [r2, #0]
 800132a:	b298      	uxth	r0, r3
 800132c:	2b00      	cmp	r3, #0
 800132e:	d110      	bne.n	8001352 <HAL_UART_Receive+0xa6>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001330:	0023      	movs	r3, r4
 8001332:	2220      	movs	r2, #32
 8001334:	336a      	adds	r3, #106	; 0x6a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001336:	3468      	adds	r4, #104	; 0x68
    huart->RxState = HAL_UART_STATE_READY;
 8001338:	701a      	strb	r2, [r3, #0]
    __HAL_UNLOCK(huart);
 800133a:	7020      	strb	r0, [r4, #0]
  }
  else
  {
    return HAL_BUSY;
  }
}
 800133c:	b005      	add	sp, #20
 800133e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    UART_MASK_COMPUTATION(huart);
 8001340:	22ff      	movs	r2, #255	; 0xff
 8001342:	e7eb      	b.n	800131c <HAL_UART_Receive+0x70>
 8001344:	2a00      	cmp	r2, #0
 8001346:	d1ea      	bne.n	800131e <HAL_UART_Receive+0x72>
 8001348:	6922      	ldr	r2, [r4, #16]
 800134a:	2a00      	cmp	r2, #0
 800134c:	d0f8      	beq.n	8001340 <HAL_UART_Receive+0x94>
 800134e:	227f      	movs	r2, #127	; 0x7f
 8001350:	e7e4      	b.n	800131c <HAL_UART_Receive+0x70>
      huart->RxXferCount--;
 8001352:	8813      	ldrh	r3, [r2, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001354:	2120      	movs	r1, #32
      huart->RxXferCount--;
 8001356:	3b01      	subs	r3, #1
 8001358:	b29b      	uxth	r3, r3
 800135a:	8013      	strh	r3, [r2, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800135c:	9b03      	ldr	r3, [sp, #12]
 800135e:	2200      	movs	r2, #0
 8001360:	9300      	str	r3, [sp, #0]
 8001362:	0020      	movs	r0, r4
 8001364:	9b02      	ldr	r3, [sp, #8]
 8001366:	f7ff febd 	bl	80010e4 <UART_WaitOnFlagUntilTimeout>
 800136a:	2800      	cmp	r0, #0
 800136c:	d110      	bne.n	8001390 <HAL_UART_Receive+0xe4>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800136e:	68a2      	ldr	r2, [r4, #8]
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8001370:	6823      	ldr	r3, [r4, #0]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001372:	42ba      	cmp	r2, r7
 8001374:	d107      	bne.n	8001386 <HAL_UART_Receive+0xda>
 8001376:	6922      	ldr	r2, [r4, #16]
 8001378:	2a00      	cmp	r2, #0
 800137a:	d104      	bne.n	8001386 <HAL_UART_Receive+0xda>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 800137c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800137e:	4033      	ands	r3, r6
 8001380:	802b      	strh	r3, [r5, #0]
        pData +=2U;
 8001382:	3502      	adds	r5, #2
 8001384:	e7ce      	b.n	8001324 <HAL_UART_Receive+0x78>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8001386:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001388:	4033      	ands	r3, r6
 800138a:	702b      	strb	r3, [r5, #0]
 800138c:	3501      	adds	r5, #1
 800138e:	e7c9      	b.n	8001324 <HAL_UART_Receive+0x78>
        return HAL_TIMEOUT;
 8001390:	2003      	movs	r0, #3
 8001392:	e7d3      	b.n	800133c <HAL_UART_Receive+0x90>
 8001394:	000001ff 	.word	0x000001ff

08001398 <HAL_UART_Transmit>:
  *         (as sent data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001398:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint16_t* tmp;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 800139a:	0007      	movs	r7, r0
{
 800139c:	b085      	sub	sp, #20
 800139e:	9303      	str	r3, [sp, #12]
  if(huart->gState == HAL_UART_STATE_READY)
 80013a0:	3769      	adds	r7, #105	; 0x69
 80013a2:	783b      	ldrb	r3, [r7, #0]
{
 80013a4:	0004      	movs	r4, r0
 80013a6:	000d      	movs	r5, r1
 80013a8:	0016      	movs	r6, r2
        return  HAL_ERROR;
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80013aa:	2002      	movs	r0, #2
  if(huart->gState == HAL_UART_STATE_READY)
 80013ac:	2b20      	cmp	r3, #32
 80013ae:	d146      	bne.n	800143e <HAL_UART_Transmit+0xa6>
      return  HAL_ERROR;
 80013b0:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 80013b2:	2900      	cmp	r1, #0
 80013b4:	d043      	beq.n	800143e <HAL_UART_Transmit+0xa6>
 80013b6:	2a00      	cmp	r2, #0
 80013b8:	d041      	beq.n	800143e <HAL_UART_Transmit+0xa6>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80013ba:	2380      	movs	r3, #128	; 0x80
 80013bc:	68a2      	ldr	r2, [r4, #8]
 80013be:	015b      	lsls	r3, r3, #5
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d104      	bne.n	80013ce <HAL_UART_Transmit+0x36>
 80013c4:	6923      	ldr	r3, [r4, #16]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d101      	bne.n	80013ce <HAL_UART_Transmit+0x36>
      if((((uint32_t)pData)&1U) != 0U)
 80013ca:	4201      	tst	r1, r0
 80013cc:	d137      	bne.n	800143e <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 80013ce:	0023      	movs	r3, r4
 80013d0:	3368      	adds	r3, #104	; 0x68
 80013d2:	781a      	ldrb	r2, [r3, #0]
 80013d4:	2002      	movs	r0, #2
 80013d6:	2a01      	cmp	r2, #1
 80013d8:	d031      	beq.n	800143e <HAL_UART_Transmit+0xa6>
 80013da:	2201      	movs	r2, #1
 80013dc:	701a      	strb	r2, [r3, #0]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80013de:	2300      	movs	r3, #0
 80013e0:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80013e2:	3321      	adds	r3, #33	; 0x21
 80013e4:	703b      	strb	r3, [r7, #0]

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80013e6:	f7ff fb53 	bl	8000a90 <HAL_GetTick>

    huart->TxXferSize = Size;
 80013ea:	0023      	movs	r3, r4
 80013ec:	3350      	adds	r3, #80	; 0x50
 80013ee:	801e      	strh	r6, [r3, #0]
    huart->TxXferCount = Size;
 80013f0:	805e      	strh	r6, [r3, #2]
      huart->TxXferCount--;
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
      {
        return HAL_TIMEOUT;
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80013f2:	2680      	movs	r6, #128	; 0x80
    tickstart = HAL_GetTick();
 80013f4:	9002      	str	r0, [sp, #8]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80013f6:	0176      	lsls	r6, r6, #5
    while(huart->TxXferCount > 0)
 80013f8:	0021      	movs	r1, r4
 80013fa:	3152      	adds	r1, #82	; 0x52
 80013fc:	880b      	ldrh	r3, [r1, #0]
 80013fe:	b29a      	uxth	r2, r3
 8001400:	2b00      	cmp	r3, #0
 8001402:	d10d      	bne.n	8001420 <HAL_UART_Transmit+0x88>
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001404:	9b03      	ldr	r3, [sp, #12]
 8001406:	2140      	movs	r1, #64	; 0x40
 8001408:	9300      	str	r3, [sp, #0]
 800140a:	0020      	movs	r0, r4
 800140c:	9b02      	ldr	r3, [sp, #8]
 800140e:	f7ff fe69 	bl	80010e4 <UART_WaitOnFlagUntilTimeout>
 8001412:	2800      	cmp	r0, #0
 8001414:	d112      	bne.n	800143c <HAL_UART_Transmit+0xa4>
    {
      return HAL_TIMEOUT;
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001416:	2320      	movs	r3, #32

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001418:	3468      	adds	r4, #104	; 0x68
    huart->gState = HAL_UART_STATE_READY;
 800141a:	703b      	strb	r3, [r7, #0]
    __HAL_UNLOCK(huart);
 800141c:	7020      	strb	r0, [r4, #0]

    return HAL_OK;
 800141e:	e00e      	b.n	800143e <HAL_UART_Transmit+0xa6>
      huart->TxXferCount--;
 8001420:	880b      	ldrh	r3, [r1, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001422:	2200      	movs	r2, #0
      huart->TxXferCount--;
 8001424:	3b01      	subs	r3, #1
 8001426:	b29b      	uxth	r3, r3
 8001428:	800b      	strh	r3, [r1, #0]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800142a:	9b03      	ldr	r3, [sp, #12]
 800142c:	2180      	movs	r1, #128	; 0x80
 800142e:	9300      	str	r3, [sp, #0]
 8001430:	0020      	movs	r0, r4
 8001432:	9b02      	ldr	r3, [sp, #8]
 8001434:	f7ff fe56 	bl	80010e4 <UART_WaitOnFlagUntilTimeout>
 8001438:	2800      	cmp	r0, #0
 800143a:	d002      	beq.n	8001442 <HAL_UART_Transmit+0xaa>
        return HAL_TIMEOUT;
 800143c:	2003      	movs	r0, #3
  }
  else
  {
    return HAL_BUSY;
  }
}
 800143e:	b005      	add	sp, #20
 8001440:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001442:	68a3      	ldr	r3, [r4, #8]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001444:	6822      	ldr	r2, [r4, #0]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001446:	42b3      	cmp	r3, r6
 8001448:	d108      	bne.n	800145c <HAL_UART_Transmit+0xc4>
 800144a:	6923      	ldr	r3, [r4, #16]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d105      	bne.n	800145c <HAL_UART_Transmit+0xc4>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001450:	882b      	ldrh	r3, [r5, #0]
        pData += 2;
 8001452:	3502      	adds	r5, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001454:	05db      	lsls	r3, r3, #23
 8001456:	0ddb      	lsrs	r3, r3, #23
 8001458:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2;
 800145a:	e7cd      	b.n	80013f8 <HAL_UART_Transmit+0x60>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 800145c:	782b      	ldrb	r3, [r5, #0]
 800145e:	3501      	adds	r5, #1
 8001460:	8513      	strh	r3, [r2, #40]	; 0x28
 8001462:	e7c9      	b.n	80013f8 <HAL_UART_Transmit+0x60>

08001464 <Reset_Handler>:
 8001464:	2100      	movs	r1, #0
 8001466:	e003      	b.n	8001470 <LoopCopyDataInit>

08001468 <CopyDataInit>:
 8001468:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <LoopForever+0x2>)
 800146a:	585b      	ldr	r3, [r3, r1]
 800146c:	5043      	str	r3, [r0, r1]
 800146e:	3104      	adds	r1, #4

08001470 <LoopCopyDataInit>:
 8001470:	480a      	ldr	r0, [pc, #40]	; (800149c <LoopForever+0x6>)
 8001472:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <LoopForever+0xa>)
 8001474:	1842      	adds	r2, r0, r1
 8001476:	429a      	cmp	r2, r3
 8001478:	d3f6      	bcc.n	8001468 <CopyDataInit>
 800147a:	4a0a      	ldr	r2, [pc, #40]	; (80014a4 <LoopForever+0xe>)
 800147c:	e002      	b.n	8001484 <LoopFillZerobss>

0800147e <FillZerobss>:
 800147e:	2300      	movs	r3, #0
 8001480:	6013      	str	r3, [r2, #0]
 8001482:	3204      	adds	r2, #4

08001484 <LoopFillZerobss>:
 8001484:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <LoopForever+0x12>)
 8001486:	429a      	cmp	r2, r3
 8001488:	d3f9      	bcc.n	800147e <FillZerobss>
 800148a:	e000      	b.n	800148e <LoopFillZerobss+0xa>
 800148c:	bf00      	nop
 800148e:	f7fe ff67 	bl	8000360 <__libc_init_array>
 8001492:	f7ff f8eb 	bl	800066c <main>

08001496 <LoopForever>:
 8001496:	e7fe      	b.n	8001496 <LoopForever>
 8001498:	08001544 	.word	0x08001544
 800149c:	20000000 	.word	0x20000000
 80014a0:	20000004 	.word	0x20000004
 80014a4:	20000004 	.word	0x20000004
 80014a8:	20000198 	.word	0x20000198

080014ac <BusFault_Handler>:
 80014ac:	e7fe      	b.n	80014ac <BusFault_Handler>
 80014ae:	0000      	movs	r0, r0

080014b0 <_init>:
 80014b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014b2:	46c0      	nop			; (mov r8, r8)
 80014b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014b6:	bc08      	pop	{r3}
 80014b8:	469e      	mov	lr, r3
 80014ba:	4770      	bx	lr

080014bc <_fini>:
 80014bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014be:	46c0      	nop			; (mov r8, r8)
 80014c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014c2:	bc08      	pop	{r3}
 80014c4:	469e      	mov	lr, r3
 80014c6:	4770      	bx	lr
